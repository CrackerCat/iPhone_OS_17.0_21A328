//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@interface CRLPointPathSource
{
    unsigned long long mType;	// 8 = 0x8
    struct CGPoint mPoint;	// 16 = 0x10
    struct CGSize mNaturalSize;	// 32 = 0x20
}

+ (id)pathSourceWithType:(unsigned long long)arg1 point:(struct CGPoint)arg2 naturalSize:(struct CGSize)arg3;	// IMP=0x002000000037d7fe
+ (id)plusWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x001000000037d7e4
+ (id)starWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x001000000037d7ca
+ (id)doubleArrowWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x001000000037d7b0
+ (id)leftSingleArrowWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x001000000037d799
+ (id)rightSingleArrowWithPoint:(struct CGPoint)arg1 naturalSize:(struct CGSize)arg2;	// IMP=0x001000000037d77f
- (void)setNaturalSize:(struct CGSize)arg1;	// IMP=0x0020000000380794
- (struct CGSize)naturalSize;	// IMP=0x001000000038077c
@property(nonatomic) struct CGPoint point; // @synthesize point=mPoint;
@property(nonatomic) unsigned long long type; // @synthesize type=mType;
- (id)crlaxCommandForAccessibilityIncrementDecrement:(_Bool)arg1 forKnobTag:(unsigned long long)arg2 usingLayout:(id)arg3 andCanvasController:(id)arg4;	// IMP=0x001000000038058b
- (_Bool)crlaxOffersMoveActionsForKnobTag:(unsigned long long)arg1;	// IMP=0x0010000000380564
- (_Bool)crlaxIsAdjustableForKnobTag:(unsigned long long)arg1;	// IMP=0x001000000038054a
- (id)crlaxUserInputLabelForKnobTag:(unsigned long long)arg1;	// IMP=0x001000000038049c
- (id)crlaxValueForKnobTag:(unsigned long long)arg1;	// IMP=0x001000000038040a
- (id)crlaxLabelComponentForKnobTag:(unsigned long long)arg1;	// IMP=0x001000000038029c
- (id)inferredLocalizedAccessibilityDescriptionPlaceholder;	// IMP=0x0010000000380165
- (id)inferredAccessibilityDescription;	// IMP=0x001000000038002e
- (id)inferredAccessibilityDescriptionNoShapeNames;	// IMP=0x001000000037ffba
- (_Bool)p_isFlippedDoubleArrow;	// IMP=0x001000000037ff96
- (_Bool)p_isRightFacingArrow;	// IMP=0x001000000037ff6f
- (struct CGPoint)p_getControlKnobPointForPlus;	// IMP=0x001000000037ff2e
- (void)p_setControlKnobPointForPlus:(struct CGPoint)arg1;	// IMP=0x001000000037fe90
- (struct CGPoint)p_getControlKnobPointForStarInnerRadius;	// IMP=0x001000000037fda1
- (void)p_setControlKnobPointForStarInnerRadius:(struct CGPoint)arg1;	// IMP=0x001000000037fcc0
- (struct CGPoint)p_getControlKnobPointForStarPoints;	// IMP=0x001000000037fbc0
- (void)p_setControlKnobPointForStarPoints:(struct CGPoint)arg1;	// IMP=0x001000000037fa23
- (struct CGPoint)p_getControlKnobPointForArrow;	// IMP=0x001000000037f983
- (void)p_setControlKnobPointForArrow:(struct CGPoint)arg1;	// IMP=0x001000000037f8ca
- (struct CGPath *)p_newPlusPath;	// IMP=0x001000000037f715
- (struct CGPath *)p_newStarPath;	// IMP=0x001000000037f500
- (struct CGPath *)p_newArrowPath;	// IMP=0x001000000037f054
- (id)name;	// IMP=0x001000000037ef1d
- (_Bool)isCircular;	// IMP=0x001000000037ef15
- (_Bool)isRectangular;	// IMP=0x001000000037ef0d
- (id)bezierPathWithoutFlips;	// IMP=0x001000000037ee75
- (struct CGPath *)newFeedbackPathForKnob:(unsigned long long)arg1;	// IMP=0x001000000037ed2a
- (id)getFeedbackStringForKnob:(unsigned long long)arg1;	// IMP=0x001000000037ebef
- (void)setControlKnobPosition:(unsigned long long)arg1 toPoint:(struct CGPoint)arg2;	// IMP=0x001000000037eb59
- (struct CGPoint)getControlKnobPosition:(unsigned long long)arg1;	// IMP=0x001000000037eae4
@property(readonly) unsigned long long numberOfControlKnobs;
- (void)scaleToNaturalSize:(struct CGSize)arg1;	// IMP=0x001000000037ea38
@property(readonly, nonatomic) double minArrowHead;
@property(readonly, nonatomic) double maxArrowHead;
@property(readonly, nonatomic) double arrowHead;
@property(readonly, nonatomic) double minArrowIndent;
@property(readonly, nonatomic) double maxArrowIndent;
@property(readonly, nonatomic) double arrowIndent;
- (_Bool)p_isArrowType;	// IMP=0x001000000037e20d
@property(readonly, nonatomic) double minStarRadius;
@property(readonly, nonatomic) double maxStarRadius;
@property(readonly, nonatomic) double starRadius;
@property(readonly, nonatomic) unsigned long long minStarPoints;
@property(readonly, nonatomic) unsigned long long maxStarPoints;
@property(readonly, nonatomic) unsigned long long starPoints;
@property(readonly, nonatomic) struct CGPoint maxPointValue;
@property(readonly, nonatomic) struct CGPoint minPointValue;
- (id)description;	// IMP=0x001000000037db62
- (unsigned long long)hash;	// IMP=0x001000000037db1f
- (_Bool)isEqual:(id)arg1;	// IMP=0x001000000037d9bc
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x001000000037d925
- (id)init;	// IMP=0x001000000037d8f8
- (id)initWithType:(unsigned long long)arg1 point:(struct CGPoint)arg2 naturalSize:(struct CGSize)arg3;	// IMP=0x001000000037d858

// Remaining properties
@property(readonly, nonatomic) struct CGPoint fixedPointForControlKnobChange;

@end

