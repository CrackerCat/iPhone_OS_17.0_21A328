//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CRLBezierPath, CRLCanvasRenderable, CRLCanvasRep, CRLCursor, CRLImage;

@interface CRLCanvasKnob : NSObject
{
    CRLCanvasRenderable *_renderable;	// 8 = 0x8
    _Bool _offsetValid;	// 16 = 0x10
    _Bool _worksWhenRepLocked;	// 17 = 0x11
    _Bool _worksWhenEditingDisabled;	// 18 = 0x12
    _Bool _worksWithStylus;	// 19 = 0x13
    _Bool _worksWhenInMediaBrowsingMode;	// 20 = 0x14
    _Bool _worksWithMultipleTaps;	// 21 = 0x15
    _Bool _shouldDisplayDirectlyOverRep;	// 22 = 0x16
    _Bool _wantsToFadeDuringZoom;	// 23 = 0x17
    _Bool _worksWhenDocumentIsSharedReadOnly;	// 24 = 0x18
    CRLCanvasRep *_rep;	// 32 = 0x20
    unsigned long long _type;	// 40 = 0x28
    double _radius;	// 48 = 0x30
    unsigned long long _tag;	// 56 = 0x38
    CRLBezierPath *_hitRegionPath;	// 64 = 0x40
    struct CGPoint _position;	// 72 = 0x48
    struct CGPoint _offset;	// 88 = 0x58
}

+ (id)greenKnobImage;	// IMP=0x00200000003132b4
+ (id)defaultSelectionKnobImage;	// IMP=0x0010000000313294
- (void).cxx_destruct;	// IMP=0x0020000000314746
@property(nonatomic) _Bool worksWhenDocumentIsSharedReadOnly; // @synthesize worksWhenDocumentIsSharedReadOnly=_worksWhenDocumentIsSharedReadOnly;
@property(copy, nonatomic) CRLBezierPath *hitRegionPath; // @synthesize hitRegionPath=_hitRegionPath;
@property(nonatomic) _Bool wantsToFadeDuringZoom; // @synthesize wantsToFadeDuringZoom=_wantsToFadeDuringZoom;
@property(nonatomic) _Bool shouldDisplayDirectlyOverRep; // @synthesize shouldDisplayDirectlyOverRep=_shouldDisplayDirectlyOverRep;
@property(nonatomic) _Bool worksWithMultipleTaps; // @synthesize worksWithMultipleTaps=_worksWithMultipleTaps;
@property(nonatomic) _Bool worksWhenInMediaBrowsingMode; // @synthesize worksWhenInMediaBrowsingMode=_worksWhenInMediaBrowsingMode;
@property(nonatomic) _Bool worksWithStylus; // @synthesize worksWithStylus=_worksWithStylus;
@property(nonatomic) _Bool worksWhenEditingDisabled; // @synthesize worksWhenEditingDisabled=_worksWhenEditingDisabled;
@property(nonatomic) _Bool worksWhenRepLocked; // @synthesize worksWhenRepLocked=_worksWhenRepLocked;
@property(nonatomic) unsigned long long tag; // @synthesize tag=_tag;
@property(nonatomic) double radius; // @synthesize radius=_radius;
@property(nonatomic) struct CGPoint offset; // @synthesize offset=_offset;
@property(nonatomic) _Bool offsetValid; // @synthesize offsetValid=_offsetValid;
@property(nonatomic) struct CGPoint position; // @synthesize position=_position;
@property(nonatomic) unsigned long long type; // @synthesize type=_type;
@property(readonly, nonatomic) __weak CRLCanvasRep *rep; // @synthesize rep=_rep;
- (struct CGPoint)pixelAlignedScaledCanvasCenterPositionFromKnobPosition:(struct CGPoint)arg1;	// IMP=0x00100000003143c7
- (id)description;	// IMP=0x001000000031431e
- (_Bool)obscuresKnob:(id)arg1;	// IMP=0x0010000000314247
- (_Bool)overlapsWithKnob:(id)arg1;	// IMP=0x00100000003141ac
@property(readonly, nonatomic) struct CGRect frameForIntersection;
- (_Bool)transferCursorInsideStateIfDesiredFromKnob:(id)arg1;	// IMP=0x0010000000314148
- (void)cursorExitedKnobAtPoint:(struct CGPoint)arg1 withPlatformObject:(id)arg2;	// IMP=0x0010000000314142
- (void)cursorMovedAtPoint:(struct CGPoint)arg1 withPlatformObject:(id)arg2;	// IMP=0x001000000031413c
- (void)cursorEnteredKnobAtPoint:(struct CGPoint)arg1 withPlatformObject:(id)arg2;	// IMP=0x0010000000314136
@property(readonly, nonatomic) CRLCursor *rotateCursor;
@property(readonly, nonatomic) struct CGRect cursorActiveScaledRect;
@property(readonly, nonatomic) CRLCursor *resizeCursor;
- (void)updateHitRegionPath;	// IMP=0x0010000000313867
- (double)p_rotationInDegrees;	// IMP=0x0010000000313750
- (struct CGRect)unscaledBoundingBoxOfHitRegionWithAdditionalScale:(double)arg1;	// IMP=0x00100000003135bd
- (id)createKnobRenderable;	// IMP=0x0010000000313331
- (void)didCreateKnobRenderable;	// IMP=0x001000000031332b
@property(readonly, nonatomic) CRLCanvasRenderable *renderable;
@property(readonly, nonatomic) CRLImage *defaultKnobImage;
@property(readonly, nonatomic) CRLImage *knobImage;
- (id)p_scaledPreciseHitRegionForInputType:(long long)arg1;	// IMP=0x001000000031313c
- (double)radiusForPreciseHitRegionWithInputType:(long long)arg1;	// IMP=0x001000000031312e
@property(readonly, nonatomic) unsigned long long dragType;
- (_Bool)isHitByUnscaledPoint:(struct CGPoint)arg1 inputType:(long long)arg2 returningDistance:(double *)arg3;	// IMP=0x0010000000312d43
- (_Bool)isHitByUnscaledPoint:(struct CGPoint)arg1 inputType:(long long)arg2;	// IMP=0x0010000000312d2f
- (void)dealloc;	// IMP=0x0010000000312ca8
- (id)initWithType:(unsigned long long)arg1 position:(struct CGPoint)arg2 radius:(double)arg3 tag:(unsigned long long)arg4 onRep:(id)arg5;	// IMP=0x00100000003129fa

@end

