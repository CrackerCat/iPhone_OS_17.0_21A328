//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class NSObject;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CATransform3D {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
};

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGColor;

struct CGImage;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CRLMatrix2x2 {
    double m[2][2];
};

struct CRLPKCompressedStrokePoint {
    float _field1;
    struct _CRLPKPoint _field2;
    unsigned short _field3;
    unsigned short _field4;
    unsigned short _field5;
    unsigned short _field6;
    unsigned short _field7;
    unsigned char _field8;
    unsigned char _field9;
};

struct CRLPKStrokePointCompactData {
    unsigned short _field1;
    unsigned short _field2;
    unsigned short _field3;
    unsigned short _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    unsigned short _field9;
};

struct CRLPointVector2 {
    struct CGPoint v[2];
};

struct CRLPointVector3 {
    struct CGPoint v[3];
};

struct CRLWPDrawingState {
    id _field1;
    id _field2;
    struct CGRect _field3;
    id _field4;
    id _field5;
    unsigned long long _field6;
    struct CGColor *_field7;
    double _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    _Bool _field16;
    unsigned long long _field17;
    id _field18;
    id _field19;
    struct _NSRange _field20;
    id _field21;
    id _field22;
    struct _NSRange _field23;
    struct _NSRange _field24;
    unsigned long long _field25;
    struct _NSRange _field26;
    id _field27;
    _Bool _field28;
    id _field29;
};

struct CRLWPFontHeightInfo {
    double spaceBefore;
    double attachmentHeight;
    double ascent;
    double capHeight;
    double descent;
    double leadingAbove;
    double leadingBelow;
    double spaceAfter;
    double verticalHeight;
    double xHeight;
    double underlinePosition;
    double underlineThickness;
};

struct CRLWPLineFragment;

struct CRLWPLineFragmentArray;

struct CRLWPLineRef {
    struct __CTLine *_field1;
    struct CGPoint _field2;
    struct _NSRange _field3;
    unsigned long long _field4;
    struct CGAffineTransform _field5;
    unsigned long long _field6;
};

struct CRLWPParagraphEnumerator {
    id _storage;
    NSObject *_styleProvider;
    unsigned long long _parIndex;
    unsigned long long _endParIndex;
    unsigned long long _firstParIndex;
    unsigned long long _lastParIndex;
    _Bool _requireHidden;
    struct _NSRange _currentTextRange;
};

struct CRLWPParagraphTypesetter;

struct IndirectArgumentBufferCapabilities {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :29;
};

struct MTLResourceID {
    unsigned long long _field1;
};

struct MTLTargetDeviceArch {
    unsigned long long _field1;
    unsigned int _field2;
    char *_field3;
};

struct PATHSEGMENT {
    unsigned int :4;
    unsigned int :60;
    struct CGPoint _field1;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct _CRLPKInflightStrokePoint {
    double _field1;
    struct CGPoint _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    long long _field11;
    double _field12;
};

struct _CRLPKPoint {
    float _field1;
    float _field2;
};

struct _CRLPKStrokeID {
    unsigned int clock;
    unsigned char replicaUUID[16];
    unsigned int subclock;
};

struct _CRLPKStrokePoint {
    double timestamp;
    struct CGPoint location;
    double radius;
    double aspectRatio;
    double edgeWidth;
    double force;
    double azimuth;
    double altitude;
    double opacity;
};

struct _CRLStrokeOutsets {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct _CRLWPCharIndexAndAffinity;

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __shared_weak_count;

struct __tree_end_node<std::__tree_node_base<void *>*> {
    void *__left_;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

struct _xmlDoc {
    void *_field1;
    int _field2;
    char *_field3;
    struct _xmlNode *_field4;
    struct _xmlNode *_field5;
    struct _xmlNode *_field6;
    struct _xmlNode *_field7;
    struct _xmlNode *_field8;
    struct _xmlDoc *_field9;
    int _field10;
    int _field11;
    struct _xmlDtd *_field12;
    struct _xmlDtd *_field13;
    struct _xmlNs *_field14;
    char *_field15;
    char *_field16;
    void *_field17;
    void *_field18;
    char *_field19;
    int _field20;
    struct _xmlDict *_field21;
    void *_field22;
    int _field23;
    int _field24;
};

struct _xmlDtd;

struct _xmlNode;

struct internal_state;

struct list<unsigned long, std::allocator<unsigned long>> {
    struct __list_node_base<unsigned long, void *> {
        void *__prev_;
        void *__next_;
    } __end_;
    struct __compressed_pair<unsigned long, std::allocator<std::__list_node<unsigned long, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct map<unsigned long, CRLWPFontMetricsCacheEntry, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, CRLWPFontMetricsCacheEntry>>> {
    struct __tree<std::__value_type<unsigned long, CRLWPFontMetricsCacheEntry>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, CRLWPFontMetricsCacheEntry>, std::less<unsigned long>>, std::allocator<std::__value_type<unsigned long, CRLWPFontMetricsCacheEntry>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned long, CRLWPFontMetricsCacheEntry>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, CRLWPFontMetricsCacheEntry>, std::less<unsigned long>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned long, std::shared_ptr<CRLWPParagraphTypesetter>, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, std::shared_ptr<CRLWPParagraphTypesetter>>>> {
    struct __tree<std::__value_type<unsigned long, std::shared_ptr<CRLWPParagraphTypesetter>>, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::shared_ptr<CRLWPParagraphTypesetter>>, std::less<unsigned long>>, std::allocator<std::__value_type<unsigned long, std::shared_ptr<CRLWPParagraphTypesetter>>>> {
        void *__begin_node_;
        struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *>*>, std::allocator<std::__tree_node<std::__value_type<unsigned long, std::shared_ptr<CRLWPParagraphTypesetter>>, void *>>> {
            struct __tree_end_node<std::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__map_value_compare<unsigned long, std::__value_type<unsigned long, std::shared_ptr<CRLWPParagraphTypesetter>>, std::less<unsigned long>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct shared_ptr<CRLWPLineFragmentArray> {
    struct CRLWPLineFragmentArray *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CRLWPParagraphTypesetter> {
    struct CRLWPParagraphTypesetter *_field1;
    struct __shared_weak_count *_field2;
};

struct tsuSaPage {
    CDUnknownFunctionPointerType *_field1;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, long>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, long>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, long>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, long>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, long>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, long>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CRLBezierPath *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CRLBezierPath *>, void *>*>*>>> {
    struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CRLBezierPath *>, void *>*>**, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CRLBezierPath *>, void *>*>*>>> {
        void **__value_;
        struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CRLBezierPath *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CRLBezierPath *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>, CGPointHash, CGPointEquality, std::allocator<std::pair<const CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>>> {
    struct __hash_table<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, std::__unordered_map_hasher<CGPoint, std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, CGPointHash, CGPointEquality>, std::__unordered_map_equal<CGPoint, std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, CGPointEquality, CGPointHash>, std::allocator<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<CGPoint, std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, CGPointHash, CGPointEquality>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<CGPoint, std::__hash_value_type<CGPoint, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, CGPointEquality, CGPointHash>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>, CRLBezierPathPointerHash, CRLBezierPathPointerEquality, std::allocator<std::pair<CRLBezierPath *const, std::set<CRLBezierHitTesterPointInfo, PointCompare>>>> {
    struct __hash_table<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, std::__unordered_map_hasher<CRLBezierPath *, std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, CRLBezierPathPointerHash, CRLBezierPathPointerEquality>, std::__unordered_map_equal<CRLBezierPath *, std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, CRLBezierPathPointerEquality, CRLBezierPathPointerHash>, std::allocator<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<CRLBezierPath *, std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, CRLBezierPathPointerHash, CRLBezierPathPointerEquality>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<CRLBezierPath *, std::__hash_value_type<CRLBezierPath *, std::set<CRLBezierHitTesterPointInfo, PointCompare>>, CRLBezierPathPointerEquality, CRLBezierPathPointerHash>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<long, long, std::hash<long>, std::equal_to<long>, std::allocator<std::pair<const long, long>>> {
    struct __hash_table<std::__hash_value_type<long, long>, std::__unordered_map_hasher<long, std::__hash_value_type<long, long>, std::hash<long>, std::equal_to<long>>, std::__unordered_map_equal<long, std::__hash_value_type<long, long>, std::equal_to<long>, std::hash<long>>, std::allocator<std::__hash_value_type<long, long>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, long>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, long>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long, long>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<long, long>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<long, long>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long, std::__hash_value_type<long, long>, std::hash<long>, std::equal_to<long>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<long, std::__hash_value_type<long, long>, std::equal_to<long>, std::hash<long>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long, CRLBezierPath *, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, CRLBezierPath *>>> {
    struct __hash_table<std::__hash_value_type<unsigned long, CRLBezierPath *>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, CRLBezierPath *>, std::hash<unsigned long>, std::equal_to<unsigned long>>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, CRLBezierPath *>, std::equal_to<unsigned long>, std::hash<unsigned long>>, std::allocator<std::__hash_value_type<unsigned long, CRLBezierPath *>>> {
        struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CRLBezierPath *>, void *>*>*[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CRLBezierPath *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CRLBezierPath *>, void *>*>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, CRLBezierPath *>, void *>>> {
            struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, CRLBezierPath *>, void *>*> {
                void *__next_;
            } __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, CRLBezierPath *>, std::hash<unsigned long>, std::equal_to<unsigned long>>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, CRLBezierPath *>, std::equal_to<unsigned long>, std::hash<unsigned long>>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<CGPoint, std::allocator<CGPoint>> {
    struct CGPoint *__begin_;
    struct CGPoint *__end_;
    struct __compressed_pair<CGPoint *, std::allocator<CGPoint>> {
        struct CGPoint *__value_;
    } __end_cap_;
};

struct vector<CGRect, std::allocator<CGRect>> {
    struct CGRect *__begin_;
    struct CGRect *__end_;
    struct __compressed_pair<CGRect *, std::allocator<CGRect>> {
        struct CGRect *__value_;
    } __end_cap_;
};

struct vector<CRLBezierHitTesterHitInfo, std::allocator<CRLBezierHitTesterHitInfo>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<CRLBezierHitTesterHitInfo *, std::allocator<CRLBezierHitTesterHitInfo>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<CRLPKInputPoint, std::allocator<CRLPKInputPoint>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<CRLPKInputPoint *, std::allocator<CRLPKInputPoint>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<CRLWPAttachmentPosition, std::allocator<CRLWPAttachmentPosition>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<CRLWPAttachmentPosition *, std::allocator<CRLWPAttachmentPosition>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<CRLWPDirtyRange, std::allocator<CRLWPDirtyRange>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<CRLWPDirtyRange *, std::allocator<CRLWPDirtyRange>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<_CRLPKStrokePoint, std::allocator<_CRLPKStrokePoint>> {
    struct _CRLPKStrokePoint *__begin_;
    struct _CRLPKStrokePoint *__end_;
    struct __compressed_pair<_CRLPKStrokePoint *, std::allocator<_CRLPKStrokePoint>> {
        struct _CRLPKStrokePoint *__value_;
    } __end_cap_;
};

struct vector<_CRLWPCharIndexAndAffinity, std::allocator<_CRLWPCharIndexAndAffinity>> {
    struct _CRLWPCharIndexAndAffinity *__begin_;
    struct _CRLWPCharIndexAndAffinity *__end_;
    struct __compressed_pair<_CRLWPCharIndexAndAffinity *, std::allocator<_CRLWPCharIndexAndAffinity>> {
        struct _CRLWPCharIndexAndAffinity *__value_;
    } __end_cap_;
};

struct vector<_NSRange, std::allocator<_NSRange>> {
    struct _NSRange *__begin_;
    struct _NSRange *__end_;
    struct __compressed_pair<_NSRange *, std::allocator<_NSRange>> {
        struct _NSRange *__value_;
    } __end_cap_;
};

struct vector<bool, std::allocator<bool>> {
    unsigned long long *__begin_;
    unsigned long long __size_;
    struct __compressed_pair<unsigned long, std::allocator<unsigned long>> {
        unsigned long long __value_;
    } __cap_alloc_;
};

struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<std::pair<long, double>, std::allocator<std::pair<long, double>>> {
    void *__begin_;
    void *__end_;
    struct __compressed_pair<std::pair<long, double>*, std::allocator<std::pair<long, double>>> {
        void *__value_;
    } __end_cap_;
};

struct vector<unsigned long, std::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

struct vector<unsigned short, std::allocator<unsigned short>> {
    unsigned short *__begin_;
    unsigned short *__end_;
    struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> {
        unsigned short *__value_;
    } __end_cap_;
};

struct z_stream_s {
    char *next_in;
    unsigned int avail_in;
    unsigned long long total_in;
    char *next_out;
    unsigned int avail_out;
    unsigned long long total_out;
    char *msg;
    struct internal_state *state;
    CDUnknownFunctionPointerType zalloc;
    CDUnknownFunctionPointerType zfree;
    void *opaque;
    int data_type;
    unsigned long long adler;
    unsigned long long reserved;
};

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    unsigned long long _field2;
    double _field3;
} CDStruct_45a6b6f8;

typedef struct {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
} CDStruct_a06f635e;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    unsigned int _field14;
    unsigned int _field15;
    unsigned int _field16;
    unsigned int _field17;
    unsigned int _field18;
    unsigned int _field19;
    unsigned int _field20;
    unsigned int _field21;
    unsigned int _field22;
    unsigned int _field23;
    unsigned int _field24;
    unsigned int _field25;
    unsigned int _field26;
    float _field27;
    float _field28;
    unsigned int _field29;
    unsigned int _field30;
    unsigned int _field31;
    unsigned int _field32;
    unsigned int _field33;
    unsigned int _field34;
    unsigned int _field35;
    unsigned int _field36;
    unsigned int _field37;
    unsigned int _field38;
    unsigned int _field39;
    unsigned int _field40;
    unsigned int _field41;
    unsigned int _field42;
    unsigned int _field43;
    unsigned int _field44;
    unsigned int _field45;
    unsigned int _field46;
    unsigned int _field47;
    unsigned int _field48;
    unsigned int _field49;
    unsigned int _field50;
    unsigned int _field51;
    unsigned int _field52;
    unsigned int _field53;
    unsigned int _field54;
    unsigned int _field55;
    unsigned int _field56;
    unsigned int _field57;
    unsigned int _field58;
    unsigned int _field59;
    unsigned int _field60;
    unsigned int _field61;
    unsigned int _field62;
    unsigned int _field63;
    unsigned long long _field64;
} CDStruct_e1c34685;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
} CDStruct_32a7f38a;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
} CDStruct_c0454aff;

typedef struct {
    unsigned int _field1;
    long long _field2;
} CDStruct_31de062f;

typedef struct {
    unsigned long long _field1;
    _Bool _field2;
    _Bool _field3;
    int _field4;
    unsigned long long _field5;
    _Bool _field6;
    int _field7;
    unsigned long long _field8;
    _Bool _field9;
    int _field10;
} CDStruct_7549c2a6;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
} CDStruct_14f26992;

typedef struct {
    unsigned long long _field1;
    unsigned long long _field2;
} CDStruct_4bcfbbae;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    unsigned long long _field1;
    double _field2;
} CDStruct_316206b0;

typedef struct {
    unsigned short _field1;
    unsigned short _field2;
} CDStruct_d65e47c4;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_d2b197d1;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
} CDStruct_818bb265;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
} CDStruct_869f9c67;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct CDStruct_183601bc;

typedef struct {
    id _field1;
    id _field2;
    _Bool _field3;
    id _field4;
    struct CGImage *_field5;
    _Bool _field6;
} CDStruct_f7390655;

typedef struct {
    _Bool _field1;
    unsigned long long _field2;
    CDStruct_183601bc *_field3;
} CDStruct_dbc1e4aa;

typedef struct {
    struct CRLWPLineFragment *_field1;
    struct CRLWPLineFragment *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    _Bool _field7;
    _Bool _field8;
} CDStruct_43c8ebdc;

typedef struct {
    double _field1;
    struct CGPoint _field2;
    long long _field3;
    double _field4;
} CDStruct_46b2202e;

typedef struct {
    long long _field1;
    unsigned long long _field2;
    _Bool _field3;
    char *_field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    _Bool _field8;
    struct _NSRange _field9;
    unsigned long long _field10;
} CDStruct_64113493;

typedef struct {
    CDStruct_14f26992 _field1;
    CDStruct_14f26992 _field2;
} CDStruct_4c83c94d;

typedef struct {
    CDStruct_1b6d18a9 start;
    CDStruct_1b6d18a9 duration;
} CDStruct_e83c9415;

typedef struct {
    struct CGPoint _field1;
    unsigned long long _field2;
    _Bool _field3;
} CDStruct_7df06a46;

typedef struct {
    struct CGPoint _field1;
    unsigned long long _field2;
    double _field3;
    _Bool _field4;
} CDStruct_68a6f4ad;

typedef struct {
    struct CGPoint _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    _Bool _field7;
    long long _field8;
    double _field9;
    _Bool _field10;
} CDStruct_f17e9403;

typedef struct {
    struct CGPoint testPoint;
    struct CGPoint hitPoint;
    unsigned long long hitPathID;
    double hitPercentAlongPath;
    double distanceBetweenPoints;
} CDStruct_9109adbb;

typedef struct {
    struct CGPoint _field1;
    struct CGPoint _field2;
} CDStruct_e3b9714e;

typedef struct {
    struct _NSRange _field1;
    id _field2;
    double _field3;
    id _field4[3];
    unsigned int _field5;
    struct CRLWPDrawingState *_field6;
    id _field7;
    id _field8;
    id _field9;
    struct __CTFont *_field10;
    struct CGColor *_field11;
    id _field12;
    _Bool _field13;
    unsigned long long _field14;
    double _field15;
    struct CGColor *_field16;
    double _field17;
} CDStruct_cc273231;

typedef struct {
    struct _NSRange _field1;
    long long _field2;
} CDStruct_9ae92562;

typedef struct {
    union {
        struct CGPoint _field1;
        struct CGPoint _field2;
    } _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    _Bool _field9;
    long long _field10;
    double _field11;
    _Bool _field12;
} CDStruct_34bbc9a6;

typedef struct {
    struct CGRect _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    _Bool _field6;
    struct CGAffineTransform _field7;
} CDStruct_249a8bf0;

typedef struct {
    struct CGRect _field1;
    double _field2;
    struct CGRect _field3;
    _Bool _field4;
} CDStruct_a5f74a6d;

typedef struct {
    struct CGRect _field1;
    double _field2;
    struct CRLWPFontHeightInfo _field3;
    double _field4;
    struct CGRect _field5;
    double _field6;
    struct CRLWPFontHeightInfo _field7;
    struct CGAffineTransform _field8;
} CDStruct_9f83f5df;

typedef struct {
    struct CGRect cachedRect;
    struct CGRect originalCachedRect;
    unsigned int isValid;
} CDStruct_5bfcb38a;

// Template types
typedef struct shared_ptr<CRLWPParagraphTypesetter> {
    struct CRLWPParagraphTypesetter *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_c735e908;

typedef struct vector<CRLBezierHitTesterHitInfo, std::allocator<CRLBezierHitTesterHitInfo>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<CRLBezierHitTesterHitInfo *, std::allocator<CRLBezierHitTesterHitInfo>> {
        CDStruct_183601bc *_field1;
    } _field3;
} vector_b7401b0f;

typedef struct vector<CRLPKInputPoint, std::allocator<CRLPKInputPoint>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<CRLPKInputPoint *, std::allocator<CRLPKInputPoint>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
} vector_7ea34920;

typedef struct vector<_CRLWPCharIndexAndAffinity, std::allocator<_CRLWPCharIndexAndAffinity>> {
    struct _CRLWPCharIndexAndAffinity *__begin_;
    struct _CRLWPCharIndexAndAffinity *__end_;
    struct __compressed_pair<_CRLWPCharIndexAndAffinity *, std::allocator<_CRLWPCharIndexAndAffinity>> {
        struct _CRLWPCharIndexAndAffinity *__value_;
    } __end_cap_;
} vector_43d7697b;

typedef struct vector<double, std::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::allocator<double>> {
        double *__value_;
    } __end_cap_;
} vector_0e047154;

