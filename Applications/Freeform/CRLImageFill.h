//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CRLColor, CRLImageFillCachedImage, MISSING_TYPE, NSObject, _TtC8Freeform8CRLAsset;
@protocol OS_dispatch_queue;

@interface CRLImageFill
{
    _TtC8Freeform8CRLAsset *mImageData;	// 8 = 0x8
    MISSING_TYPE *mTechnique;	// 16 = 0x10
    CRLColor *mTintColor;	// 24 = 0x18
    CRLImageFillCachedImage *mStandardSizeTintedImage;	// 32 = 0x20
    CRLImageFillCachedImage *mHalfSizeTintedImage;	// 40 = 0x28
    CRLImageFillCachedImage *mQuarterSizeTintedImage;	// 48 = 0x30
    CRLColor *mReferenceColor;	// 56 = 0x38
    CRLColor *mCachedReferenceColor;	// 64 = 0x40
    _Bool mShouldSkipFurtherAttemptsToCalculateReferenceColor;	// 72 = 0x48
    struct CGSize mFillSize;	// 80 = 0x50
    _Bool mHasIndicatedInterestInProvider;	// 96 = 0x60
    NSObject<OS_dispatch_queue> *mTempRenderLock;	// 104 = 0x68
    struct CGImage *mTempRenderCopy;	// 112 = 0x70
    struct CGImage *mSourceOfTempRenderCopy;	// 120 = 0x78
    long long mTempRenderCount;	// 128 = 0x80
}

- (void).cxx_destruct;	// IMP=0x00200000000d6a85
@property(readonly, copy, nonatomic) CRLColor *tintColor; // @synthesize tintColor=mTintColor;
@property(nonatomic) unsigned long long technique; // @synthesize technique=mTechnique;
@property(readonly, retain, nonatomic) _TtC8Freeform8CRLAsset *imageData; // @synthesize imageData=mImageData;
- (void)p_drawPDFWithProvider:(id)arg1 inContext:(struct CGContext *)arg2 bounds:(struct CGRect)arg3;	// IMP=0x00100000000d6630
- (void)p_drawBitmapImage:(struct CGImage *)arg1 withOrientation:(long long)arg2 inContext:(struct CGContext *)arg3 bounds:(struct CGRect)arg4;	// IMP=0x00100000000d6152
- (struct CGRect)p_drawnRectForImageSize:(struct CGSize)arg1 destRect:(struct CGRect)arg2 inContext:(struct CGContext *)arg3;	// IMP=0x00100000000d5f94
- (id)p_validatedImageProvider;	// IMP=0x00100000000d5e95
- (id)p_quarterSizeCachedImage;	// IMP=0x00100000000d5e44
- (id)p_halfSizeCachedImage;	// IMP=0x00100000000d5df3
- (id)p_standardSizeCachedImage;	// IMP=0x00100000000d5da2
- (id)p_tintedImageWithScale:(double)arg1;	// IMP=0x00100000000d54ea
- (void)paintPath:(struct CGPath *)arg1 naturalBounds:(struct CGRect)arg2 inContext:(struct CGContext *)arg3 isPDF:(_Bool)arg4;	// IMP=0x00100000000d52d8
- (void)drawFillInContext:(struct CGContext *)arg1 rect:(struct CGRect)arg2 clippingToPath:(struct CGPath *)arg3;	// IMP=0x00100000000d4ea1
- (void)paintPath:(struct CGPath *)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00100000000d4e66
- (void)p_paintPath:(struct CGPath *)arg1 inContext:(struct CGContext *)arg2 rectForFill:(struct CGRect)arg3;	// IMP=0x00100000000d431a
- (struct CGSize)p_sizeOfFillImageForDestRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00100000000d4298
- (void)drawSwatchInRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00100000000d4074
- (struct CGSize)renderedImageSizeForObjectSize:(struct CGSize)arg1;	// IMP=0x00100000000d3fa2
- (void)applyToRenderable:(id)arg1 withScale:(double)arg2;	// IMP=0x00100000000d3162
- (id)p_cachedImageForSize:(struct CGSize)arg1 inContext:(struct CGContext *)arg2 orContentsScaleProvider:(id)arg3;	// IMP=0x00100000000d2dc9
- (_Bool)shouldBeReappliedToRenderable:(id)arg1;	// IMP=0x00100000000d2c92
- (_Bool)p_shouldApplyTintedImage;	// IMP=0x00100000000d2c2d
- (long long)fillType;	// IMP=0x00100000000d2c22
- (_Bool)canApplyToRenderableByAddingSubrenderables;	// IMP=0x00100000000d2b70
- (_Bool)canApplyToRenderable;	// IMP=0x00100000000d2abb
- (_Bool)drawsInOneStep;	// IMP=0x00100000000d2a42
- (_Bool)isEqual:(id)arg1;	// IMP=0x00100000000d283c
- (unsigned long long)hash;	// IMP=0x00100000000d281f
- (void)p_updateCachedReferenceColorIfNeeded;	// IMP=0x00100000000d278d
- (void)i_updateStoredReferenceColorIfNeeded;	// IMP=0x00100000000d2749
- (id)p_calculateReferenceColor;	// IMP=0x00100000000d1edc
@property(readonly, nonatomic) CRLColor *storedReferenceColor;
- (id)referenceColorForFontArchiving;	// IMP=0x00100000000d1eb5
- (id)referenceColor;	// IMP=0x00100000000d1e63
- (void)i_setStoredReferenceColor:(id)arg1;	// IMP=0x00100000000d1e2f
- (_Bool)isOpaque;	// IMP=0x00100000000d1d3f
@property(readonly, nonatomic) struct CGSize fillSize; // @synthesize fillSize=mFillSize;
@property(readonly, nonatomic) double scale;
- (struct CGSize)p_imageDataNaturalSize;	// IMP=0x00100000000d1bc0
@property(readonly, nonatomic) _Bool canCopyData;
- (id)copyWithNewImageData:(id)arg1;	// IMP=0x00100000000d1a27
@property(nonatomic, setter=p_setFillSize:) struct CGSize p_fillSize;
@property(retain, nonatomic, setter=p_setTintColor:) CRLColor *p_tintColor;
@property(nonatomic, setter=p_setTechnique:) unsigned long long p_technique;
@property(retain, nonatomic, setter=p_setImageData:) _TtC8Freeform8CRLAsset *p_imageData;
- (void)flushImageCache;	// IMP=0x00100000000d17a1
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00100000000d1796
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;	// IMP=0x00100000000d1708
- (void)p_clearTintedImageCache;	// IMP=0x00100000000d16ae
- (void)dealloc;	// IMP=0x00100000000d1609
- (void)i_commonInit;	// IMP=0x00100000000d15db
- (void)i_commonSetup;	// IMP=0x00100000000d1300
- (id)initForUnarchiving;	// IMP=0x00100000000d12d1
- (id)initWithImageData:(id)arg1 technique:(unsigned long long)arg2 tintColor:(id)arg3 size:(struct CGSize)arg4;	// IMP=0x00100000000d12b9
- (id)initWithImageData:(id)arg1 technique:(unsigned long long)arg2 tintColor:(id)arg3 size:(struct CGSize)arg4 referenceColor:(id)arg5;	// IMP=0x00100000000d0f94

@end

