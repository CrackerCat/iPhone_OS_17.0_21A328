//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CRLOnce, NSMutableDictionary, NSObject;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface CRLBitmapImageProvider
{
    struct CGImageSource *mImageSource;	// 8 = 0x8
    struct CGImage *mImage;	// 16 = 0x10
    struct CGImage *mLargestSafeImage;	// 24 = 0x18
    NSMutableDictionary *mResampledImages;	// 32 = 0x20
    unsigned long long mImageGamut;	// 40 = 0x28
    struct CGSize mNaturalSize;	// 48 = 0x30
    long long mOrientation;	// 64 = 0x40
    _Bool mIsOpaque;	// 72 = 0x48
    _Bool mIsValid;	// 73 = 0x49
    unsigned long long mValidationStatus;	// 80 = 0x50
    unsigned long long mDPI;	// 88 = 0x58
    NSObject<OS_dispatch_queue> *mImageQueue;	// 96 = 0x60
    CRLOnce *mCheckIfValidOnce;	// 104 = 0x68
    NSObject<OS_dispatch_semaphore> *mFlushableContentLock;	// 112 = 0x70
    _Bool mHasFlushableContent;	// 120 = 0x78
    unsigned long long mEstimatedSize;	// 128 = 0x80
}

+ (void)drawImage:(struct CGImage *)arg1 inContext:(struct CGContext *)arg2 rect:(struct CGRect)arg3 orientation:(long long)arg4;	// IMP=0x0040000000045c7d
+ (struct CGSize)naturalSizeForImageData:(id)arg1;	// IMP=0x0010000000044ec3
+ (id)CRLImageForImageData:(id)arg1;	// IMP=0x0010000000044e81
+ (struct CGImage *)CGImageForImageData:(id)arg1;	// IMP=0x0010000000044db8
- (void).cxx_destruct;	// IMP=0x002000000004a3c9
@property(readonly, nonatomic) unsigned long long validationStatus; // @synthesize validationStatus=mValidationStatus;
@property(readonly, nonatomic) struct CGImageSource *CGImageSource;
- (struct CGImageSource *)p_newImageOfSize:(struct CGSize)arg1;	// IMP=0x001000000004a194
- (struct CGImage *)p_newImageOfSize:(struct CGSize)arg1 fromSource:(struct CGImageSource *)arg2;	// IMP=0x0010000000049ec3
- (struct CGImageSource *)p_newCGImageSourceForTemporaryUse;	// IMP=0x0010000000049db9
- (void)p_configureOrientationAndSizeFromImageSource:(struct CGImageSource *)arg1 andImage:(struct CGImage *)arg2;	// IMP=0x00100000000499d1
- (struct CGImage *)p_newImageFromSource:(struct CGImageSource *)arg1;	// IMP=0x0010000000049915
- (struct CGImageSource *)p_newCGImageSource;	// IMP=0x00100000000498d1
- (void)p_loadSourceRefIfNecessary;	// IMP=0x0010000000049713
- (void)p_loadLargestSafeImageIfNecessary;	// IMP=0x0010000000049110
- (void)p_loadFullSizedImageIfNecessary;	// IMP=0x0010000000048c70
- (void)p_loadImageMetadata;	// IMP=0x0010000000048c5e
- (void)p_updateEstimatedSize;	// IMP=0x0010000000048a73
- (unsigned long long)i_flushableMemoryEstimate;	// IMP=0x0010000000048a62
- (_Bool)i_hasFlushableContent;	// IMP=0x0010000000048a1c
- (void)flush;	// IMP=0x00100000000487f0
- (_Bool)p_shouldScaleRetinaImages;	// IMP=0x00100000000487e8
- (struct CGSize)dpiAdjustedNaturalSize;	// IMP=0x00100000000485d2
@property(readonly, nonatomic) struct CGSize dpiAdjustedFillSize;
@property(readonly, nonatomic) unsigned long long imageDPI;
- (unsigned long long)imageGamut;	// IMP=0x00100000000482b6
@property(readonly, nonatomic) _Bool isOpaque;
@property(readonly, nonatomic) long long orientation;
- (struct CGImage *)p_resampledImageOfReciprocalScale:(unsigned long long)arg1;	// IMP=0x0010000000047c17
- (struct CGImage *)p_createResampledImageWithReciprocalScale:(unsigned long long)arg1;	// IMP=0x0010000000047a59
- (struct CGImage *)CGImageResampledToSize:(struct CGSize)arg1 lowQuality:(_Bool)arg2 assetOwner:(id)arg3;	// IMP=0x0010000000047889
- (long long)p_reciprocalScaleForImageSize:(struct CGSize)arg1;	// IMP=0x0010000000047571
- (struct CGImage *)CGImageForSize:(struct CGSize)arg1 inContext:(struct CGContext *)arg2 orContentsScaleProvider:(id)arg3;	// IMP=0x0010000000046a40
- (struct CGImage *)CGImageForNaturalSize;	// IMP=0x0010000000046779
@property(readonly, nonatomic) struct CGImage *CGImageOfLargestSafeSize;
@property(readonly, nonatomic) struct CGImage *CGImageOfAnySize;
- (struct CGImage *)cachedCGImageOfAnySizeOrNULLPreferringSize:(struct CGSize)arg1;	// IMP=0x0010000000045d93
- (void)drawImageInContext:(struct CGContext *)arg1 rect:(struct CGRect)arg2;	// IMP=0x0010000000045a1f
- (_Bool)isValid;	// IMP=0x0010000000045365
- (struct CGSize)naturalSize;	// IMP=0x001000000004527d
- (void)dealloc;	// IMP=0x0010000000045217
- (void)i_commonInit;	// IMP=0x0010000000044fc1

@end

