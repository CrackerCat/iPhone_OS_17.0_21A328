//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CRLCanvasAutoscroll, CRLEditorController, CRLFidgetResolver, CRLInteractiveCanvasController, CRLWPEditorHelper, CRLWPRep, CRLWPSelection, CRLWPTextKnobTracker, MISSING_TYPE, NSArray, NSDate, NSDictionary, NSMutableDictionary, NSSet, NSString, UIInputViewController, _TtC8Freeform11CRLWPLayout, _TtC8Freeform12CRLWPStorage, _TtC8Freeform14CRLWPShapeItem, _TtC8Freeform19CRLWPCharacterStyle, _TtC8Freeform21CRLEditingCoordinator, _TtC8Freeform25CRLWPTextSelectionManager;
@protocol CRLCanvasLayoutManipulatingTracker, CRLSearchReference, CRLWPTextMagnifier, CRLWPTextSource, _TtP8Freeform16CRLTextSelecting_, _TtP8Freeform20CRLKeyInputReceiving_, _TtP8Freeform21CRLTextInputReceiving_;

@interface _TtC8Freeform11CRLWPEditor : NSObject
{
    MISSING_TYPE *insertionStyle;	// 8 = 0x8
    MISSING_TYPE *markedTextHelper;	// 16 = 0x10
    MISSING_TYPE *dictationAndAutocorrectionCoordinator;	// 24 = 0x18
    MISSING_TYPE *autocorrectionKeys;	// 32 = 0x20
    MISSING_TYPE *disableSmartQuotes;	// 40 = 0x28
    MISSING_TYPE *enclosingShape;	// 48 = 0x30
    MISSING_TYPE *icc;	// 56 = 0x38
    MISSING_TYPE *editingCoordinator;	// 64 = 0x40
    MISSING_TYPE *wantsVisibleKeyboard;	// 72 = 0x48
    MISSING_TYPE *endTextInputWhenKeyboardHides;	// 73 = 0x49
    MISSING_TYPE *_textSelectionDelegate;	// 80 = 0x50
    MISSING_TYPE *editorController;	// 88 = 0x58
    MISSING_TYPE *$__lazy_storage_$_textEditingInputAccessoryStateManager;	// 96 = 0x60
    MISSING_TYPE *selectionBeingSetFromGestures;	// 104 = 0x68
    MISSING_TYPE *editorHelper;	// 112 = 0x70
    MISSING_TYPE *lastCursor;	// 120 = 0x78
    MISSING_TYPE *$__lazy_storage_$_editMenu;	// 128 = 0x80
    MISSING_TYPE *baseWritingDirectionForInsertion;	// 136 = 0x88
    MISSING_TYPE *autoscroll;	// 152 = 0x98
    MISSING_TYPE *lastKeyDownTime;	// 160 = 0xa0
    MISSING_TYPE *isUserTypingAhead;	// 168 = 0xa8
    MISSING_TYPE *suppressBreaks;	// 169 = 0xa9
    MISSING_TYPE *suppressTabs;	// 170 = 0xaa
    MISSING_TYPE *editableTextSelectionForceGestureInProgress;	// 171 = 0xab
    MISSING_TYPE *initialPressTextSelectionGranularity;	// 172 = 0xac
    MISSING_TYPE *selectionSetFromSingleTap;	// 173 = 0xad
    MISSING_TYPE *listDragAnimator;	// 176 = 0xb0
    MISSING_TYPE *isBecomingActive;	// 184 = 0xb8
    MISSING_TYPE *collabIsSuspendedByThisEditor;	// 185 = 0xb9
    MISSING_TYPE *shouldPreventQuickSelect;	// 186 = 0xba
    MISSING_TYPE *gestureBeganWhenEditingBegan;	// 187 = 0xbb
    MISSING_TYPE *readyToEnd;	// 188 = 0xbc
    MISSING_TYPE *shouldQueueBeginScribbleMode;	// 189 = 0xbd
    MISSING_TYPE *suppressEditMenuForIndirectGesture;	// 190 = 0xbe
    MISSING_TYPE *mostRecentGestureKind;	// 192 = 0xc0
    MISSING_TYPE *fidgetResolver;	// 200 = 0xc8
    MISSING_TYPE *shouldShowEditMenuForInsertionPoint;	// 208 = 0xd0
    MISSING_TYPE *coalescingText;	// 209 = 0xd1
    MISSING_TYPE *dictationInterpretations;	// 216 = 0xd8
    MISSING_TYPE *ignoreFutureImmediatePresses;	// 224 = 0xe0
    MISSING_TYPE *tapInfo;	// 232 = 0xe8
    MISSING_TYPE *shouldUseModernTextGestures;	// 240 = 0xf0
    MISSING_TYPE *magnifier;	// 248 = 0xf8
    MISSING_TYPE *knobTrackingDragPoint;	// 256 = 0x100
    MISSING_TYPE *firstTapUnscaledPoint;	// 272 = 0x110
    MISSING_TYPE *knobTracking;	// 288 = 0x120
    MISSING_TYPE *knobTracker;	// 296 = 0x128
    MISSING_TYPE *knobTag;	// 304 = 0x130
    MISSING_TYPE *knobTrackingTapCount;	// 312 = 0x138
    MISSING_TYPE *wantsParagraphMode;	// 320 = 0x140
    MISSING_TYPE *originalSelectionRange;	// 328 = 0x148
    MISSING_TYPE *knobToTouchOffset;	// 344 = 0x158
    MISSING_TYPE *twoFingerPanGestureInProgress;	// 360 = 0x168
    MISSING_TYPE *canIgnoreEvent;	// 361 = 0x169
    MISSING_TYPE *isSelectingCaret;	// 362 = 0x16a
    MISSING_TYPE *selectedRangeAtPinchAndHalfStart;	// 368 = 0x170
    MISSING_TYPE *expectedWordSelectionAtPoint;	// 384 = 0x180
    MISSING_TYPE *gestureIsSuppressingKnobs;	// 400 = 0x190
    MISSING_TYPE *pinchAndHalfDidStart;	// 401 = 0x191
    MISSING_TYPE *lastSingleImmediateTapTime;	// 0 = 0x0
    MISSING_TYPE *adjustedDragPoint;	// 1651466079 = 0x626f5f5f
    MISSING_TYPE *adjustedDragToNaturalPointOffset;	// 1701997669 = 0x65726c65
    MISSING_TYPE *textFieldBounds;	// 1094999903 = 0x41445f5f
    MISSING_TYPE *selectionRangeDidChange;	// 0 = 0x0
    MISSING_TYPE *selectionTargetToAdjustedDragOffset;	// 21895856 = 0x14e1ab0
    MISSING_TYPE *currentTargetPinRect;	// 112168 = 0x1b628
    MISSING_TYPE *currentStationaryPinRect;	// 21895856 = 0x14e1ab0
    MISSING_TYPE *currentKnobPoint;	// 0 = 0x0
    MISSING_TYPE *preventSelectionChanges;	// 268435461 = 0x10000005
    MISSING_TYPE *disallowEditingOfTextString;	// 0 = 0x0
    MISSING_TYPE *isDragAndDropBeginning;	// 1651466079 = 0x626f5f5f
    MISSING_TYPE *dragRep;	// 1869901682 = 0x6f746f72
}

+ (_Bool)canEditTextIn:(id)arg1 using:(id)arg2;	// IMP=0x004000000087f7a0
- (void).cxx_destruct;	// IMP=0x002000000088de10
- (id)init;	// IMP=0x001000000088ddc0
@property(nonatomic, retain) CRLWPRep *dragRep; // @synthesize dragRep;
@property(nonatomic) _Bool isDragAndDropBeginning; // @synthesize isDragAndDropBeginning;
@property(nonatomic) _Bool disallowEditingOfTextString; // @synthesize disallowEditingOfTextString;
- (struct CGPoint)getCenterOfWord:(id)arg1;	// IMP=0x001000000088dca0
- (struct CGPoint)clampUnscaledPointToTextFieldBounds:(struct CGPoint)arg1;	// IMP=0x001000000088daa0
@property(nonatomic) _Bool preventSelectionChanges; // @synthesize preventSelectionChanges;
@property(nonatomic, readonly) CRLWPRep *editingRep;
@property(nonatomic) struct CGPoint currentKnobPoint; // @synthesize currentKnobPoint;
@property(nonatomic) struct CGRect currentStationaryPinRect; // @synthesize currentStationaryPinRect;
@property(nonatomic) struct CGRect currentTargetPinRect; // @synthesize currentTargetPinRect;
@property(nonatomic) struct CGPoint selectionTargetToAdjustedDragOffset; // @synthesize selectionTargetToAdjustedDragOffset;
@property(nonatomic) _Bool selectionRangeDidChange; // @synthesize selectionRangeDidChange;
@property(nonatomic) struct CGRect textFieldBounds; // @synthesize textFieldBounds;
@property(nonatomic) struct CGPoint adjustedDragToNaturalPointOffset; // @synthesize adjustedDragToNaturalPointOffset;
@property(nonatomic) struct CGPoint adjustedDragPoint; // @synthesize adjustedDragPoint;
@property(nonatomic, copy) NSDate *lastSingleImmediateTapTime;
@property(nonatomic) _Bool pinchAndHalfDidStart; // @synthesize pinchAndHalfDidStart;
@property(nonatomic) _Bool gestureIsSuppressingKnobs; // @synthesize gestureIsSuppressingKnobs;
@property(nonatomic) struct _NSRange expectedWordSelectionAtPoint; // @synthesize expectedWordSelectionAtPoint;
@property(nonatomic) struct _NSRange selectedRangeAtPinchAndHalfStart; // @synthesize selectedRangeAtPinchAndHalfStart;
@property(nonatomic) _Bool isSelectingCaret; // @synthesize isSelectingCaret;
@property(nonatomic) _Bool canIgnoreEvent; // @synthesize canIgnoreEvent;
@property(nonatomic) _Bool twoFingerPanGestureInProgress; // @synthesize twoFingerPanGestureInProgress;
@property(nonatomic, readonly) NSSet *editingReps;
- (_Bool)wantsParagraphModeWithSelection:(id)arg1;	// IMP=0x001000000088d130
@property(nonatomic) struct CGPoint knobToTouchOffset; // @synthesize knobToTouchOffset;
@property(nonatomic) struct _NSRange originalSelectionRange; // @synthesize originalSelectionRange;
@property(nonatomic, readonly) _Bool editMenuIsVisible;
@property(nonatomic) _Bool wantsParagraphMode; // @synthesize wantsParagraphMode;
@property(nonatomic) long long knobTrackingTapCount; // @synthesize knobTrackingTapCount;
@property(nonatomic) unsigned long long knobTag; // @synthesize knobTag;
@property(nonatomic, retain) CRLWPTextKnobTracker *knobTracker; // @synthesize knobTracker;
@property(nonatomic) _Bool knobTracking; // @synthesize knobTracking;
@property(nonatomic) struct CGPoint firstTapUnscaledPoint; // @synthesize firstTapUnscaledPoint;
@property(nonatomic) struct CGPoint knobTrackingDragPoint; // @synthesize knobTrackingDragPoint;
@property(nonatomic, retain) id <CRLWPTextMagnifier> magnifier; // @synthesize magnifier;
@property(nonatomic) _Bool shouldUseModernTextGestures; // @synthesize shouldUseModernTextGestures;
@property(nonatomic, retain) NSDictionary *tapInfo; // @synthesize tapInfo;
- (_Bool)isSelectionPlaceHolderTextWithSelection:(id)arg1;	// IMP=0x001000000088cd90
@property(nonatomic) _Bool ignoreFutureImmediatePresses; // @synthesize ignoreFutureImmediatePresses;
@property(nonatomic, retain) NSMutableDictionary *dictationInterpretations; // @synthesize dictationInterpretations;
@property(nonatomic) _Bool coalescingText; // @synthesize coalescingText;
@property(nonatomic) _Bool shouldShowEditMenuForInsertionPoint; // @synthesize shouldShowEditMenuForInsertionPoint;
@property(nonatomic, retain) CRLFidgetResolver *fidgetResolver; // @synthesize fidgetResolver;
@property(nonatomic, retain) NSString *mostRecentGestureKind; // @synthesize mostRecentGestureKind;
@property(nonatomic) _Bool suppressEditMenuForIndirectGesture; // @synthesize suppressEditMenuForIndirectGesture;
@property(nonatomic) _Bool shouldQueueBeginScribbleMode; // @synthesize shouldQueueBeginScribbleMode;
@property(nonatomic) _Bool readyToEnd; // @synthesize readyToEnd;
@property(nonatomic) _Bool gestureBeganWhenEditingBegan; // @synthesize gestureBeganWhenEditingBegan;
@property(nonatomic) _Bool shouldPreventQuickSelect; // @synthesize shouldPreventQuickSelect;
- (void)didBecomeTextInputEditor;	// IMP=0x001000000088caf0
- (void)didResignTextInputEditor;	// IMP=0x001000000088c860
- (void)willResignTextInputEditor;	// IMP=0x001000000088c410
@property(nonatomic) _Bool isBecomingActive; // @synthesize isBecomingActive;
@property(nonatomic, retain) NSObject *listDragAnimator; // @synthesize listDragAnimator;
@property(nonatomic) _Bool selectionSetFromSingleTap; // @synthesize selectionSetFromSingleTap;
@property(nonatomic) _Bool initialPressTextSelectionGranularity; // @synthesize initialPressTextSelectionGranularity;
@property(nonatomic) _Bool editableTextSelectionForceGestureInProgress; // @synthesize editableTextSelectionForceGestureInProgress;
@property(nonatomic) _Bool suppressTabs; // @synthesize suppressTabs;
@property(nonatomic) _Bool suppressBreaks; // @synthesize suppressBreaks;
- (_Bool)wantsCaret;	// IMP=0x001000000088bfd0
- (_Bool)shouldShowSelectionAndCaret;	// IMP=0x001000000088bfc0
@property(nonatomic) _Bool isUserTypingAhead; // @synthesize isUserTypingAhead;
@property(nonatomic) double lastKeyDownTime; // @synthesize lastKeyDownTime;
@property(nonatomic, retain) CRLCanvasAutoscroll *autoscroll; // @synthesize autoscroll;
- (void);	// IMP=0x001000000088bea0
- (long long)baseWritingDirectionFor:(id)arg1;	// IMP=0x001000000088b3b0
- (_Bool)canSetWritingDirection:(long long)arg1;	// IMP=0x001000000088afc0
- (void)toggleListEntry:(id)arg1;	// IMP=0x001000000088ac20
- (void)removeHyperlink:(id)arg1;	// IMP=0x001000000088aa00
- (id)autocorrectionRangesToDisplayInRange:(struct _NSRange)arg1;	// IMP=0x001000000088a7e0
- (id)dictationAndAutocorrectionsFor:(long long)arg1 effectiveRange:(struct _NSRange *)arg2;	// IMP=0x0010000000889eb0
- (void)acceptAutoCorrectionBefore:(id)arg1;	// IMP=0x0010000000889ea0
- (void)hideEditMenu;	// IMP=0x0010000000889e70
- (struct CGRect)targetRectForEditMenu;	// IMP=0x0010000000889cf0
- (void)showEditMenu;	// IMP=0x0010000000889bc0
- (void)alignJustify:(id)arg1;	// IMP=0x00100000008894c0
- (void)alignMiddle:(id)arg1;	// IMP=0x00100000008894a0
- (void)alignBottom:(id)arg1;	// IMP=0x0010000000889480
- (void)alignTop:(id)arg1;	// IMP=0x0010000000889460
- (void)alignJustified:(id)arg1;	// IMP=0x0010000000889250
- (void)alignCenter:(id)arg1;	// IMP=0x0010000000889040
- (void)alignRight:(id)arg1;	// IMP=0x0010000000889010
- (void)alignLeft:(id)arg1;	// IMP=0x0010000000888fe0
- (void)toggleStrikethrough:(id)arg1;	// IMP=0x0010000000888fb0
- (void)toggleUnderline:(id)arg1;	// IMP=0x0010000000888f90
- (void)toggleItalics:(id)arg1;	// IMP=0x0010000000888f70
- (void)toggleBoldface:(id)arg1;	// IMP=0x0010000000888f50
- (void)decreaseFontSizeByOne:(id)arg1;	// IMP=0x0010000000888a80
- (void)increaseFontSizeByOne:(id)arg1;	// IMP=0x0010000000888a60
- (_Bool)wantsToInterceptDeleteEvents;	// IMP=0x00100000008883f0
- (void)deleteForward:(id)arg1;	// IMP=0x00100000008883d0
- (void)deleteBackward:(id)arg1;	// IMP=0x00100000008881a0
- (void)pasteStyle:(id)arg1;	// IMP=0x0010000000887980
- (void)copyStyle:(id)arg1;	// IMP=0x0010000000887520
- (void)translate:(id)arg1;	// IMP=0x00100000008871a0
- (void)lookUpTextAtRange:(struct _NSRange)arg1;	// IMP=0x0010000000886870
- (void)lookUp:(id)arg1;	// IMP=0x0010000000885d70
- (void)replaceAction:(id)arg1;	// IMP=0x0010000000885d50
- (void)toggleBaseWritingDirection:(id)arg1;	// IMP=0x0010000000885b70
- (void)selectAllMenuAction:(id)arg1;	// IMP=0x0010000000885ad0
- (void)selectAll;	// IMP=0x0010000000885920
- (void)selectMenuAction:(id)arg1;	// IMP=0x0010000000885710
- (void)addContextualMenuElementsToArray:(id)arg1 atPoint:(struct CGPoint)arg2;	// IMP=0x0010000000884af0
- (id)cursorAtPoint:(struct CGPoint)arg1 withCursorPlatformObject:(id)arg2;	// IMP=0x0010000000884a70
- (void)moveLeftAndModifySelection:(id)arg1;	// IMP=0x00100000008845f0
- (void)moveRightAndModifySelection:(id)arg1;	// IMP=0x00100000008845b0
- (void)moveUpAndModifySelection:(id)arg1;	// IMP=0x0010000000884570
- (void)moveDownAndModifySelection:(id)arg1;	// IMP=0x0010000000884440
@property(nonatomic, retain) CRLWPEditorHelper *editorHelper; // @synthesize editorHelper;
@property(nonatomic, readonly) _Bool canMutateTextStorage;
- (void)makeTextWritingDirectionNatural:(id)arg1;	// IMP=0x00100000008840b0
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;	// IMP=0x0010000000884090
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;	// IMP=0x0010000000884070
- (void)makeBaseWritingDirectionNatural:(id)arg1;	// IMP=0x0010000000884050
- (void)makeBaseWritingDirectionRightToLeft:(id)arg1;	// IMP=0x0010000000883fa0
- (void)makeBaseWritingDirectionLeftToRight:(id)arg1;	// IMP=0x0010000000883f80
- (long long)canPerformEditorAction:(SEL)arg1 withSender:(id)arg2;	// IMP=0x0010000000883d90
- (void)cutTo:(id)arg1 nativeOnly:(_Bool)arg2 sender:(id)arg3;	// IMP=0x0010000000882f90
- (void)cut:(id)arg1;	// IMP=0x0010000000882ba0
- (void)pasteWithItemSource:(id)arg1 selection:(id)arg2 sender:(id)arg3 selectRange:(long long)arg4 dragBlock:(CDUnknownBlockType)arg5;	// IMP=0x0010000000881b90
- (void)pasteFromItemSource:(id)arg1 forceMatchStyle:(_Bool)arg2;	// IMP=0x0010000000881b40
- (void)pasteAsPlainText:(id)arg1;	// IMP=0x00100000008819d0
- (void)paste:(id)arg1;	// IMP=0x0010000000881810
- (_Bool)canPasteWithItemSource:(id)arg1 selection:(id)arg2 sender:(id)arg3;	// IMP=0x0010000000881720
- (void)copy:(id)arg1;	// IMP=0x0010000000881490
- (void)willResignCurrentEditor;	// IMP=0x0010000000881460
- (void)didBecomeCurrentEditorForEditorController:(id)arg1;	// IMP=0x0010000000881290
@property(nonatomic) _Bool selectionBeingSetFromGestures; // @synthesize selectionBeingSetFromGestures;
- (void)selectionDidChangeFromSelection:(id)arg1 toSelection:(id)arg2 withFlags:(unsigned long long)arg3;	// IMP=0x00100000008811e0
- (id)selectionWillChangeFromSelection:(id)arg1 toSelection:(id)arg2 withFlags:(unsigned long long)arg3 inSelectionPath:(id)arg4 withNewEditors:(id)arg5;	// IMP=0x0010000000880720
- (id)nextEditorForSelection:(id)arg1 withNewEditorStack:(id)arg2 selectionPath:(id)arg3;	// IMP=0x0010000000880600
- (_Bool)shouldRemainOnEditorStackForSelection:(id)arg1 inSelectionPath:(id)arg2 withNewEditors:(id)arg3;	// IMP=0x0010000000880580
- (_Bool)shouldSuppressMiniFormatter;	// IMP=0x0010000000880570
@property(nonatomic, readonly) NSArray *trailingBarButtonGroups;
@property(nonatomic, readonly) NSArray *leadingBarButtonGroups;
@property(nonatomic, readonly) UIInputViewController *inputAccessoryViewController;
@property(nonatomic, retain) CRLEditorController *editorController; // @synthesize editorController;
@property(nonatomic, readonly) id <_TtP8Freeform21CRLTextInputReceiving_> textInputReceiver;
@property(nonatomic, readonly) _TtC8Freeform25CRLWPTextSelectionManager *textSelectionManager;
@property(nonatomic, readonly) id <_TtP8Freeform16CRLTextSelecting_> textSelectionDelegate;
@property(nonatomic) _Bool endTextInputWhenKeyboardHides; // @synthesize endTextInputWhenKeyboardHides;
@property(nonatomic) _Bool wantsVisibleKeyboard; // @synthesize wantsVisibleKeyboard;
- (_Bool)wantsToReceiveTextInput;	// IMP=0x0010000000880040
- (_Bool)shouldBeginTextInputWith:(id)arg1;	// IMP=0x0010000000880030
- (_Bool)shouldBecomeTextInputEditor;	// IMP=0x0010000000880020
- (void)endEditing;	// IMP=0x001000000087ffd0
- (void)selectParent:(id)arg1;	// IMP=0x001000000087ff50
- (void)endEditingAndSelectParent:(id)arg1;	// IMP=0x001000000087ff30
@property(nonatomic, readonly) id <CRLSearchReference> editingSearchReference;
@property(nonatomic, retain) CRLWPSelection *selection;
- (void)documentEditabilityDidChange;	// IMP=0x001000000087f770
- (id)initWithEditingCoordinator:(id)arg1 enclosingShape:(id)arg2 icc:(id)arg3;	// IMP=0x001000000087f690
@property(nonatomic, readonly) _TtC8Freeform21CRLEditingCoordinator *editingCoordinator; // @synthesize editingCoordinator;
- (_Bool)wantsDoneButtonWhenEditing;	// IMP=0x001000000087e6c0
@property(nonatomic, readonly) CRLInteractiveCanvasController *interactiveCanvasController;
@property(nonatomic) __weak CRLInteractiveCanvasController *icc; // @synthesize icc;
@property(nonatomic, readonly) _TtC8Freeform11CRLWPLayout *layout;
@property(nonatomic, readonly) id <CRLWPTextSource> textSource;
@property(nonatomic, readonly) _TtC8Freeform12CRLWPStorage *storage;
@property(nonatomic, retain) _TtC8Freeform14CRLWPShapeItem *enclosingShape; // @synthesize enclosingShape;
@property(nonatomic, readonly) id <_TtP8Freeform20CRLKeyInputReceiving_> keyInputReceiver;
@property(nonatomic, retain) _TtC8Freeform19CRLWPCharacterStyle *insertionStyle; // @synthesize insertionStyle;
- (void)p_protectedStopKnobTrackingGesture:(id)arg1;	// IMP=0x00100000005b85f4
- (void)protectedStopMagnification;	// IMP=0x00100000005b84ec
- (void)p_beginMagnification:(id)arg1 forRep:(id)arg2 atPoint:(struct CGPoint)arg3 shouldSetSelection:(_Bool)arg4;	// IMP=0x00100000005b8448
- (void)revertLastSelectionChangeIfElapsedTimeIsUnderPinFidgetThreshold;	// IMP=0x00100000005b8442
- (struct CGPoint)clampedBoundsPinRectToTextFieldBounds:(struct CGRect)arg1;	// IMP=0x00100000005b81f1
- (_Bool)xPositionWillPinSelection:(struct CGPoint)arg1 isHead:(_Bool)arg2;	// IMP=0x00100000005b8147
- (_Bool)yPositionWillPinSelection:(struct CGPoint)arg1 isHead:(_Bool)arg2;	// IMP=0x00100000005b80ca
- (void)p_handleKnobDragGestureRecognizer:(id)arg1;	// IMP=0x00100000005b7cf3
- (void)p_handleTapWhileMarkedTextGestureRecognizer:(id)arg1;	// IMP=0x00100000005b7c89
- (void)p_endAutoscroll;	// IMP=0x00100000005b7c2f
- (void)p_beginOperationAndTakeControl;	// IMP=0x00100000005b763b
- (void)operationDidEnd;	// IMP=0x00100000005b7635
- (_Bool)readyToEndOperation;	// IMP=0x00100000005b7623
@property(readonly, nonatomic) NSObject<CRLCanvasLayoutManipulatingTracker> *tracker;
- (_Bool)allowTrackerManipulatorToTakeControl:(id)arg1;	// IMP=0x00100000005b75ff
- (void)gestureSequenceDidEnd;	// IMP=0x00100000005b7361
- (void)gestureSequenceWillBegin;	// IMP=0x00100000005b7341
- (void)p_handleIndirectImmediatePressGesture:(id)arg1;	// IMP=0x00100000005b6d02
- (void)handleGesture:(id)arg1;	// IMP=0x00100000005b6585
- (_Bool)canHandleGesture:(id)arg1;	// IMP=0x00100000005b6160
- (void)setSelectionControlsForInputType:(long long)arg1;	// IMP=0x00100000005b5ffc
- (void)p_handleTapGestures:(id)arg1;	// IMP=0x00100000005b58a5
- (id)p_tappedRubyFieldForNaturalPoint:(struct CGPoint)arg1 textRep:(id)arg2;	// IMP=0x00100000005b589d
- (void)p_handleEditableTextSelectionForceGesture:(id)arg1;	// IMP=0x00100000005b5381
- (void)p_createKnobTracker:(id)arg1 forRep:(id)arg2 tapCount:(unsigned long long)arg3;	// IMP=0x00100000005b4ec4
- (void)p_beginKnobTrackingSelection:(id)arg1 forRep:(id)arg2 atPoint:(struct CGPoint)arg3;	// IMP=0x00100000005b4c1c
- (void)p_cancelTapAndLongPressPreviousSelector;	// IMP=0x00100000005b4bb5
- (void)tapAndLongPressDidEndOrCancel;	// IMP=0x00100000005b4a2c
- (void)updateTapAndLongPress;	// IMP=0x00100000005b45f1
- (void)p_beginTapAndLongPress;	// IMP=0x00100000005b42ac
- (void)p_handleTapAndTouchGesture:(id)arg1;	// IMP=0x00100000005b3a84
- (id)p_inlineEquationRepInTableCellTextRep:(id)arg1 atUnscaledCanvasPoint:(struct CGPoint)arg2 gesture:(id)arg3;	// IMP=0x00100000005b3a44
- (_Bool)p_shiftKeyIsDownWIthGesture:(id)arg1;	// IMP=0x00100000005b3a28
- (_Bool)p_shouldBeginCaretGrabAtUnscaledCanvasPoint:(struct CGPoint)arg1;	// IMP=0x00100000005b37df
- (id)p_editingRepForCharIndex:(unsigned long long)arg1;	// IMP=0x00100000005b3254
- (void)p_handleLongPressTextInteractionWithGestureRecognizer:(id)arg1;	// IMP=0x00100000005b2b09
- (void)p_sendHandleTapNotification;	// IMP=0x00100000005b2a42
- (void)p_tappedOnKnob:(id)arg1;	// IMP=0x00100000005b2a3c
- (_Bool)isACurrentEditor;	// IMP=0x00100000005b29a1
- (void)tappedInRep:(id)arg1 point:(struct CGPoint)arg2 tapCount:(unsigned long long)arg3 isTapHold:(_Bool)arg4 precise:(_Bool)arg5 alternateClick:(_Bool)arg6;	// IMP=0x00100000005b27b0
- (void)p_setTappedSelectionPath:(id)arg1;	// IMP=0x00100000005b26ce
- (void)tappedInRep:(id)arg1 point:(struct CGPoint)arg2 tapCount:(unsigned long long)arg3 isTapHold:(_Bool)arg4 precise:(_Bool)arg5;	// IMP=0x00100000005b26ac
- (id)p_selectionForRep:(id)arg1 naturalPoint:(struct CGPoint)arg2 textSelectionGranularity:(unsigned long long)arg3 isTapHold:(_Bool)arg4 precise:(_Bool)arg5 includeListLabels:(_Bool)arg6 allowPastBreak:(_Bool)arg7 alternateClick:(_Bool)arg8;	// IMP=0x00100000005b15b5
- (unsigned long long)charIndexInRep:(id)arg1 fromPoint:(struct CGPoint)arg2 allowPastBreak:(_Bool)arg3 allowNotFound:(_Bool)arg4 pastCenterGoesToNextChar:(_Bool)arg5 isAtEndOfLine:(_Bool *)arg6;	// IMP=0x00100000005b1330
- (unsigned long long)charIndexInRep:(id)arg1 fromPoint:(struct CGPoint)arg2 allowPastBreak:(_Bool)arg3 allowNotFound:(_Bool)arg4 isAtEndOfLine:(_Bool *)arg5;	// IMP=0x00100000005b10b3
- (unsigned long long)charIndexInRep:(id)arg1 fromPoint:(struct CGPoint)arg2 allowPastBreak:(_Bool)arg3 isAtEndOfLine:(_Bool *)arg4 leadingEdge:(_Bool *)arg5;	// IMP=0x00100000005b100d
- (id)p_selectionForRep:(id)arg1 point:(struct CGPoint)arg2 textSelectionGranularity:(unsigned long long)arg3 isTapHold:(_Bool)arg4 precise:(_Bool)arg5 includeListLabels:(_Bool)arg6 allowPastBreak:(_Bool)arg7;	// IMP=0x00100000005b0fe2
- (_Bool)isUnscaledPointInTextSelection:(struct CGPoint)arg1;	// IMP=0x00100000005b0e90
- (void)p_handleCaretDragWithImmediatePressGesture:(id)arg1;	// IMP=0x00100000005b0b97
- (void)p_clearEditMenuFlags;	// IMP=0x00100000005b0b91
- (void)p_handleImmediateAndLongPressGesture:(id)arg1;	// IMP=0x00100000005b0898
- (void)p_handleTwoFingerPanGesture:(id)arg1;	// IMP=0x00100000005b043a
- (id)p_endingRepForUnscaledCanvasPoint:(struct CGPoint)arg1;	// IMP=0x00100000005b038e
- (id)closestRepToPoint:(struct CGPoint)arg1 forStorage:(id)arg2;	// IMP=0x00100000005b00a3
- (id)p_repsForStorage:(id)arg1;	// IMP=0x00100000005afec3
- (void)p_recursivelyAddRep:(id)arg1 forStorage:(id)arg2 toSet:(id)arg3;	// IMP=0x00100000005afca0
- (void)twoFingerPanGestureDidEnd;	// IMP=0x00100000005afc8c
- (void)twoFingerPanGestureWillBegin;	// IMP=0x00100000005afc75
- (_Bool)isDraggingListItem;	// IMP=0x00100000005afc6d
- (id)p_textRepAtGestureLocationForGesture:(id)arg1;	// IMP=0x00100000005afb20
- (id)wpRepFromHitRep:(id)arg1;	// IMP=0x00100000005afad3
- (id)selectionFromUnscaledCanvasPoint:(struct CGPoint)arg1 textSelectionGranularity:(unsigned long long)arg2 isTapHold:(_Bool)arg3 allowPastBreak:(_Bool)arg4 isDragging:(_Bool)arg5;	// IMP=0x00100000005af9aa
- (void)p_setSelectionFromPoint:(struct CGPoint)arg1 textSelectionGranularity:(unsigned long long)arg2 includeListLabels:(_Bool)arg3;	// IMP=0x00100000005af7ff
- (id)p_editingRepAtPoint:(struct CGPoint)arg1;	// IMP=0x00100000005af720
- (MISSING_TYPE *)p_adjustSelection:withUnscaledCanvasPoint:textSelectionGranularity:isTapHold:allowPastBreak:isDragging: /* Error: Ran out of types for this method. */;	// IMP=0x00100000005af675
- (void)p_adjustSelection:(id)arg1 withOtherSelection:(id)arg2 textSelectionGranularity:(unsigned long long)arg3;	// IMP=0x00100000005aef72
- (Class)wpSelectionClass;	// IMP=0x00100000005aef61
- (struct _NSRange)nextWordFromIndex:(unsigned long long)arg1 forward:(_Bool)arg2;	// IMP=0x00100000005aec91
- (_Bool)blockGesture:(id)arg1;	// IMP=0x00100000005aec0c
- (void)arrowKeyReceivedInDirection:(unsigned long long)arg1 withModifierKeys:(id)arg2;	// IMP=0x0010000000bfdc50
@property(nonatomic, readonly) _Bool wantsRawArrowKeyEvents;
- (void)spacebarTapped:(id)arg1;	// IMP=0x0010000000bfd3a0
@property(nonatomic, readonly) _Bool handlesSpacebar;
- (void)swapWithMark:(id)arg1;	// IMP=0x0010000000bfd370
- (void)deleteToMark:(id)arg1;	// IMP=0x0010000000bfd270
- (void)selectToMark:(id)arg1;	// IMP=0x0010000000bfd250
- (void)setMark:(id)arg1;	// IMP=0x0010000000bfd230
- (void)selectParagraph:(id)arg1;	// IMP=0x0010000000bfd210
- (void)selectWord:(id)arg1;	// IMP=0x0010000000bfd1f0
- (void)selectLine:(id)arg1;	// IMP=0x0010000000bfd1d0
- (void)selectAll:(id)arg1;	// IMP=0x0010000000bfd130
- (void)moveWordRightAndModifySelection:(id)arg1;	// IMP=0x0010000000bfcf90
- (void)moveWordLeftAndModifySelection:(id)arg1;	// IMP=0x0010000000bfcf70
- (void)moveWordRight:(id)arg1;	// IMP=0x0010000000bfcf50
- (void)moveWordLeft:(id)arg1;	// IMP=0x0010000000bfcf30
- (void)moveWordBackwardAndModifySelection:(id)arg1;	// IMP=0x0010000000bfcf10
- (void)moveWordForwardAndModifySelection:(id)arg1;	// IMP=0x0010000000bfcef0
- (void)moveWordBackward:(id)arg1;	// IMP=0x0010000000bfced0
- (void)moveWordForward:(id)arg1;	// IMP=0x0010000000bfceb0
- (void)moveToEndOfLineAndModifySelection:(id)arg1;	// IMP=0x0010000000bfce90
- (void)moveToEndOfLine:(id)arg1;	// IMP=0x0010000000bfce70
- (void)moveToBeginningOfLineAndModifySelection:(id)arg1;	// IMP=0x0010000000bfce50
- (void)moveToBeginningOfLine:(id)arg1;	// IMP=0x0010000000bfce30
- (void)moveToRightEndOfLineAndModifySelection:(id)arg1;	// IMP=0x0010000000bfce10
- (void)moveToRightEndOfLine:(id)arg1;	// IMP=0x0010000000bfcdf0
- (void)moveToLeftEndOfLineAndModifySelection:(id)arg1;	// IMP=0x0010000000bfcdd0
- (void)moveToLeftEndOfLine:(id)arg1;	// IMP=0x0010000000bfcdb0
- (void)moveToEndOfParagraphAndModifySelection:(id)arg1;	// IMP=0x0010000000bfcd90
- (void)moveToEndOfParagraph:(id)arg1;	// IMP=0x0010000000bfcd00
- (void)moveToBeginningOfParagraphAndModifySelection:(id)arg1;	// IMP=0x0010000000bfcce0
- (void)moveToBeginningOfParagraph:(id)arg1;	// IMP=0x0010000000bfccc0
- (void)moveParagraphBackwardAndModifySelection:(id)arg1;	// IMP=0x0010000000bfcca0
- (void)moveParagraphBackward:(id)arg1;	// IMP=0x0010000000bfcc80
- (void)moveParagraphForwardAndModifySelection:(id)arg1;	// IMP=0x0010000000bfcc60
- (void)moveParagraphForward:(id)arg1;	// IMP=0x0010000000bfcc40
- (void)moveToEndOfDocumentAndModifySelection:(id)arg1;	// IMP=0x0010000000bfcc20
- (void)moveToEndOfDocument:(id)arg1;	// IMP=0x0010000000bfc990
- (void)moveToBeginningOfDocumentAndModifySelection:(id)arg1;	// IMP=0x0010000000bfc820
- (void)moveToBeginningOfDocument:(id)arg1;	// IMP=0x0010000000bfc800
- (void)uppercaseWord:(id)arg1;	// IMP=0x0010000000bfc7e0
- (void)lowercaseWord:(id)arg1;	// IMP=0x0010000000bfc7c0
- (void)capitalizeWord:(id)arg1;	// IMP=0x0010000000bfc7a0
- (void)transposeWords:(id)arg1;	// IMP=0x0010000000bfc780
- (void)transpose:(id)arg1;	// IMP=0x0010000000bfc760
- (void)complete:(id)arg1;	// IMP=0x0010000000bfc6b0
- (void)deleteWordBackward:(id)arg1;	// IMP=0x0010000000bfc690
- (void)deleteWordForward:(id)arg1;	// IMP=0x0010000000bfc3c0
- (void)deleteToBeginningOfLine:(id)arg1;	// IMP=0x0010000000bfc150
- (void)escapePressed:(id)arg1;	// IMP=0x0010000000bfbfa0
- (void)insertTab:(id)arg1;	// IMP=0x0010000000bfbf80
- (void)insertNewline:(id)arg1;	// IMP=0x0010000000bfbbb0
- (void)insertLineBreak:(id)arg1;	// IMP=0x0010000000bfbb00
- (void)insertBacktab:(id)arg1;	// IMP=0x0010000000bfba80

// Remaining properties
@property(readonly, nonatomic) _Bool allowUndoRedoOperations;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

