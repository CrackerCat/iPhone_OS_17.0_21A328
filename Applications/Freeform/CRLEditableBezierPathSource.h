//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class CRLBezierNode, NSArray, NSUUID;

@interface CRLEditableBezierPathSource
{
    NSArray *mSubpaths;	// 8 = 0x8
    unsigned long long mActiveSubpath;	// 16 = 0x10
    _Bool mHasLockedFlipTransform;	// 24 = 0x18
    struct CGAffineTransform mLockedFlipTransform;	// 32 = 0x20
    NSUUID *mPersistedUUID;	// 80 = 0x50
}

+ (id)editableBezierPathSourceWithBezierPath:(id)arg1;	// IMP=0x00200000001d104e
+ (id)editableBezierPathSourceWithPathSource:(id)arg1;	// IMP=0x00100000001d0fec
+ (id)editableBezierPathSource;	// IMP=0x00100000001d0fd3
- (void).cxx_destruct;	// IMP=0x00100000001d8781
@property(nonatomic) unsigned long long activeSubpath; // @synthesize activeSubpath=mActiveSubpath;
@property(copy, nonatomic) NSArray *subpaths; // @synthesize subpaths=mSubpaths;
@property(retain, nonatomic) NSUUID *persistedUUID; // @synthesize persistedUUID=mPersistedUUID;
- (id)inferredAccessibilityDescription;	// IMP=0x00100000001d86c8
- (id)inferredAccessibilityDescriptionNoShapeNames;	// IMP=0x00100000001d8636
- (void)closePath;	// IMP=0x00100000001d82cc
- (void)smoothCurveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;	// IMP=0x00100000001d820a
- (void)curveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;	// IMP=0x00100000001d7f03
- (void)lineToPoint:(struct CGPoint)arg1;	// IMP=0x00100000001d7c7a
- (void)moveToPoint:(struct CGPoint)arg1;	// IMP=0x00100000001d7a83
// Error: Property attributes should begin with the type ('T') attribute, property name: nodeTypes
// Property attributes: (null)

@property(readonly, nonatomic) struct CGPath *subpathForSelection;
- (void)cutAtSelectedNodes;	// IMP=0x00100000001d6bb4
- (_Bool)canCutAtSelectedNodes;	// IMP=0x00100000001d6947
- (void)splitSelectedNodes;	// IMP=0x00100000001d6578
- (void)splitSelectedEdges;	// IMP=0x00100000001d63ab
- (id)splitEdge:(long long)arg1 at:(double)arg2 fromSubpath:(long long)arg3;	// IMP=0x00100000001d5f8c
- (void)deleteSelectedEdges;	// IMP=0x00100000001d5788
- (void)closeSelectedNodes;	// IMP=0x00100000001d5480
- (_Bool)canCloseSelectedNodes;	// IMP=0x00100000001d5219
- (void)connectSelectedNodes;	// IMP=0x00100000001d4dc3
- (_Bool)canConnectSelectedNodes;	// IMP=0x00100000001d4d82
- (id)subpathsForConnectingUsingFirstSubpathFirstNode:(_Bool *)arg1 andSecondPathFirstNode:(_Bool *)arg2;	// IMP=0x00100000001d4a16
- (void)selectSubpathForNode:(id)arg1 toggle:(_Bool)arg2;	// IMP=0x00100000001d48dc
@property(nonatomic, getter=isClosed) _Bool closed;
@property(readonly, nonatomic) _Bool isOpen;
- (void)smoothAllNodes;	// IMP=0x00100000001d457a
- (void)smoothNode:(id)arg1;	// IMP=0x00100000001d4466
- (void)sharpenAllNodes;	// IMP=0x00100000001d4422
- (void)toggleSelectedNodesToType:(long long)arg1;	// IMP=0x00100000001d40af
- (void)toggleNode:(id)arg1 toType:(long long)arg2 prevNode:(id)arg3 nextNode:(id)arg4;	// IMP=0x00100000001d3cfa
@property(readonly, nonatomic) struct CGRect nodeBounds;
- (double)distanceToPoint:(struct CGPoint)arg1 subpathIndex:(unsigned long long *)arg2 elementIndex:(unsigned long long *)arg3 tValue:(double *)arg4 threshold:(double)arg5;	// IMP=0x00100000001d39a5
- (id)bezierNodeUnderPoint:(struct CGPoint)arg1 withTransform:(struct CGAffineTransform)arg2 andTolerance:(double)arg3 returningType:(long long *)arg4;	// IMP=0x00100000001d3895
- (void)deselectAllNodes;	// IMP=0x00100000001d3851
- (void)selectAllNodes;	// IMP=0x00100000001d380d
- (void)deleteSelectedNodes;	// IMP=0x00100000001d37f9
- (void)deleteSelectedNodesForced:(_Bool)arg1;	// IMP=0x00100000001d3574
@property(readonly, nonatomic) _Bool deletingSelectedNodesWillDeleteShape;
@property(readonly, nonatomic) _Bool canDeleteSelectedNodes;
@property(readonly, nonatomic) _Bool isCompound;
- (void)removeNode:(id)arg1;	// IMP=0x00100000001d30d9
@property(readonly, nonatomic) _Bool allNodesSelected;
@property(readonly, nonatomic) _Bool hasSelectedNode;
- (void)offsetSelectedEdgesByDelta:(struct CGPoint)arg1;	// IMP=0x00100000001d2d0e
- (void)offsetSelectedNodesByDelta:(struct CGPoint)arg1;	// IMP=0x00100000001d2bbb
@property(readonly, nonatomic) CRLBezierNode *lastNode;
@property(readonly, nonatomic) CRLBezierNode *firstNode;
- (id)nodeAfterNode:(id)arg1;	// IMP=0x00100000001d29ff
- (id)nodePriorToNode:(id)arg1;	// IMP=0x00100000001d2953
- (void)removeLastNode;	// IMP=0x00100000001d28db
- (void)addNode:(id)arg1;	// IMP=0x00100000001d2849
- (void)alignToOrigin;	// IMP=0x00100000001d253f
- (void)transformUsingAffineTransform:(struct CGAffineTransform)arg1;	// IMP=0x00100000001d23e5
- (void)setNaturalSize:(struct CGSize)arg1;	// IMP=0x00100000001d21b2
- (struct CGSize)naturalSize;	// IMP=0x00100000001d2142
- (struct CGAffineTransform)pathFlipTransform;	// IMP=0x00100000001d20d9
- (void)beginNewSubpath;	// IMP=0x00100000001d2007
- (void)setLockedFlipTransform:(_Bool)arg1;	// IMP=0x00100000001d1f90
- (void)reverseDirection;	// IMP=0x00100000001d1f18
@property(copy, nonatomic) NSArray *nodes;
- (void)setBezierPath:(id)arg1;	// IMP=0x00100000001d1660
- (void)convertToHobby;	// IMP=0x00100000001d161c
@property(readonly, nonatomic) struct CGPath *pathWithoutFlips;
- (id)bezierPathWithoutFlips;	// IMP=0x00100000001d1539
- (_Bool)isCircular;	// IMP=0x00100000001d1487
- (_Bool)isRectangular;	// IMP=0x00100000001d13d5
@property(readonly, nonatomic) _Bool closeIfEndpointsAreEqual;
- (_Bool)isEqualWithStrictComparison:(id)arg1;	// IMP=0x00100000001d122a
- (unsigned long long)hash;	// IMP=0x00100000001d119e
- (_Bool)isEqual:(id)arg1;	// IMP=0x00100000001d10b7
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00100000001d0efd
- (id)description;	// IMP=0x00100000001d0e81
- (id)init;	// IMP=0x00100000001d0dec
- (void)addTemporarySmoothNodes;	// IMP=0x0010000000533a89
- (void)updateSmoothNodes;	// IMP=0x0010000000533a45
- (void)morphWithMorphInfo:(id)arg1;	// IMP=0x00100000005338dd

@end

