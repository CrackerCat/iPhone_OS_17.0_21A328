//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CRLCanvasEditorHelper, CRLCanvasSelection, CRLEditorController, CRLInteractiveCanvasController, CRLPasteboardController, NSArray, NSSet, NSString, UIInputViewController, UIView, _TtC8Freeform21CRLConnectionLineItem, _TtC8Freeform21CRLEditingCoordinator;
@protocol CRLArrangeInspectorDelegate, CRLSearchReference, CRLTextInputReceiving, CRLTextSelecting, _TtP8Freeform20CRLKeyInputReceiving_;

@interface CRLCanvasEditor : NSObject
{
    CRLInteractiveCanvasController *mInteractiveCanvasController;	// 8 = 0x8
    CRLCanvasEditorHelper *mCanvasEditorHelper;	// 16 = 0x10
    NSObject<CRLArrangeInspectorDelegate> *mZOrderArranger;	// 24 = 0x18
    _Bool mPreventImageDataReplace;	// 32 = 0x20
    UIView *mInputView;	// 40 = 0x28
    _Bool mEndTextInputWhenKeyboardHides;	// 48 = 0x30
    CRLPasteboardController *_pasteboardController;	// 56 = 0x38
    UIInputViewController *inputAccessoryViewController;	// 64 = 0x40
    NSArray *leadingBarButtonGroups;	// 72 = 0x48
    NSArray *trailingBarButtonGroups;	// 80 = 0x50
}

+ (CDUnknownBlockType)spatialInfoComparator;	// IMP=0x00200000000ab7a8
+ (_Bool)physicalKeyboardIsSender:(id)arg1;	// IMP=0x00100000000a4d80
+ (Class)canvasEditorHelperClass;	// IMP=0x00100000000a3ccc
- (void).cxx_destruct;	// IMP=0x00200000000ac805
@property(nonatomic) _Bool endTextInputWhenKeyboardHides; // @synthesize endTextInputWhenKeyboardHides=mEndTextInputWhenKeyboardHides;
@property(readonly, copy, nonatomic) NSArray *trailingBarButtonGroups; // @synthesize trailingBarButtonGroups;
@property(readonly, copy, nonatomic) NSArray *leadingBarButtonGroups; // @synthesize leadingBarButtonGroups;
@property(readonly, nonatomic) UIInputViewController *inputAccessoryViewController; // @synthesize inputAccessoryViewController;
- (void)scrollCanvasRight:(id)arg1;	// IMP=0x00100000000ac76c
- (void)scrollCanvasLeft:(id)arg1;	// IMP=0x00100000000ac703
- (void)scrollCanvasDown:(id)arg1;	// IMP=0x00100000000ac69a
- (void)scrollCanvasUp:(id)arg1;	// IMP=0x00100000000ac631
- (void)scrollCanvasPageDown:(id)arg1;	// IMP=0x00100000000ac5c8
- (void)scrollCanvasPageUp:(id)arg1;	// IMP=0x00100000000ac55f
- (id)trailingBarButtonGroupsWithDefaultGroups:(id)arg1;	// IMP=0x00100000000ac552
- (id)leadingBarButtonGroupsWithDefaultGroups:(id)arg1;	// IMP=0x00100000000ac545
- (void)actualSize:(id)arg1;	// IMP=0x00100000000ac500
- (void)zoomToSelection:(id)arg1;	// IMP=0x00100000000ac4c3
- (void)zoomToFitAllContent:(id)arg1;	// IMP=0x00100000000ac486
- (void)zoomOut:(id)arg1;	// IMP=0x00100000000ac417
- (void)zoomIn:(id)arg1;	// IMP=0x00100000000ac3a8
- (void)scrollToEndOfDocument:(id)arg1;	// IMP=0x00100000000ac2d3
- (void)scrollToBeginningOfDocument:(id)arg1;	// IMP=0x00100000000ac1d9
@property(readonly, nonatomic) id <CRLArrangeInspectorDelegate> arrangeInspectorDelegate;
- (id)createArrangeInspectorDelegate;	// IMP=0x00100000000ac15c
- (void)insertNewline:(id)arg1;	// IMP=0x00100000000ac0eb
- (void)insertText:(id)arg1 replacementRange:(struct _NSRange)arg2;	// IMP=0x00100000000ac082
- (void)spacebarTapped:(id)arg1;	// IMP=0x00100000000ac07c
@property(readonly, nonatomic) _Bool handlesSpacebar;
- (void)escapePressed:(id)arg1;	// IMP=0x00100000000abfed
- (void)insertBacktab:(id)arg1;	// IMP=0x00100000000abec4
- (void)insertTab:(id)arg1;	// IMP=0x00100000000abd9e
- (id)p_selectableInfosInInfos:(id)arg1;	// IMP=0x00100000000abb61
- (id)p_spatiallySortedSelectableBoardItems;	// IMP=0x00100000000ab7b5
- (id)p_nextInfoInTabSequence:(long long)arg1;	// IMP=0x00100000000aa9bf
@property(readonly, nonatomic) _TtC8Freeform21CRLConnectionLineItem *connectionLineItemToUseForConnecting;
- (void)connectWithConnectionLine:(id)arg1;	// IMP=0x00100000000aa3a9
@property(readonly, nonatomic) NSArray *infosToConnect;
- (_Bool)canGroupBoardItem:(id)arg1;	// IMP=0x00100000000aa2cd
- (void)ungroup:(id)arg1;	// IMP=0x00100000000aa264
- (void)group:(id)arg1;	// IMP=0x00100000000aa1fb
- (void)selectAll:(id)arg1;	// IMP=0x00100000000a98fc
@property(readonly, nonatomic) NSSet *infosForSelectAllInRoot;
- (void)select:(id)arg1;	// IMP=0x00100000000a9872
- (id)p_commandForPastingProvidedBoardItems:(id)arg1 withPasteboard:(id)arg2 sender:(id)arg3 hasValidGeometries:(_Bool)arg4 allowPositionChange:(_Bool)arg5;	// IMP=0x00100000000a91a7
- (struct CGRect)p_boundingRectForPastingBoardItems:(id)arg1;	// IMP=0x00100000000a8aca
- (void)pasteValues:(id)arg1;	// IMP=0x00100000000a8a61
- (void)pasteAsPlainText:(id)arg1;	// IMP=0x00100000000a89f8
- (void)paste:(id)arg1;	// IMP=0x00100000000a893d
- (id)commandForInsertingBoardItems:(id)arg1 below:(id)arg2;	// IMP=0x00100000000a8928
- (id)commandForInsertingBoardItems:(id)arg1 below:(id)arg2 withOffset:(unsigned long long)arg3;	// IMP=0x00100000000a8832
- (id)pasteNativeInfosFromPasteboard:(id)arg1 allowImageReplacement:(_Bool)arg2;	// IMP=0x00100000000a86b3
- (id)p_pasteNativeBoardItemsFromProviders:(id)arg1 withPasteboard:(id)arg2 selectionPath:(id)arg3 sender:(id)arg4 hasValidGeometries:(_Bool)arg5 allowImageReplacement:(_Bool)arg6;	// IMP=0x00100000000a8196
- (void)pasteWithPasteboard:(id)arg1 selectionPath:(id)arg2 forceMatchStyle:(_Bool)arg3 sender:(id)arg4;	// IMP=0x00100000000a7594
- (void)p_insertBoardItems:(id)arg1 withInsertionContext:(id)arg2;	// IMP=0x00100000000a701f
- (void)insertBoardItems:(id)arg1 withInsertionContext:(id)arg2 postProcessBlock:(CDUnknownBlockType)arg3;	// IMP=0x00100000000a6e4c
- (id)selectionBehaviorForInsertingBoardItems:(id)arg1;	// IMP=0x00100000000a6db4
- (struct CGSize)sizeForInsertingMediaOfSize:(struct CGSize)arg1;	// IMP=0x00100000000a6d9e
- (void)prepareGeometryForInsertingBoardItems:(id)arg1 withInsertionContext:(id)arg2;	// IMP=0x00100000000a66cc
- (void)copyForKeyboardMovementDuplicationToPasteboard:(id)arg1;	// IMP=0x00100000000a66b2
- (void)copy:(id)arg1;	// IMP=0x00100000000a65eb
- (void)copyToPasteboard:(id)arg1 nativeOnly:(_Bool)arg2 withSender:(id)arg3;	// IMP=0x00100000000a65d1
- (void)copyBoardItems:(id)arg1 toPasteboard:(id)arg2 asPDF:(_Bool)arg3 nativeOnly:(_Bool)arg4;	// IMP=0x00100000000a62e0
- (void)copyToPasteboard:(id)arg1 asPDF:(_Bool)arg2 nativeOnly:(_Bool)arg3 withSender:(id)arg4;	// IMP=0x00100000000a6184
- (void)deleteWordForward:(id)arg1;	// IMP=0x00100000000a6172
- (void)deleteWordBackward:(id)arg1;	// IMP=0x00100000000a6160
- (void)deleteToEndOfLine:(id)arg1;	// IMP=0x00100000000a614e
- (void)deleteToBeginningOfLine:(id)arg1;	// IMP=0x00100000000a613c
- (void)deleteForward:(id)arg1;	// IMP=0x00100000000a612a
- (void)deleteBackward:(id)arg1;	// IMP=0x00100000000a6118
- (long long)canPerformEditorAction:(SEL)arg1 withSender:(id)arg2;	// IMP=0x00100000000a5dcc
- (_Bool)canvasEditorCanUngroupWithSender:(id)arg1;	// IMP=0x00100000000a5dba
- (_Bool)canUngroupWithSender:(id)arg1;	// IMP=0x00100000000a5ceb
- (_Bool)canvasEditorCanGroupWithSender:(id)arg1;	// IMP=0x00100000000a5cd9
- (_Bool)canGroupWithSender:(id)arg1;	// IMP=0x00100000000a5a72
- (_Bool)canvasEditorCanDeselectAllWithSender:(id)arg1;	// IMP=0x00100000000a5954
- (_Bool)canvasEditorCanSelectAllWithSender:(id)arg1;	// IMP=0x00100000000a5942
- (_Bool)canSelectAllWithSender:(id)arg1;	// IMP=0x00100000000a5500
- (_Bool)canvasEditorCanOptionDragDuplicateWithSender:(id)arg1;	// IMP=0x00100000000a5447
- (_Bool)canvasEditorCanDuplicateWithSender:(id)arg1;	// IMP=0x00100000000a5435
- (_Bool)canvasEditorCanPasteValuesWithSender:(id)arg1;	// IMP=0x00100000000a5423
- (_Bool)canvasEditorCanPasteAsPlainTextWithSender:(id)arg1;	// IMP=0x00100000000a5411
- (_Bool)canvasEditorCanPasteWithSender:(id)arg1;	// IMP=0x00100000000a53a1
- (_Bool)canPasteWithSender:(id)arg1;	// IMP=0x00100000000a5331
- (_Bool)canvasEditorCanCopyStyleWithSender:(id)arg1;	// IMP=0x00100000000a531f
- (_Bool)canvasEditorCanCutWithSender:(id)arg1;	// IMP=0x00100000000a52c6
- (_Bool)canvasEditorCanCopyWithSender:(id)arg1;	// IMP=0x00100000000a5041
- (_Bool)canvasEditorCanDeleteWithSender:(id)arg1;	// IMP=0x00100000000a4f6b
- (_Bool)canCopyStyle;	// IMP=0x00100000000a4f63
- (void)pasteWithPasteboard:(id)arg1 sender:(id)arg2;	// IMP=0x00100000000a4eb1
- (_Bool)canPasteWithPasteboard:(id)arg1 sender:(id)arg2;	// IMP=0x00100000000a4ddf
- (_Bool)canHandleInsertionOfBoardItems:(id)arg1 insertionContext:(id)arg2;	// IMP=0x00100000000a4dd7
- (id)permittedActionsForReasons:(unsigned long long)arg1;	// IMP=0x00100000000a4cd0
@property(readonly, nonatomic) CRLPasteboardController *pasteboardController;
- (void)hideLassoSelectionEditMenuInDrawingModeIfLassoToolIsSelected;	// IMP=0x00100000000a4a84
- (void)selectionDidChangeFromSelection:(id)arg1 toSelection:(id)arg2 withFlags:(unsigned long long)arg3;	// IMP=0x00100000000a4891
- (id)selectionWillChangeFromSelection:(id)arg1 toSelection:(id)arg2 withFlags:(unsigned long long)arg3 inSelectionPath:(id)arg4 withNewEditors:(id)arg5;	// IMP=0x00100000000a469c
- (void)didBecomeTextInputEditor;	// IMP=0x00100000000a4696
- (_Bool)shouldBecomeTextInputEditor;	// IMP=0x00100000000a468e
- (id)nextEditorForSelection:(id)arg1 withNewEditorStack:(id)arg2 selectionPath:(id)arg3;	// IMP=0x00100000000a45de
- (_Bool)shouldRemainOnEditorStackForSelection:(id)arg1 inSelectionPath:(id)arg2 withNewEditors:(id)arg3;	// IMP=0x00100000000a459c
- (_Bool)shouldUseAlternateSelectionHighlight;	// IMP=0x00100000000a4594
- (id)p_filterNonDisplayedInfos:(id)arg1;	// IMP=0x00100000000a4303
- (void)repWasCreated:(id)arg1;	// IMP=0x00100000000a42be
- (void)canvasInfosDidChange;	// IMP=0x00100000000a40bb
- (id)selectionPathForDraggingSelectionPath:(id)arg1;	// IMP=0x00100000000a40a5
- (id)selectionPathWithInfos:(id)arg1;	// IMP=0x00100000000a402b
- (id)selectionPathWithInfo:(id)arg1;	// IMP=0x00100000000a3fb1
@property(readonly, nonatomic) CRLCanvasSelection *canvasSelection;
@property(readonly, nonatomic) _TtC8Freeform21CRLEditingCoordinator *editingCoordinator;
@property(readonly, nonatomic) CRLInteractiveCanvasController *interactiveCanvasController;
@property(readonly, nonatomic) CRLCanvasEditorHelper *canvasEditorHelper;
@property(retain, nonatomic) CRLEditorController *editorController;
- (void)teardown;	// IMP=0x00100000000a3d8c
- (id)initWithInteractiveCanvasController:(id)arg1;	// IMP=0x00100000000a3cdd
- (void)presentMediaCompatibilityAlertWithReasons:(long long)arg1 forMediaType:(long long)arg2 forSingleMediaObject:(_Bool)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00100000000a3c4c
- (void)selectParent:(id)arg1;	// IMP=0x00100000000a3be3
- (void)sendToBack:(id)arg1;	// IMP=0x00100000000a3b7a
- (void)sendBackward:(id)arg1;	// IMP=0x00100000000a3b11
- (void)bringForward:(id)arg1;	// IMP=0x00100000000a3aa8
- (void)bringToFront:(id)arg1;	// IMP=0x00100000000a3a3f
- (void)distributeDrawablesEvenly:(id)arg1;	// IMP=0x00100000000a3a02
- (void)distributeDrawablesVertically:(id)arg1;	// IMP=0x00100000000a39c0
- (void)distributeDrawablesHorizontally:(id)arg1;	// IMP=0x00100000000a397e
- (void)alignDrawablesByHorizontalCenter:(id)arg1;	// IMP=0x00100000000a393c
- (void)alignDrawablesByBottomEdge:(id)arg1;	// IMP=0x00100000000a38fa
- (void)alignDrawablesByTopEdge:(id)arg1;	// IMP=0x00100000000a38b8
- (void)alignDrawablesByVerticalCenter:(id)arg1;	// IMP=0x00100000000a3876
- (void)alignDrawablesByRightEdge:(id)arg1;	// IMP=0x00100000000a3834
- (void)alignDrawablesByLeftEdge:(id)arg1;	// IMP=0x00100000000a37f5
- (struct CGPath *)newDragAndDropHighlightPathWithInset:(double)arg1;	// IMP=0x00100000000a3752
- (_Bool)insertBoardItemsFromDragAndDrop:(id)arg1 atPoint:(struct CGPoint)arg2 onRep:(id)arg3 insertionContext:(id)arg4 alreadyPositionedInputInfos:(_Bool)arg5;	// IMP=0x00100000000a369a
- (_Bool)wantsToHighlightRep:(id)arg1 forDragOperationWithDragInfo:(id)arg2 atPoint:(struct CGPoint)arg3 allowNonPlaceholderReplacement:(_Bool)arg4;	// IMP=0x00100000000a35f2
- (void)hideDragAndDropUI;	// IMP=0x00100000000a35b5
- (void)updateDragAndDropUIForPoint:(struct CGPoint)arg1 dragInfo:(id)arg2;	// IMP=0x00100000000a3530
- (id)repToHighlightForDragInfo:(id)arg1 atUnscaledPoint:(struct CGPoint)arg2;	// IMP=0x00100000000a349a
- (_Bool)handleDragOperation:(unsigned long long)arg1 withDragInfo:(id)arg2 atUnscaledPoint:(struct CGPoint)arg3;	// IMP=0x00100000000a3408
- (unsigned long long)dragOperationForDragInfo:(id)arg1 atUnscaledPoint:(struct CGPoint)arg2;	// IMP=0x00100000000a337e
- (void)reduceFileSizeForSelectedImages:(id)arg1;	// IMP=0x00100000000a3315
- (void)reduceDocumentFileSize:(id)arg1;	// IMP=0x00100000000a32ac
- (void)enterQuickSelectMode:(id)arg1;	// IMP=0x00100000000a3243
- (void)maskWithShapeType:(id)arg1;	// IMP=0x00000000000a300e
- (void)maskWithShape:(id)arg1;	// IMP=0x00100000000a2fd1
- (void)mask:(id)arg1;	// IMP=0x00100000000a2f94
- (void)maskWithSelection:(id)arg1;	// IMP=0x00100000000a2efe
- (void)addMiniFormatterElementsToArray:(id)arg1 atPoint:(struct CGPoint)arg2;	// IMP=0x00100000000a2e79
@property(readonly, nonatomic) _Bool shouldPreventQuickSelect;
- (void)crlaxAddContextualMenuOptionsToArray:(id)arg1 atPoint:(struct CGPoint)arg2;	// IMP=0x00100000000a297d
- (void)addContextualMenuElementsToArray:(id)arg1 atPoint:(struct CGPoint)arg2;	// IMP=0x00100000000a28f8
- (void)addContextualMenuItemsToArray:(id)arg1;	// IMP=0x00100000000a288f
- (void)duplicate:(id)arg1;	// IMP=0x00100000000a2826
- (_Bool)isLayoutSelectable:(id)arg1;	// IMP=0x00100000000a27b8
- (void)deselectAll:(id)arg1;	// IMP=0x00100000000a274f
- (void)unlock:(id)arg1;	// IMP=0x00100000000a26e6
- (void)lock:(id)arg1;	// IMP=0x00100000000a267d
- (void)cut:(id)arg1;	// IMP=0x00100000000a2614
- (void)delete:(id)arg1;	// IMP=0x00100000000a25ab
- (void)endEditing;	// IMP=0x00100000000a1fde
- (void)beginEditingWith:(id)arg1;	// IMP=0x00100000000a1f75
- (void)tabKeyPressed;	// IMP=0x00100000000a1f27
- (void)arrowKeyReceivedInDirection:(unsigned long long)arg1 withModifierKeys:(id)arg2;	// IMP=0x00100000000a1eb0
@property(readonly, nonatomic) _Bool wantsRawArrowKeyEvents;
- (_Bool)wantsToInterceptDeleteEvents;	// IMP=0x00100000000a1ea0
@property(readonly, nonatomic) _Bool wantsVisibleKeyboard;
- (_Bool)wantsToReceiveTextInput;	// IMP=0x00100000000a1e90
@property(readonly, nonatomic) id <_TtP8Freeform20CRLKeyInputReceiving_> keyInputReceiver;
@property(readonly, nonatomic) id <CRLTextInputReceiving> textInputReceiver;
@property(readonly, nonatomic) id <CRLTextSelecting> textSelectionDelegate;
- (_Bool)shouldBeginTextInputWith:(id)arg1;	// IMP=0x00100000000a1e14
- (_Bool)wantsDoneButtonWhenEditing;	// IMP=0x00100000000a1e0c

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly, nonatomic) id <CRLSearchReference> editingSearchReference;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) double liftDelayOverride;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingAccessibilityDescription;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingAttribution;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingCalloutAttributes;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingConnectionLineAttributes;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingEditRecording;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingEndpoints;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingFill;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingFreehandAnimations;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingOpacity;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingReflection;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingResize;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingShadow;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingShrinkTextToFit;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingSmartShapeAttributes;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingStroke;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingTextInset;
@property(readonly) Class superclass;

@end

