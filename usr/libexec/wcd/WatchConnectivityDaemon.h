//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class IDSDevice, IDSService, NSMutableArray, NSMutableDictionary, NSSet, NSString, NSXPCListener, WCDFirstUnlockManager, WCDPairedSyncManager, WCDPrivateClient;
@protocol CLManagerInterface;

@interface WatchConnectivityDaemon : NSObject
{
    NSXPCListener *_xpcPrivateListener;	// 8 = 0x8
    WCDPrivateClient *_privateClient;	// 16 = 0x10
    WCDFirstUnlockManager *_firstUnlockManager;	// 24 = 0x18
    WCDPairedSyncManager *_pairedSyncManager;	// 32 = 0x20
    NSXPCListener *_xpcListener;	// 40 = 0x28
    NSMutableDictionary *_communicationIdentifierToClient;	// 48 = 0x30
    NSMutableDictionary *_sendIdentifierToHandler;	// 56 = 0x38
    NSMutableDictionary *_pendingMessageRequests;	// 64 = 0x40
    NSMutableArray *_readyBlocks;	// 72 = 0x48
    NSMutableDictionary *_coreLocationAssertions;	// 80 = 0x50
    NSMutableDictionary *_companionAppAssertions;	// 88 = 0x58
    NSSet *_counterpartClientCommunicationIdentifiers;	// 96 = 0x60
    id <CLManagerInterface> _locationManager;	// 104 = 0x68
    NSString *_idsServiceIdentifier;	// 112 = 0x70
    NSString *_idsInsecureServiceIdentifier;	// 120 = 0x78
    IDSService *_idsService;	// 128 = 0x80
    IDSService *_insecureIDSService;	// 136 = 0x88
}

+ (id)sharedDaemon;	// IMP=0x0020000000011854
- (void).cxx_destruct;	// IMP=0x002000000001ec44
@property(readonly) IDSService *insecureIDSService; // @synthesize insecureIDSService=_insecureIDSService;
@property(readonly) IDSService *idsService; // @synthesize idsService=_idsService;
@property(readonly) NSString *idsInsecureServiceIdentifier; // @synthesize idsInsecureServiceIdentifier=_idsInsecureServiceIdentifier;
@property(readonly) NSString *idsServiceIdentifier; // @synthesize idsServiceIdentifier=_idsServiceIdentifier;
@property(retain, nonatomic) id <CLManagerInterface> locationManager; // @synthesize locationManager=_locationManager;
- (id)createCLInUseTimerForIdentifier:(id)arg1;	// IMP=0x001000000001ea5b
- (void)releaseCLInUseAssertionForIdentifier:(id)arg1;	// IMP=0x001000000001e8f1
- (void)setCLTransientAuthorization:(id)arg1 withCoreLocationData:(id)arg2;	// IMP=0x001000000001e5ff
- (void)flushReadyBlocks;	// IMP=0x001000000001e4c2
- (void)service:(id)arg1 context:(id)arg2 performBlockWhenReady:(CDUnknownBlockType)arg3;	// IMP=0x001000000001e369
- (void)performBlockWhenReady:(CDUnknownBlockType)arg1;	// IMP=0x001000000001e2a1
- (void)persistAppContext:(id)arg1 applicationInfo:(id)arg2 pairingID:(id)arg3;	// IMP=0x001000000001df5b
- (void)storeComplicationUserInfoTransfer:(id)arg1 applicationInfo:(id)arg2 pairingID:(id)arg3;	// IMP=0x001000000001d7a1
- (id)moveUserInfoToClientInbox:(id)arg1 applicationInfo:(id)arg2 pairingID:(id)arg3 userInfoIdentifier:(id)arg4;	// IMP=0x001000000001d0d0
- (id)moveFileToClientInbox:(id)arg1 applicationInfo:(id)arg2 pairingID:(id)arg3 fileIdentifier:(id)arg4 userInfoData:(id)arg5 error:(id *)arg6;	// IMP=0x001000000001c6dc
- (void)notifyDuetOfPendingContentForCompanionAppID:(id)arg1 forComplication:(_Bool)arg2;	// IMP=0x001000000001c6d6
- (void)duetIdentifiersForCompanionAppID:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x001000000001c476
- (id)applicationInfoForCommunicationID:(id)arg1;	// IMP=0x001000000001c3c6
- (id)WCErrorForIDSError:(id)arg1;	// IMP=0x001000000001c017
- (id)pairingIDForIDSUniqueDeviceID:(id)arg1;	// IMP=0x001000000001bda8
- (id)dataFromUUIDString:(id)arg1;	// IMP=0x001000000001bcd8
- (const char *)descriptionFromPayloadSendType:(unsigned short)arg1;	// IMP=0x001000000001bcb0
- (void)updateClientWithValues:(id)arg1;	// IMP=0x001000000001bbe7
- (void)updateAllClientsWithValues;	// IMP=0x001000000001baa1
- (id)createBackgroundAssertionTimerForIdentifier:(id)arg1;	// IMP=0x001000000001b895
- (void)handleAquiredAssertion:(id)arg1 identifier:(id)arg2;	// IMP=0x001000000001b5e8
- (void)cleanUpProcessAssertionForIdentifier:(id)arg1;	// IMP=0x001000000001b417
- (void)acquireBackgroundAssertionForIdentifier:(id)arg1;	// IMP=0x001000000001b190
- (void)launchCompanionAppID:(id)arg1 isInUse:(_Bool)arg2 coreLocationData:(id)arg3;	// IMP=0x001000000001ad14
@property(readonly) IDSDevice *activeIDSDevice;
- (void)service:(id)arg1 didSwitchActivePairedDevice:(id)arg2 acknowledgementBlock:(CDUnknownBlockType)arg3;	// IMP=0x001000000001aafb
- (void)updateActiveDeviceConnectedForService:(id)arg1;	// IMP=0x001000000001aa74
- (void)service:(id)arg1 devicesChanged:(id)arg2;	// IMP=0x001000000001a9ac
- (void)service:(id)arg1 connectedDevicesChanged:(id)arg2;	// IMP=0x001000000001a8e4
- (void)service:(id)arg1 account:(id)arg2 incomingResourceAtURL:(id)arg3 metadata:(id)arg4 fromID:(id)arg5 context:(id)arg6;	// IMP=0x001000000001a522
- (void)service:(id)arg1 account:(id)arg2 incomingUnhandledProtobuf:(id)arg3 fromID:(id)arg4 context:(id)arg5;	// IMP=0x0010000000019721
- (void)service:(id)arg1 account:(id)arg2 identifier:(id)arg3 didSendWithSuccess:(_Bool)arg4 error:(id)arg5 context:(id)arg6;	// IMP=0x00100000000190a6
- (void)persistUserInfoTransferResult:(id)arg1 pairingID:(id)arg2 applicationInfo:(id)arg3 identifier:(id)arg4;	// IMP=0x0010000000018b48
- (_Bool)userInfoExistsForPairingID:(id)arg1 identifier:(id)arg2 applicationInfo:(id)arg3;	// IMP=0x00100000000189af
- (_Bool)notifyIfUserInfoTransferWithCommunicationID:(id)arg1 pairingID:(id)arg2 sendID:(id)arg3 success:(_Bool)arg4 error:(id)arg5;	// IMP=0x00100000000186e0
- (id)complicationUserInfoPathInDataContainer:(id)arg1 pairingID:(id)arg2;	// IMP=0x00100000000184fa
- (void)handleIncomingUserInfoURL:(id)arg1 communicationID:(id)arg2 pairingID:(id)arg3 sendID:(id)arg4;	// IMP=0x001000000001822e
- (void)transferUserInfo:(id)arg1 withMetadata:(id)arg2 identifier:(id)arg3 clientID:(id)arg4 clientPairingID:(id)arg5 errorHandler:(CDUnknownBlockType)arg6;	// IMP=0x0010000000017b8f
- (_Bool)errorIfPreconditionsNotSatisfiedWithClientPairingID:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000017a43
- (void)handleIncomingUserInfoTransferProto:(id)arg1 communicationID:(id)arg2 pairingID:(id)arg3 sendID:(id)arg4;	// IMP=0x0010000000017746
- (_Bool)sendComplicationUserInfo:(id)arg1 clientID:(id)arg2 clientPairingID:(id)arg3 identifier:(id)arg4 errorHandler:(CDUnknownBlockType)arg5;	// IMP=0x001000000001722c
- (_Bool)notifyIfFileTransferWithCommunicationID:(id)arg1 pairingID:(id)arg2 sendID:(id)arg3 success:(_Bool)arg4 error:(id)arg5;	// IMP=0x0010000000017050
- (void)persistFileTransferResult:(id)arg1 pairingID:(id)arg2 applicationInfo:(id)arg3 identifier:(id)arg4;	// IMP=0x0010000000016af2
- (_Bool)fileTransferExistsForPairingID:(id)arg1 identifier:(id)arg2 applicationInfo:(id)arg3;	// IMP=0x0010000000016959
- (void)handleIncomingFileURL:(id)arg1 communicationID:(id)arg2 pairingID:(id)arg3 sendID:(id)arg4 metadata:(id)arg5;	// IMP=0x0010000000016586
- (void)cancelSendWithIdentifier:(id)arg1;	// IMP=0x0010000000016456
- (void)transferFile:(id)arg1 withMetadata:(id)arg2 identifier:(id)arg3 forClient:(id)arg4 errorHandler:(CDUnknownBlockType)arg5;	// IMP=0x0010000000015c05
- (void)updateApplicationContext:(id)arg1 clientID:(id)arg2 clientPairingID:(id)arg3 errorHandler:(CDUnknownBlockType)arg4;	// IMP=0x00100000000157b6
- (void)dequeuePendingMessagesForCommunicationID:(id)arg1;	// IMP=0x0010000000015475
- (void)handleIncomingRequest:(id)arg1 withCommunicationID:(id)arg2 isInUse:(_Bool)arg3 coreLocationData:(id)arg4;	// IMP=0x0010000000015163
- (void)sendMessage:(id)arg1 withIdentifier:(id)arg2 isResponse:(_Bool)arg3 clientID:(id)arg4 clientPairingID:(id)arg5 errorHandler:(CDUnknownBlockType)arg6;	// IMP=0x0010000000014a31
- (void)handlePairedSyncComplicationsStartedAck:(id)arg1 identifier:(id)arg2;	// IMP=0x00100000000149ab
- (void)sendPairedSyncForComplicationsStartedAckWithIdentifier:(id)arg1 success:(_Bool)arg2;	// IMP=0x0010000000014928
- (void)privateClientConnectTimerFired;	// IMP=0x0010000000014922
- (void)forgetClientConnectTimer;	// IMP=0x001000000001491c
- (void)handlePairedSyncComplicationsStartedWithIdentifier:(id)arg1;	// IMP=0x0010000000014916
- (void)sendPairedSyncForComplicationsStartedWithIdentifier:(id)arg1;	// IMP=0x00100000000145c3
- (void)sendFirstUnlockAck:(id)arg1;	// IMP=0x001000000001430a
- (void)sendFirstUnlockRequest:(id)arg1;	// IMP=0x0010000000014051
- (void)sendFirstUnlockState:(id)arg1;	// IMP=0x0010000000013d98
- (void)dequeuePendingComplicationPings;	// IMP=0x0010000000013d92
- (void)handleComplicationPingForCommunicationIdentifier:(id)arg1;	// IMP=0x0010000000013d8c
- (void)addCounterpartClientCommunicationIdentifier:(id)arg1;	// IMP=0x0010000000013c87
- (void)handleInstalledAppsChangedMessage;	// IMP=0x0010000000013c81
- (void)sendInstalledAppsChangedMessage;	// IMP=0x001000000001396e
- (void)handleDaemonClientsInformation:(id)arg1;	// IMP=0x001000000001374a
- (void)sendDaemonClientsInformation;	// IMP=0x0010000000013707
- (void)handleCounterpartDaemonDidStart;	// IMP=0x00100000000136c4
- (void)sendDaemonDidStart;	// IMP=0x00100000000133f7
- (void)systemObserverUpdatingInstalledApps;	// IMP=0x001000000001337f
- (void)systemObserverAppDidTerminateForBundleID:(id)arg1;	// IMP=0x0010000000013286
- (void)systemObserverInstalledApplicationsChanged;	// IMP=0x00100000000130f5
- (void)systemObserverActiveDeviceSwitchStarted;	// IMP=0x00100000000130db
- (void)systemObserverInitialSetUpComplete;	// IMP=0x00100000000130ad
- (void)clientReachabilityDidChange:(id)arg1;	// IMP=0x001000000001301d
- (void)clientXPCConnectionDidDisconnect:(id)arg1;	// IMP=0x0010000000012e7d
- (void)dequeueContentForClient:(id)arg1;	// IMP=0x0010000000012d8f
- (_Bool)privateListenerShouldAcceptNewConnection:(id)arg1;	// IMP=0x0010000000012bc6
- (id)createNewClientObjectWithCommunicationID:(id)arg1 connection:(id)arg2;	// IMP=0x0010000000012a66
- (_Bool)listenerShouldAcceptNewConnection:(id)arg1;	// IMP=0x00100000000127d7
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;	// IMP=0x0010000000012738
- (void)loadPersistedClients;	// IMP=0x00100000000120ac
@property(readonly) NSString *state;
- (id)init;	// IMP=0x00100000000118d9

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

