//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class APSEnvironment, APSNoOpPowerAssertion, APSOutgoingMessageQueue, APSOutgoingQueue, APSProxyClient, APSPushHistory, APSTTLCollection, APSTokenStore, APSTopicHasher, APSTopicManager, APSWakeMetricTracker, CUTPowerAssertion, CUTWeakReference, MISSING_TYPE, NSArray, NSCountedSet, NSData, NSDate, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSString, NSTimer, PCPersistentTimer;
@protocol APSClientIdentityProvider, APSDebugOverrides, APSFilterVersionStateMachine, APSProtocolConnection, APSProtocolConnectionEstablisher, APSSystemTokenStorage, APSUser, APSUserAppIDManager, APSUserCourierDelegate;

@interface APSUserCourier : NSObject
{
    id <APSUserCourierDelegate> _delegate;	// 8 = 0x8
    APSEnvironment *_environment;	// 16 = 0x10
    CUTPowerAssertion *_delayedKeepAlivePowerAssertion;	// 24 = 0x18
    NSMutableDictionary *_connectionPortNamesToConnections;	// 32 = 0x20
    APSTopicManager *_topicManager;	// 40 = 0x28
    PCPersistentTimer *_pendingMessageReconnectTimer;	// 48 = 0x30
    PCPersistentTimer *_delayedReconnectTimer;	// 56 = 0x38
    PCPersistentTimer *_delayedSuspendKeepAliveTimer;	// 64 = 0x40
    NSNumber *_serverExpectedKeepAliveInterval;	// 72 = 0x48
    NSData *_lastReceivedPayloadHash;	// 80 = 0x50
    NSString *_lastReceivedTopic;	// 88 = 0x58
    double _lastReceivedTopicTime;	// 96 = 0x60
    NSNumber *_lastReceivedTimestamp;	// 104 = 0x68
    NSDate *_startedOpeningStream;	// 112 = 0x70
    NSDate *_keepAliveSent;	// 120 = 0x78
    NSDate *_timeSinceLastKeepAlive;	// 128 = 0x80
    double _lastKeepAliveFailureTime;	// 136 = 0x88
    APSWakeMetricTracker *_wakeMetricTracker;	// 144 = 0x90
    NSCountedSet *_inhibitedTopics;	// 152 = 0x98
    _Bool _isIdentityAvailable;	// 160 = 0xa0
    NSTimer *_resetInterfacePreferenceTimer;	// 168 = 0xa8
    unsigned long long _forceKeepAliveProxyInterfaceFailureCount;	// 176 = 0xb0
    unsigned long long _obtainKeepAliveProxyFailureCount;	// 184 = 0xb8
    unsigned long long _findKeepAliveProxyInterfaceFailureCount;	// 192 = 0xc0
    _Bool _firstPushSinceWake;	// 200 = 0xc8
    _Bool _preparingForSleep;	// 201 = 0xc9
    _Bool _lastHasConnectionsWithListeningTopics;	// 202 = 0xca
    APSNoOpPowerAssertion *_dataReceivedPowerAssertion;	// 208 = 0xd0
    _Bool _disconnectingStream;	// 216 = 0xd8
    NSTimer *_recreateCourierStateTimer;	// 224 = 0xe0
    APSNoOpPowerAssertion *_recreateCourierStatePowerAssertion;	// 232 = 0xe8
    long long _usersPotentiallyWithMessages;	// 240 = 0xf0
    double _lastUserConnectTime;	// 248 = 0xf8
    long long _successfulConnectionCount;	// 256 = 0x100
    APSNoOpPowerAssertion *_waitForStoredMessagesToArrivePowerAssertion;	// 264 = 0x108
    NSString *_lastReceivedTopicToCauseWake;	// 272 = 0x110
    double _lastReceivedTopicToCauseWakeTime;	// 280 = 0x118
    NSCountedSet *_topicsToCauseWake;	// 288 = 0x120
    NSCountedSet *_offendingTopics;	// 296 = 0x128
    double _startedDarkWake;	// 304 = 0x130
    NSString *_redirectHost;	// 312 = 0x138
    NSMutableDictionary *_proxyClients;	// 320 = 0x140
    APSProxyClient *_proxyClientWithOutstandingPresence;	// 328 = 0x148
    APSPushHistory *_pushHistory;	// 336 = 0x150
    APSTokenStore *_tokenStore;	// 344 = 0x158
    APSTopicHasher *_topicHasher;	// 352 = 0x160
    NSData *_cachedPublicToken;	// 360 = 0x168
    _Bool _shouldUseInternet;	// 368 = 0x170
    _Bool _shouldRun;	// 369 = 0x171
    _Bool _enabled;	// 370 = 0x172
    _Bool _enableCriticalReliability;	// 371 = 0x173
    _Bool _trackActivityPresence;	// 372 = 0x174
    unsigned long long _activityPresenceSalt;	// 376 = 0x178
    NSDate *_lastActivityPresenceSaltRoll;	// 384 = 0x180
    _Bool _isConnectedToService;	// 392 = 0x188
    NSDate *_lastConnectionAttempt;	// 400 = 0x190
    double _lastClientRequestedKeepaliveTime;	// 408 = 0x198
    double _lastLateCriticalOutgoingMessageAcknowledgmentReconnectTime;	// 416 = 0x1a0
    NSString *_latestGeoRegion;	// 424 = 0x1a8
    NSDate *_lastPresence;	// 432 = 0x1b0
    NSData *_certificate;	// 440 = 0x1b8
    NSData *_nonce;	// 448 = 0x1c0
    NSData *_signature;	// 456 = 0x1c8
    APSOutgoingMessageQueue *_outgoingMessageQueue;	// 464 = 0x1d0
    APSOutgoingQueue *_tokenRequestQueue;	// 472 = 0x1d8
    double _slowReceiveThreshold;	// 480 = 0x1e0
    NSMutableSet *_activeTaskServers;	// 488 = 0x1e8
    unsigned long long _nextTaskMessageId;	// 496 = 0x1f0
    CUTWeakReference *_weakSelf;	// 504 = 0x1f8
    APSTTLCollection *_tracingEnabledAcksCollection;	// 512 = 0x200
    double _delayedSuspendKeepAliveInterval;	// 520 = 0x208
    _Bool _pendingPostSuspensionWWANFlush;	// 528 = 0x210
    _Bool _hasFilterChanged;	// 529 = 0x211
    _Bool _locallyDisabledFilterOptimization;	// 530 = 0x212
    _Bool _serverDisabledFilterOptimization;	// 531 = 0x213
    unsigned int _disconnectReason;	// 532 = 0x214
    NSArray *_certificates;	// 536 = 0x218
    NSMutableArray *_connectionServers;	// 544 = 0x220
    NSString *_ifname;	// 552 = 0x228
    NSNumber *_currentMessageID;	// 560 = 0x230
    NSMutableArray *_subscriptionRequests;	// 568 = 0x238
    id <APSClientIdentityProvider> _clientIdentityProvider;	// 576 = 0x240
    id <APSSystemTokenStorage> _systemTokenStorage;	// 584 = 0x248
    id <APSFilterVersionStateMachine> _filterVersionStateMachine;	// 592 = 0x250
    id <APSDebugOverrides> _debugOverrides;	// 600 = 0x258
    NSMutableDictionary *_protocolConnectionByIdentifier;	// 608 = 0x260
    id <APSUser> _courierUser;	// 616 = 0x268
    id <APSUserAppIDManager> _userAppIDManager;	// 624 = 0x270
    NSMutableDictionary *_stateByConnectionIdentifier;	// 632 = 0x278
    id <APSProtocolConnectionEstablisher> _protocolConnectionEstablisher;	// 640 = 0x280
}

- (void).cxx_destruct;	// IMP=0x001000000003e654
@property(retain, nonatomic) id <APSProtocolConnectionEstablisher> protocolConnectionEstablisher; // @synthesize protocolConnectionEstablisher=_protocolConnectionEstablisher;
@property(retain, nonatomic) NSMutableDictionary *stateByConnectionIdentifier; // @synthesize stateByConnectionIdentifier=_stateByConnectionIdentifier;
@property(retain, nonatomic) id <APSUserAppIDManager> userAppIDManager; // @synthesize userAppIDManager=_userAppIDManager;
@property(retain, nonatomic) id <APSUser> courierUser; // @synthesize courierUser=_courierUser;
@property(retain, nonatomic) NSMutableDictionary *protocolConnectionByIdentifier; // @synthesize protocolConnectionByIdentifier=_protocolConnectionByIdentifier;
@property(retain, nonatomic) id <APSDebugOverrides> debugOverrides; // @synthesize debugOverrides=_debugOverrides;
@property(retain, nonatomic) id <APSFilterVersionStateMachine> filterVersionStateMachine; // @synthesize filterVersionStateMachine=_filterVersionStateMachine;
@property(retain, nonatomic) id <APSSystemTokenStorage> systemTokenStorage; // @synthesize systemTokenStorage=_systemTokenStorage;
@property(retain, nonatomic) id <APSClientIdentityProvider> clientIdentityProvider; // @synthesize clientIdentityProvider=_clientIdentityProvider;
@property(nonatomic) _Bool serverDisabledFilterOptimization; // @synthesize serverDisabledFilterOptimization=_serverDisabledFilterOptimization;
@property(nonatomic) _Bool locallyDisabledFilterOptimization; // @synthesize locallyDisabledFilterOptimization=_locallyDisabledFilterOptimization;
@property(nonatomic) _Bool hasFilterChanged; // @synthesize hasFilterChanged=_hasFilterChanged;
@property(nonatomic) unsigned int disconnectReason; // @synthesize disconnectReason=_disconnectReason;
@property(retain, nonatomic) NSMutableArray *subscriptionRequests; // @synthesize subscriptionRequests=_subscriptionRequests;
@property(retain, nonatomic) NSNumber *currentMessageID; // @synthesize currentMessageID=_currentMessageID;
@property(readonly, copy, nonatomic) NSString *latestGeoRegion; // @synthesize latestGeoRegion=_latestGeoRegion;
@property(readonly, copy, nonatomic) NSString *ifname; // @synthesize ifname=_ifname;
@property(retain, nonatomic) NSMutableArray *connectionServers; // @synthesize connectionServers=_connectionServers;
@property(nonatomic) _Bool enabled; // @synthesize enabled=_enabled;
@property(retain, nonatomic) NSDate *lastPresence; // @synthesize lastPresence=_lastPresence;
@property(copy, nonatomic) NSData *signature; // @synthesize signature=_signature;
@property(copy, nonatomic) NSData *nonce; // @synthesize nonce=_nonce;
@property(copy, nonatomic) NSArray *certificates; // @synthesize certificates=_certificates;
@property(readonly, retain, nonatomic) APSEnvironment *environment; // @synthesize environment=_environment;
@property(nonatomic) _Bool isConnectedToService; // @synthesize isConnectedToService=_isConnectedToService;
@property(nonatomic) __weak id <APSUserCourierDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_sendQueuedOutgoingMessages;	// IMP=0x001000000003dff8
- (void)_sendOutgoingMessage:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000003d801
- (void)_sendActiveStateMessageWithSendAllBlueListMessages:(_Bool)arg1;	// IMP=0x001000000003d6cd
- (void)_finishDisconnectForInterface:(id)arg1;	// IMP=0x001000000003d3af
- (void)_disconnectTokenWithReason:(unsigned int)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000003d00b
- (void)_sendFilterMessageOnProtocolConnection:(id)arg1 withReason:(unsigned long long)arg2;	// IMP=0x001000000003c40f
- (id)_topicsByHashFromTopicStateDictionary:(id)arg1;	// IMP=0x001000000003c1f0
- (void)_requestToSendFilterOnTopicManager:(id)arg1;	// IMP=0x001000000003c077
- (void)_sendPresenceMessageOnProtocolConnection:(id)arg1 serverTime:(id)arg2;	// IMP=0x001000000003bd11
- (void)_didFinishAssertingAllPresences:(id)arg1;	// IMP=0x001000000003b960
- (void)handleDisconnectForInterface:(id)arg1 connectionState:(long long)arg2 withReason:(unsigned int)arg3;	// IMP=0x001000000003af38
- (void)_handleOutgoingMessageAcknowledgment:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000003aca1
- (id)_copyParsedPayload:(id)arg1;	// IMP=0x001000000003a993
- (void)_handleMessageMessage:(id)arg1 onProtocolConnection:(id)arg2 withGeneration:(unsigned long long)arg3 isWakingMessage:(_Bool)arg4 fromAgent:(_Bool)arg5;	// IMP=0x0010000000038421
- (_Bool)_wakeCausedByTopic:(id)arg1 interface:(id)arg2 priorityVal:(unsigned long long)arg3 inAllowlist:(_Bool)arg4;	// IMP=0x001000000003834b
- (void)_notifyForIncomingMessage:(id)arg1 forConnection:(id)arg2;	// IMP=0x0010000000037cf3
- (void)_notifyForIncomingMessage:(id)arg1;	// IMP=0x0010000000037cdf
- (void)_forceReconnectionsWithReason:(unsigned int)arg1;	// IMP=0x0010000000037ba8
- (void)_handleConnectedMessage:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000003639f
- (void)receivedConnectedResponseWithParameters:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x0010000000036042
- (void)_handlePresenceOffline:(id)arg1;	// IMP=0x0010000000035f6b
- (void)connectionDidOpenonProtocolConnection:(id)arg1 secureHandshakeEnabled:(_Bool)arg2;	// IMP=0x0010000000035f57
- (void)updateForReceivedConfig:(id)arg1;	// IMP=0x0010000000035c05
- (_Bool)expectsResponseForFilterMessageOnProtocolConnection:(id)arg1 forClient:(id)arg2;	// IMP=0x0010000000035970
- (_Bool)expectsResponseForFilterMessageOnProtocolConnection:(id)arg1;	// IMP=0x0010000000035716
- (_Bool)hasOutOfDateFilterOnProtocolConnection:(id)arg1;	// IMP=0x0010000000035665
- (_Bool)shouldOnlySendFilterOnPreferredInterface;	// IMP=0x0010000000035428
- (void)receivedFilterResponseWithParameters:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x0010000000034bf6
- (void)protocolConnection:(id)arg1 receivedFilterUpdateWithParameters:(id)arg2;	// IMP=0x0010000000034567
- (void)protocolConnection:(id)arg1 receivedPresenceTrackingRequestWithParameters:(id)arg2;	// IMP=0x001000000003454c
- (void)protocolConnection:(id)arg1 receivedTaskNotificationWithParameters:(id)arg2;	// IMP=0x00100000000342d0
- (void)protocolConnection:(id)arg1 receivedTaskControlWithParameters:(id)arg2;	// IMP=0x0010000000034096
- (void)protocolConnection:(id)arg1 receivedNoStorageWithParameters:(id)arg2;	// IMP=0x0010000000034081
- (void)protocolConnection:(id)arg1 receivedPubSubChannelListWithParameters:(id)arg2;	// IMP=0x0010000000034067
- (void)protocolConnection:(id)arg1 receivedPubSubChannelUpdateWithParameters:(id)arg2;	// IMP=0x001000000003404c
- (void)protocolConnection:(id)arg1 receivedMessageWithParameters:(id)arg2 generation:(unsigned long long)arg3 isWaking:(_Bool)arg4;	// IMP=0x0010000000034021
- (void)protocolConnection:(id)arg1 receivedOfflinePresencekWithParameters:(id)arg2;	// IMP=0x001000000003400c
- (_Bool)shouldHandleIncomingPush:(id)arg1 forProtocolConnection:(id)arg2;	// IMP=0x0010000000033c07
- (void)outgoingDataAboutToSendForProtocolConnection:(id)arg1;	// IMP=0x0010000000033b2e
- (void)efficientToUseChangedForProtocolConnection:(id)arg1;	// IMP=0x0010000000033b1c
- (void)protocolConnection:(id)arg1 encounteredError:(id)arg2;	// IMP=0x0010000000033b16
- (void)failedToConnectOnProtocolConnection:(id)arg1;	// IMP=0x0010000000033b04
- (void)didSuspendProtocolConnection:(id)arg1;	// IMP=0x0010000000033a28
- (void)didRecoverFromSuspensionOnProtocolConnection:(id)arg1;	// IMP=0x0010000000033958
- (void)protocolConnection:(id)arg1 didDisconnectWithConnectionState:(long long)arg2 reason:(unsigned int)arg3;	// IMP=0x0010000000033946
- (id)stateForProtocolConnection:(id)arg1;	// IMP=0x00100000000338a5
- (void)beginTrackingProtocolConnection:(id)arg1;	// IMP=0x00100000000335dd
- (void)enumerateConnectedProtocolConnectionsOfType:(long long)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x0010000000033407
- (void)enumerateConnectedProtocolConnections:(CDUnknownBlockType)arg1;	// IMP=0x001000000003325e
- (id)connectedInterfaceForIdentifier:(id)arg1;	// IMP=0x00100000000331e4
- (_Bool)hasConnectedInterfaceForIdentifier:(id)arg1;	// IMP=0x0010000000033161
- (_Bool)hasConnectedInterfaceOfType:(long long)arg1;	// IMP=0x0010000000032fb0
- (_Bool)hasProtocolConnectionInterfaceOfType:(long long)arg1;	// IMP=0x0010000000032e40
@property(readonly, nonatomic) _Bool hasConnectedInterface;
- (long long)countOfConnectedInterface;	// IMP=0x0010000000032b6d
@property(readonly, nonatomic) id <APSProtocolConnection> preferredProtocolConnection;
- (void)_tryConnectingOrDisconnectingTokens;	// IMP=0x0010000000032900
- (void)_useInteractivePowerAssertionIfNeededForConnectionServer:(id)arg1 withReason:(id)arg2;	// IMP=0x00100000000327ca
- (void)_clearTopicsForGuestUser;	// IMP=0x0010000000032586
- (void)flush;	// IMP=0x001000000003218f
- (void)logout;	// IMP=0x0010000000031c00
- (unsigned long long)getNextTaskMessageId;	// IMP=0x0010000000031be8
- (void)removeTaskServer:(id)arg1;	// IMP=0x0010000000031bcf
- (void)addTaskServer:(id)arg1;	// IMP=0x0010000000031bb6
- (void)sendTaskControlMessageWithMetadata:(id)arg1 messageId:(unsigned long long)arg2;	// IMP=0x0010000000031b3f
- (void)prepareForFullWake;	// IMP=0x0010000000031a62
- (void)prepareForDarkWake;	// IMP=0x0010000000031984
- (void)prepareForSleep;	// IMP=0x0010000000031892
- (void)_handleNoStorageMessage:(id)arg1;	// IMP=0x001000000003188c
- (void)clientIdentityDidBecomeUnavailable;	// IMP=0x0010000000031782
- (void)clientIdentityDidBecomeAvailable;	// IMP=0x0010000000031659
- (void)_fireRecreateCourierStateTimer;	// IMP=0x001000000003162b
- (void)_recreateCourierStateTimerFired:(id)arg1;	// IMP=0x001000000003154b
- (void)_clearRecreateCourierStateTimer;	// IMP=0x00100000000314fa
- (_Bool)_hasPendingRecreateCourierStateTimer;	// IMP=0x00100000000314e9
- (void)_startRecreateCourierStateTimerBePatient:(_Bool)arg1;	// IMP=0x001000000003124e
- (_Bool)shouldForceShortTimeouts;	// IMP=0x0010000000031205
- (void)outgoingMessageQueue:(id)arg1 requestToSendLowPriorityMessages:(id)arg2;	// IMP=0x0010000000030f9e
- (void)outgoingMessageQueue:(id)arg1 requestCriticalMessageFlushWithPaddingLength:(unsigned long long)arg2;	// IMP=0x0010000000030e7f
- (void)outgoingMessageQueueShortMessageTimeoutExceeded:(id)arg1;	// IMP=0x0010000000030d99
- (void)outgoingMessageQueue:(id)arg1 lateAcknowledgmentForCriticalOutgoingMessage:(id)arg2;	// IMP=0x0010000000030b1e
- (id)getConnectionTypeFromProtocolConnection:(id)arg1;	// IMP=0x0010000000030ab8
- (void)topicManagerRequestToSendFilter:(id)arg1;	// IMP=0x0010000000030986
- (_Bool)_processPotentialIdentityChanged;	// IMP=0x00100000000308e3
- (void)_processShouldUseInternetChangeIfNecessary;	// IMP=0x0010000000030404
- (void)_processShouldRunChangeIfNecessary;	// IMP=0x00100000000302dd
- (void)_processStoredOutgoingMessages;	// IMP=0x00100000000302d7
- (void)_processStoredIncomingMessages;	// IMP=0x001000000002ff71
- (void)_handleLostPushTokens;	// IMP=0x001000000002fe69
- (void)_recreateCacheDictionaries;	// IMP=0x001000000002fcac
- (void)_recreateCourierState;	// IMP=0x001000000002f7fa
- (void)processIsPowerEfficientToSendChange;	// IMP=0x001000000002f5ec
- (void)_processInvalidIdentity;	// IMP=0x001000000002f55d
- (MISSING_TYPE *)systemDidUnlock;	// IMP=0x001000000002f42d
- (void)systemDidLock;	// IMP=0x001000000002f303
- (void)_deleteClientIdentityRequestingReplacement;	// IMP=0x001000000002f21f
- (struct __SecIdentity *)_getClientIdentity;	// IMP=0x001000000002f1db
- (void)generateCert:(id *)arg1 nonce:(id *)arg2 sig:(id *)arg3 time:(id)arg4;	// IMP=0x001000000002eeb9
- (void)_clearCachedSigNonceCert;	// IMP=0x001000000002edd9
- (void)refreshCertNonceAndSignatureWithServerTime:(id)arg1;	// IMP=0x001000000002ebaa
- (void)client:(id)arg1 sendPubSubChannelList:(id)arg2 token:(id)arg3;	// IMP=0x001000000002eb95
- (void)client:(id)arg1 messageTracingWithStatus:(int)arg2 topic:(id)arg3 tracingUUID:(id)arg4 token:(id)arg5;	// IMP=0x001000000002e938
- (void)client:(id)arg1 requestTokenGenerateWithTopicHash:(id)arg2 baseToken:(id)arg3 appId:(id)arg4 expirationTTL:(id)arg5 vapidPublicKeyHash:(id)arg6 type:(id)arg7;	// IMP=0x001000000002e2b3
- (void)client:(id)arg1 requestSendOutgoingMessage:(id)arg2;	// IMP=0x001000000002dd2f
- (void)client:(id)arg1 requestPushAckResponse:(id)arg2 messageId:(id)arg3 token:(id)arg4 connectionType:(id)arg5 generation:(id)arg6;	// IMP=0x001000000002d8ae
- (void)clientBecameInactive:(id)arg1;	// IMP=0x001000000002d7c7
- (void)requestFilterForClient:(id)arg1;	// IMP=0x001000000002d539
- (void)pushTokenBecameInvalidForClient:(id)arg1;	// IMP=0x001000000002d45e
- (void)_sendClientFilter:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000002cbcd
- (void)_processPendingProxyPresences;	// IMP=0x001000000002bb50
- (void)_clearPendingProxyPresence;	// IMP=0x001000000002b859
- (void)incomingPresenceWithGuid:(id)arg1 token:(id)arg2 hwVersion:(id)arg3 swVersion:(id)arg4 swBuild:(id)arg5 certificate:(id)arg6 nonce:(id)arg7 signature:(id)arg8;	// IMP=0x001000000002b454
- (void)canUseProxyChanged;	// IMP=0x001000000002b3a7
- (unsigned long long)_countConnectedClients;	// IMP=0x001000000002b201
- (unsigned long long)_countActiveClients;	// IMP=0x001000000002b05b
- (id)_findClientWithToken:(id)arg1;	// IMP=0x001000000002ae0b
- (id)_findConnectedClientWithToken:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000002ab1e
- (id)_findActiveClientWithToken:(id)arg1;	// IMP=0x001000000002a89e
- (void)periodicSignalFired;	// IMP=0x001000000002a326
- (void)invalidateDeviceIdentity;	// IMP=0x001000000002a279
- (void)ttlCollection:(id)arg1 itemsDidExpire:(id)arg2 withStates:(id)arg3;	// IMP=0x001000000002a145
- (void)connectionDidClientDisconnect:(id)arg1;	// IMP=0x001000000002a03f
- (void)connection:(id)arg1 didReceiveIncomingMessageReceiptWithTopic:(id)arg2 tracingUUID:(id)arg3;	// IMP=0x0010000000029e01
- (void)connection:(id)arg1 handleAckIncomingMessageWithGuid:(id)arg2 topic:(id)arg3 tracingUUID:(id)arg4;	// IMP=0x0010000000029b3f
- (void)connection:(id)arg1 didReceiveFakeMessageToSend:(id)arg2;	// IMP=0x00100000000293b6
- (void)connection:(id)arg1 didReceiveCancellationForOutgoingMessageWithID:(unsigned long long)arg2;	// IMP=0x00100000000292f0
- (void)connection:(id)arg1 didReceiveUnsubscribeToChannels:(id)arg2 forTopic:(id)arg3;	// IMP=0x0010000000029262
- (void)connection:(id)arg1 didReceiveSubscribeToChannels:(id)arg2 forTopic:(id)arg3;	// IMP=0x00100000000291d4
- (void)connection:(id)arg1 didReceiveOutgoingMessageToSend:(id)arg2;	// IMP=0x0010000000028cca
- (void)connection:(id)arg1 subscribeToPreviouslyIgnoredTopics:(id)arg2;	// IMP=0x0010000000028cb5
- (void)noteOutgoingDataOnProtocolConnection:(id)arg1;	// IMP=0x0010000000028ba0
- (void)_enqueueMessage:(id)arg1 forOriginator:(id)arg2;	// IMP=0x00100000000286ad
- (void)connectionChangedTrackActivityPresence:(id)arg1;	// IMP=0x00100000000285d7
- (void)connectionChangedCriticalReliability:(id)arg1;	// IMP=0x00100000000284c5
- (_Bool)connectionDelegateHasConnectedUser:(id)arg1;	// IMP=0x001000000002849f
- (_Bool)connectionDelegateIsConnectedToService:(id)arg1;	// IMP=0x0010000000028493
- (_Bool)connectionDelegateHasIdentity:(id)arg1;	// IMP=0x0010000000028481
- (void)__performIdleCheck;	// IMP=0x001000000002834f
- (void)_performIdleCheck;	// IMP=0x00100000000282c8
- (void)connectionWasOpened:(id)arg1;	// IMP=0x00100000000281c0
- (void)connectionWasClosed:(id)arg1;	// IMP=0x0010000000027f4a
- (void)__processStoredIncomingMessagesForConnection:(id)arg1;	// IMP=0x0010000000027cf6
- (void)_processStoredIncomingMessagesForConnection:(id)arg1;	// IMP=0x0010000000027c64
- (void)connectionTopicsChanged:(id)arg1;	// IMP=0x0010000000027bd5
- (void)removeConnectionForConnectionPortName:(id)arg1;	// IMP=0x0010000000027b70
- (id)connectionForConnectionPortName:(id)arg1;	// IMP=0x0010000000027b5a
- (void)addConnection:(id)arg1;	// IMP=0x00100000000279ca
- (void)_logTopics;	// IMP=0x001000000002703c
- (void)__dumpLogsForInconsistencyIfNecessary;	// IMP=0x0010000000027036
- (void)_dumpLogsForInconsistencyIfNecessary;	// IMP=0x0010000000026fc7
- (void)_triggerAutoBugCaptureIfMessageIsRetried:(id)arg1;	// IMP=0x0010000000026ef7
- (void)appendPrettyStatusToStatusPrinter:(id)arg1;	// IMP=0x0010000000025e27
- (id)JSONDebugState;	// IMP=0x00100000000255fc
- (id)aps_prettyDescription;	// IMP=0x00100000000250b4
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
- (id)verboseDescription;	// IMP=0x0010000000024aa8
- (void)logStateWithReason:(id)arg1;	// IMP=0x00100000000249a0
- (_Bool)willBeAbleToConnect;	// IMP=0x0010000000024971
- (_Bool)_requestKeepAliveProxy;	// IMP=0x0010000000024969
- (_Bool)_isInteractivePushDuringSleepEnabledForConnectionServer:(id)arg1;	// IMP=0x0010000000024961
@property(readonly, retain, nonatomic) NSData *publicToken; // @dynamic publicToken;
- (unsigned int)_connectionTypeForInterface:(id)arg1;	// IMP=0x001000000002487a
- (_Bool)_hasListeningTopics;	// IMP=0x0010000000024790
- (_Bool)hasReasonToConnect;	// IMP=0x0010000000024771
- (_Bool)isConnectableRightNow;	// IMP=0x0010000000024752
- (_Bool)isKeepAliveProxyConfigured;	// IMP=0x00100000000246e9
- (_Bool)isInteractivePushDuringSleepEnabled;	// IMP=0x0010000000024567
- (_Bool)isIdle;	// IMP=0x001000000002455f
- (_Bool)wantsCriticalReliability;	// IMP=0x0010000000024421
- (_Bool)hasEagerMessages;	// IMP=0x0010000000024408
- (_Bool)_useShortKeepAliveInterval;	// IMP=0x0010000000024400
- (_Bool)isCellularWatch;	// IMP=0x00100000000243f8
@property(readonly, nonatomic) _Bool shouldUseInternet;
- (_Bool)shouldRun;	// IMP=0x001000000002435e
- (void)setLargeMessageSize:(unsigned long long)arg1;	// IMP=0x0010000000023f7b
- (unsigned long long)largeMessageSize;	// IMP=0x0010000000023f37
- (void)setMessageSize:(unsigned long long)arg1;	// IMP=0x0010000000023c8e
@property(readonly, nonatomic) unsigned long long messageSize; // @dynamic messageSize;
- (void)setPublicToken:(id)arg1 fromServer:(_Bool)arg2;	// IMP=0x0010000000023859
- (void)_adjustIsConnectedToService;	// IMP=0x00100000000235b1
- (unsigned long long)overallCourierStatus;	// IMP=0x001000000002343f
@property(readonly, nonatomic) _Bool hasIdentity;
- (id)_getCurrentTokens;	// IMP=0x00100000000233c5
- (id)copyOperatorName;	// IMP=0x001000000002336e
- (id)topicManager;	// IMP=0x0010000000023360
- (id)_proxyManager;	// IMP=0x001000000002331d
- (void)dealloc;	// IMP=0x0010000000022fd6
- (id)initWithEnvironment:(id)arg1 courierUser:(id)arg2 userPreferences:(id)arg3 clientIdentityProvider:(id)arg4 userAppIDManager:(id)arg5 systemTokenStorage:(id)arg6 filterVersionStateMachine:(id)arg7 debugOverrides:(id)arg8 delegate:(id)arg9 withConnectionEstablisher:(id)arg10 tokenStore:(id)arg11 tokenRequestQueue:(id)arg12;	// IMP=0x001000000002242a
- (id)initWithEnvironment:(id)arg1 courierUser:(id)arg2 userPreferences:(id)arg3 clientIdentityProvider:(id)arg4 userAppIDManager:(id)arg5 systemTokenStorage:(id)arg6 delegate:(id)arg7 withConnectionEstablisher:(id)arg8;	// IMP=0x0010000000022177
- (void)_handlePresenceTrackingResponse:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x001000000003f6c3
- (void)_generateSalt;	// IMP=0x001000000003f5d3
- (void)attemptToRollSalt;	// IMP=0x001000000003f1a0
- (_Bool)protocolConnectionHasSentActivityTrackingSalt:(id)arg1;	// IMP=0x001000000003f0da
- (void)markProtocolConnectionDisconnectedForActivityTracking:(id)arg1;	// IMP=0x001000000003efe1
- (void)sendPresenceTrackingRequestOnProtocolConnection:(id)arg1;	// IMP=0x001000000003eda3
- (void)recalculateTrackActivityPresence;	// IMP=0x001000000003e966
- (void)_handleAppTokenGenerateResponse:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x0010000000043b1e
- (id)urlPrefix;	// IMP=0x00100000000439e9
- (id)connection:(id)arg1 createURLTokenForToken:(id)arg2;	// IMP=0x0010000000043927
- (void)connection:(id)arg1 didInvalidateTokenForInfo:(id)arg2;	// IMP=0x001000000004351f
- (void)connection:(id)arg1 didRequestCurrentTokenForInfo:(id)arg2;	// IMP=0x0010000000043202
- (void)connection:(id)arg1 didRequestTokenForInfo:(id)arg2;	// IMP=0x0010000000041b83
- (void)saveToken:(id)arg1 forInfo:(id)arg2 connection:(id)arg3;	// IMP=0x0010000000041a14
- (void)performAppTokenCleanup;	// IMP=0x001000000004122c
- (void)_registerAppTokenCleanup;	// IMP=0x0010000000040ea0
- (void)_cancelRequest:(id)arg1;	// IMP=0x00100000000b8613
- (void)_handlePubSubChannelListRequestonProtocolConnection:(id)arg1;	// IMP=0x00100000000b85a8
- (void)_requestClientPubSubChannelList:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x00100000000b8556
- (void)_sendProxyChannelList:(id)arg1;	// IMP=0x00100000000b82b9
- (id)updateChannelForIncomingMessageWithData:(id)arg1 forTopic:(id)arg2;	// IMP=0x00100000000b7fff
- (_Bool)shouldDropPubSubMessageWithData:(id)arg1 forTopic:(id)arg2;	// IMP=0x00100000000b7d60
- (int)_protoUpdateFailureToReadableFailure:(int)arg1;	// IMP=0x00100000000b7d54
- (void)_handleChannelUpdateCommand:(id)arg1;	// IMP=0x00100000000b7455
- (void)_handleSubscriptionUpdateCommand:(id)arg1 token:(id)arg2 protocolConnection:(id)arg3;	// IMP=0x00100000000b7203
- (void)_handlePubSubUpdateMessage:(id)arg1 onProtocolConnection:(id)arg2;	// IMP=0x00100000000b6f64
- (id)_getNextMessageID;	// IMP=0x00100000000b6e8a
- (void)subscribeToPreviouslyIgnoredTopics:(id)arg1;	// IMP=0x00100000000b6c50
- (void)_resetCheckpointForIgnoredTopics:(id)arg1;	// IMP=0x00100000000b6877
- (void)handleIgnoredTopics:(id)arg1;	// IMP=0x00100000000b662a
- (void)sendFailuresToClient:(id)arg1 pushTopic:(id)arg2;	// IMP=0x00100000000b62c1
- (int)_protoSubscriptionFailureToReadableFailure:(int)arg1;	// IMP=0x00100000000b62b5
- (_Bool)_isResponseForProxyDevice:(id)arg1;	// IMP=0x00100000000b6045
- (void)_handlePubSubSubscriptionResponse:(id)arg1 fromAgent:(_Bool)arg2 onProtocolConnection:(id)arg3;	// IMP=0x00100000000b4f9c
- (void)_removePendingRequestsForProtocolConnection:(id)arg1;	// IMP=0x00100000000b4d6d
- (void)_writePubSubMessagetoConnection:(id)arg1 messageID:(unsigned int)arg2 token:(id)arg3 connectionType:(long long)arg4;	// IMP=0x00100000000b4c29
- (void)_sendPubsubConnectMessageOnProtocolConnection:(id)arg1 token:(id)arg2;	// IMP=0x00100000000b48cf
- (id)allRegisteredChannelsForTopic:(id)arg1;	// IMP=0x00100000000b47b6
- (void)_retryRequestAfterDelay:(id)arg1 withDelay:(double)arg2;	// IMP=0x00100000000b4213
- (void)_retryRequestAfterDelay:(id)arg1;	// IMP=0x00100000000b4107
- (void)_handlePubSubRequest:(id)arg1 unsubscriptionChannels:(id)arg2 token:(id)arg3;	// IMP=0x00100000000b39f7
- (void)unsubscribeFromChannels:(id)arg1 forTopic:(id)arg2 token:(id)arg3;	// IMP=0x00100000000b346f
- (void)subscribeToChannels:(id)arg1 forTopic:(id)arg2 token:(id)arg3;	// IMP=0x00100000000b2e25

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

