//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CloudPhotoLibrary/CPLPlatformObject.h>

@class CPLChangeSessionUpdate, CPLPrequeliteClientCacheMigrator, CPLPrequeliteTable, CPLPrequeliteVariable, CPLSimpleUpgradeHistory, MISSING_TYPE, NSArray, NSDate, NSMutableArray, NSMutableDictionary, NSMutableSet, NSObject, NSString, NSURL, PQLConnection;
@protocol OS_dispatch_queue;

@interface CPLPrequeliteStore : CPLPlatformObject
{
    NSObject<OS_dispatch_queue> *_queue;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_writeQueue;	// 16 = 0x10
    PQLConnection *_db;	// 24 = 0x18
    NSURL *_dbURL;	// 32 = 0x20
    _Bool _configuringDB;	// 40 = 0x28
    NSMutableSet *_modifiedVariables;	// 48 = 0x30
    id _globalVariableCacheIdentifier;	// 56 = 0x38
    CPLPrequeliteTable *_globals;	// 64 = 0x40
    CPLPrequeliteVariable *_libraryVersionVar;	// 72 = 0x48
    CPLPrequeliteVariable *_userIdentifierVar;	// 80 = 0x50
    CPLPrequeliteVariable *_lastQuarantineCountReportDateVar;	// 88 = 0x58
    CPLPrequeliteVariable *_clientCacheIdentifierVar;	// 96 = 0x60
    CPLPrequeliteVariable *_clientCacheIdentifierAsKnownByClient;	// 104 = 0x68
    CPLPrequeliteVariable *_libraryCreationDateVar;	// 112 = 0x70
    CPLPrequeliteVariable *_changeSessionUpdateVar;	// 120 = 0x78
    CPLPrequeliteVariable *_pushPullGatekeepersVar;	// 128 = 0x80
    _Bool _hasCachedChangeSessionUpdate;	// 136 = 0x88
    CPLChangeSessionUpdate *_cachedChangeSessionUpdate;	// 144 = 0x90
    _Bool _hasCachedPushPullGatekeepers;	// 152 = 0x98
    _Bool _hasModifiedPushPullGatekeepers;	// 153 = 0x99
    NSArray *_cachedPushPullGatekeepers;	// 160 = 0xa0
    CPLPrequeliteVariable *_libraryOptionsVar;	// 168 = 0xa8
    CPLPrequeliteVariable *_shouldUpdateDisabledFeaturesVar;	// 176 = 0xb0
    CPLPrequeliteVariable *_disabledFeaturesDataVar;	// 184 = 0xb8
    CPLSimpleUpgradeHistory *_history;	// 192 = 0xc0
    CPLPrequeliteVariable *_derivativesFilterVar;	// 200 = 0xc8
    CPLPrequeliteVariable *_deactivatedVar;	// 208 = 0xd0
    CPLPrequeliteVariable *_universeNameVar;	// 216 = 0xd8
    Class _userIdentifierClass;	// 224 = 0xe0
    NSObject<OS_dispatch_queue> *_isClientInSyncWithClientCacheQueue;	// 232 = 0xe8
    _Bool _isClientInSyncWithClientCache;	// 240 = 0xf0
    unsigned long long _resetOption;	// 248 = 0xf8
    NSString *_resetReason;	// 256 = 0x100
    NSString *_wipeReason;	// 264 = 0x108
    _Bool _failInsteadOfWipe;	// 272 = 0x110
    _Bool _needsToReset;	// 273 = 0x111
    _Bool _reentrencyGuard;	// 274 = 0x112
    _Bool _didWipeLibrary;	// 275 = 0x113
    int _upgradeEventJournal;	// 276 = 0x114
    _Bool _mustFix22666940;	// 280 = 0x118
    _Bool _mustMigratePushQueue;	// 281 = 0x119
    NSMutableArray *_postUpgradeMigrations;	// 288 = 0x120
    CPLPrequeliteClientCacheMigrator *_clientCacheMigrator;	// 296 = 0x128
    _Bool _hasScheduledClientCacheDrop;	// 304 = 0x130
    NSObject<OS_dispatch_queue> *_vacuumQueue;	// 312 = 0x138
    _Bool _executingVacuum;	// 320 = 0x140
    _Bool _shouldProfile;	// 321 = 0x141
    _Bool _showStatsForAllTransactions;	// 322 = 0x142
    double _lastLongTransactionDate;	// 328 = 0x148
    NSMutableDictionary *_transactionStatistics;	// 336 = 0x150
    NSDate *_libraryCreationDate;	// 344 = 0x158
}

+ (void)setShouldWarnUserBeforeWipeOnUpgrade:(_Bool)arg1;	// IMP=0x0020000000038058
+ (_Bool)shouldWarnUserBeforeWipeOnUpgrade;	// IMP=0x001000000003804c
+ (void)setShouldPreventWipeOnUpgrade:(_Bool)arg1;	// IMP=0x0010000000038039
+ (_Bool)shouldPreventWipeOnUpgrade;	// IMP=0x0010000000037fb2
- (void).cxx_destruct;	// IMP=0x00200000000452d8
@property(readonly) NSDate *libraryCreationDate; // @synthesize libraryCreationDate=_libraryCreationDate;
- (id)redactedDescription;	// IMP=0x00100000000451bb
@property(readonly, copy) NSString *description;
- (_Bool)deleteDynamicallyCreatedStorages:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000044d08
- (_Bool)createStoragesDynamically:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000449d4
- (void)markAsCorrupted;	// IMP=0x00100000000447a2
- (void)emergencyClose;	// IMP=0x0010000000044421
- (void)stopVacuum;	// IMP=0x001000000004433f
- (void)startVacuum;	// IMP=0x0010000000044126
- (void)_vacuum:(long long)arg1 withInitialDatabaseSize:(long long)arg2;	// IMP=0x0010000000043b1b
- (long long)_sizeInBytes;	// IMP=0x0010000000043a4d
- (id)transientPullRepository;	// IMP=0x00100000000439d3
- (id)cloudCache;	// IMP=0x0010000000043959
- (id)clientCache;	// IMP=0x0010000000043925
- (_Bool)hasTable:(id)arg1;	// IMP=0x00100000000438d2
- (_Bool)table:(id)arg1 hasColumnWithName:(id)arg2;	// IMP=0x00100000000437c5
- (void)table:(id)arg1 enumerateCountGroupedByProperty:(id)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x00100000000436a6
- (void)table:(id)arg1 enumerateCountGroupedByUnsignedIntegerProperty:(id)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x0010000000043598
- (unsigned long long)table:(id)arg1 countOfRecordsMatchingQuery:(id)arg2;	// IMP=0x00100000000434f0
- (unsigned long long)tableCountOfRecords:(id)arg1;	// IMP=0x001000000004346a
- (_Bool)table:(id)arg1 hasRecordsMatchingQuery:(id)arg2;	// IMP=0x00100000000433d1
- (_Bool)tableHasRecords:(id)arg1;	// IMP=0x0010000000043358
- (void)recordUpgradeEvent:(id)arg1 arguments:(struct __va_list_tag [1])arg2;	// IMP=0x001000000004327c
- (void)recordUpgradeEvent:(id)arg1;	// IMP=0x00100000000431d8
- (id)status;	// IMP=0x0010000000043108
- (void)transactionDidFinish;	// IMP=0x0010000000043102
- (void)writeTransactionDidFail;	// IMP=0x0010000000042f5b
- (void)writeTransactionDidSucceed;	// IMP=0x0010000000042f3e
- (void)wipeStoreAtNextOpeningWithReason:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x0010000000042ce5
- (void)_deleteWipeReason;	// IMP=0x0010000000042b36
- (id)wipeReason;	// IMP=0x0010000000042a7f
- (id)_wipeStoreMarkerURL;	// IMP=0x00100000000429d7
- (_Bool)storeDerivativesFilter:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000042932
- (id)derivativesFilter;	// IMP=0x00100000000428b5
- (id)disabledFeatures;	// IMP=0x00100000000427fb
- (_Bool)storeDisabledFeatures:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000042710
- (_Bool)setShouldUpdateDisabledFeaturesWithError:(id *)arg1;	// IMP=0x00100000000426e9
@property(readonly, nonatomic) _Bool shouldUpdateDisabledFeatures;
- (_Bool)storeChangeSessionUpdate:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000042516
@property(readonly, nonatomic) CPLChangeSessionUpdate *storedChangeSessionUpdate;
@property(readonly, nonatomic) _Bool hasStoredChangeSessionUpdate;
@property(readonly, nonatomic) NSArray *pushPullGatekeepers;
- (_Bool)storePushPullGatekeepers:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000041ae4
- (_Bool)isClientInSyncWithClientCache;	// IMP=0x0010000000041a30
- (_Bool)storeClientIsNotInSyncWithClientCacheWithError:(id *)arg1;	// IMP=0x00100000000418aa
- (_Bool)storeClientIsInSyncWithClientCacheWithError:(id *)arg1;	// IMP=0x00100000000416ec
- (id)createNewClientCacheIdentifier;	// IMP=0x0010000000041695
- (_Bool)storeClientCacheIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000041675
- (id)clientCacheIdentifier;	// IMP=0x0010000000041658
- (_Bool)storeLastQuarantineCountReportDate:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000041638
- (id)lastQuarantineCountReportDate;	// IMP=0x00100000000415ca
- (_Bool)storeUserIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000041432
- (id)userIdentifier;	// IMP=0x00100000000411ce
- (Class)_userIdentifierClass;	// IMP=0x00100000000410e2
- (_Bool)resetValueForGlobalVariable:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000041064
- (id)valueForGlobalVariable:(id)arg1;	// IMP=0x0010000000040f34
- (_Bool)setValue:(id)arg1 forGlobalVariable:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000040e2f
- (_Bool)addGlobalVariable:(id)arg1 defaultValue:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000040a7e
- (void)_cacheValue:(id)arg1 forVariable:(id)arg2;	// IMP=0x00100000000409f1
- (id)pqlConnection;	// IMP=0x00100000000409dc
- (id)createNewLibraryVersion;	// IMP=0x0010000000040985
- (_Bool)storeLibraryVersion:(id)arg1 withError:(id *)arg2;	// IMP=0x0010000000040965
- (id)libraryVersion;	// IMP=0x0010000000040948
- (_Bool)updateLibraryOptions:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x00100000000406ab
- (unsigned long long)libraryOptions;	// IMP=0x001000000004065c
- (void)performBarrier;	// IMP=0x001000000004063a
- (void)performBarrierTransaction:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x0010000000040532
- (_Bool)closeWithError:(id *)arg1;	// IMP=0x00100000000404ea
- (void)blockWriteTransactionsWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000004038d
- (void)performWriteTransaction:(id)arg1 withBlock:(CDUnknownBlockType)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000003fe1d
- (void)performReadTransaction:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x001000000003fa58
- (MISSING_TYPE *)executePostOpenWithError: /* Error: Ran out of types for this method. */;	// IMP=0x001000000003f992
- (_Bool)openWithError:(id *)arg1;	// IMP=0x001000000003f73b
- (_Bool)_openWithError:(id *)arg1;	// IMP=0x001000000003e26a
- (void)_markLibraryAsCorruptedWithInfo:(id)arg1;	// IMP=0x001000000003e1aa
- (_Bool)_setupPragmasAndFunctions;	// IMP=0x001000000003e18d
- (_Bool)markDatabaseAsDeactivatedWithError:(id *)arg1;	// IMP=0x001000000003e166
- (void)_deleteCorruptionInfo;	// IMP=0x001000000003dfb7
@property(readonly, nonatomic) id corruptionInfo;
- (id)_corruptionMarkerURL;	// IMP=0x001000000003de11
- (_Bool)_setupDBIfNeeded;	// IMP=0x001000000003d95c
- (void)_closeUpgradeJournal;	// IMP=0x001000000003d930
- (void)_openUpgradeJournal;	// IMP=0x001000000003d81e
- (_Bool)_upgradeDB:(long long)arg1;	// IMP=0x001000000003caea
- (_Bool)_wipeIfDeactivated:(long long)arg1 didWipeDatabase:(_Bool *)arg2 error:(id *)arg3;	// IMP=0x001000000003c9d1
- (void)_wipeBeforeOpeningIfNecessary;	// IMP=0x001000000003c7ff
- (id)_wipeReasonFromCorruptionInfo:(id)arg1;	// IMP=0x001000000003c768
- (_Bool)_closeWipeAndReOpenWithReason:(id)arg1 warnUserIfPossible:(_Bool)arg2 createRadar:(_Bool)arg3 error:(id *)arg4;	// IMP=0x001000000003c14b
- (void)_wipeWithReason:(id)arg1;	// IMP=0x001000000003bf67
- (_Bool)performPostUpgradeMigrationsWithError:(id *)arg1;	// IMP=0x001000000003b8eb
- (_Bool)_fixStoreAfterAnyVersionChange;	// IMP=0x001000000003b42d
- (_Bool)_postUpgradeToVersion:(long long)arg1;	// IMP=0x001000000003b0e0
- (_Bool)_upgradeToVersion:(long long)arg1;	// IMP=0x001000000003ad68
- (void)_scheduleClientCacheDropIfNecessary;	// IMP=0x001000000003ac91
- (void)_scheduleClientCacheDrop;	// IMP=0x001000000003ab4d
- (_Bool)_fix22666940;	// IMP=0x001000000003a322
- (_Bool)_performWithFlags:(unsigned int)arg1 action:(CDUnknownBlockType)arg2;	// IMP=0x0010000000039fa1
- (void)_unsetupProfilingHooks;	// IMP=0x0010000000039f25
- (void)_setupProfilingHooks;	// IMP=0x00100000000397e4
- (id)_transactionStatsDescription;	// IMP=0x00100000000395a6
- (_Bool)_initializeDB;	// IMP=0x0010000000038b2b
- (void)triggerResetAfterUpgrade:(unsigned long long)arg1 withReason:(id)arg2;	// IMP=0x0010000000038985
- (id)initWithAbstractObject:(id)arg1;	// IMP=0x0010000000038064
- (void)_addPostUpgradeMigration:(id)arg1;	// IMP=0x0010000000037efa

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

