//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class MISSING_TYPE, NSOperationQueue, NSUserDefaults, PCSAccountsModel, PCSDelayedAction, PCSIDSSyncing, PCSKeySyncing, PCSMobileBackup, PCSUserRegistry;
@protocol OS_dispatch_queue, OS_xpc_object;

@interface PCSSyncing : NSObject
{
    NSObject<OS_dispatch_queue> *_internalQueue;	// 8 = 0x8
    PCSUserRegistry *_registry;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_registryQueue;	// 24 = 0x18
    PCSKeySyncing *_manager;	// 32 = 0x20
    PCSAccountsModel *_accounts;	// 40 = 0x28
    PCSDelayedAction *_triggerWatchSyncingAction;	// 48 = 0x30
    NSOperationQueue *_serialOperationQueue;	// 56 = 0x38
    PCSIDSSyncing *_syncing;	// 64 = 0x40
    NSUserDefaults *_settings;	// 72 = 0x48
    PCSMobileBackup *_mobileBackup;	// 80 = 0x50
    NSObject<OS_xpc_object> *_scheduledKeyrollActivity;	// 88 = 0x58
}

+ (id)defaultPCSSyncing;	// IMP=0x002000000001daee
- (void).cxx_destruct;	// IMP=0x00200000000274c9
@property(retain) NSObject<OS_xpc_object> *scheduledKeyrollActivity; // @synthesize scheduledKeyrollActivity=_scheduledKeyrollActivity;
@property(retain) PCSMobileBackup *mobileBackup; // @synthesize mobileBackup=_mobileBackup;
@property(retain) NSUserDefaults *settings; // @synthesize settings=_settings;
@property(retain) PCSIDSSyncing *syncing; // @synthesize syncing=_syncing;
@property(retain) NSOperationQueue *serialOperationQueue; // @synthesize serialOperationQueue=_serialOperationQueue;
@property(retain) PCSDelayedAction *triggerWatchSyncingAction; // @synthesize triggerWatchSyncingAction=_triggerWatchSyncingAction;
@property(retain) PCSAccountsModel *accounts; // @synthesize accounts=_accounts;
@property(retain) PCSKeySyncing *manager; // @synthesize manager=_manager;
@property(retain) NSObject<OS_dispatch_queue> *registryQueue; // @synthesize registryQueue=_registryQueue;
@property(retain) PCSUserRegistry *registry; // @synthesize registry=_registry;
@property(retain) NSObject<OS_dispatch_queue> *internalQueue; // @synthesize internalQueue=_internalQueue;
- (void)getHealthSummary:(CDUnknownBlockType)arg1;	// IMP=0x00100000000272e6
- (void)keyRollPending:(id)arg1 complete:(CDUnknownBlockType)arg2;	// IMP=0x0010000000027194
- (void)manateeStatus:(id)arg1 complete:(CDUnknownBlockType)arg2;	// IMP=0x00100000000265ec
- (void)fetchStats:(CDUnknownBlockType)arg1;	// IMP=0x0010000000026562
- (void)userDBBackupRecordIDsWithReply:(CDUnknownBlockType)arg1;	// IMP=0x00100000000264b6
- (void)mobileBackupRecordIDsWithReply:(CDUnknownBlockType)arg1;	// IMP=0x001000000002640a
- (void)triggerUserRegistryCheck:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x00100000000263f8
- (void)restoreMobileBackup:(_Bool)arg1 dsid:(id)arg2 withReply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000025803
- (void)fetchAllDeviceKeys:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000002575f
- (void)checkSyncingForPeer:(id)arg1 force:(_Bool)arg2;	// IMP=0x00100000000256ea
- (void)triggerDaily:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000002569b
- (void)requestKeys:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000025623
- (void)syncKeys:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x001000000002558c
- (void)getAllClients:(CDUnknownBlockType)arg1;	// IMP=0x001000000002538a
- (void)queuedCheckRegistry:(id)arg1 withReply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000025007
- (void)notifyEvent:(id)arg1;	// IMP=0x0010000000024f32
- (void)notifyDailyEvent;	// IMP=0x0010000000024d87
- (void)repairWalrus;	// IMP=0x0010000000024a0e
- (struct _PCSIdentitySetData *)identityCopySet:(id)arg1;	// IMP=0x00100000000247b5
- (void)createIdentity:(id)arg1 dsid:(id)arg2 roll:(_Bool)arg3 sync:(_Bool)arg4 forceSync:(_Bool)arg5 complete:(CDUnknownBlockType)arg6;	// IMP=0x0010000000024105
- (void)disableWalrusForAccount:(id)arg1 withParameters:(id)arg2 complete:(CDUnknownBlockType)arg3;	// IMP=0x0010000000023e7a
- (void)enableWalrusForAccount:(id)arg1 withParameters:(id)arg2 complete:(CDUnknownBlockType)arg3;	// IMP=0x0010000000023b78
- (void)migrateToiCDPForAccount:(id)arg1 withParameters:(id)arg2 complete:(CDUnknownBlockType)arg3;	// IMP=0x00100000000239e5
- (void)setupIdentitiesForAccount:(id)arg1 withParameters:(id)arg2 optional:(_Bool)arg3;	// IMP=0x0010000000023644
- (void)triggerSyncingWithEscrowProxy:(id)arg1 dsid:(id)arg2 publicKeys:(id)arg3 accountIdentifier:(id)arg4 settingsKeyExpirationDate:(id)arg5 settingsKeyIdentifier:(id)arg6 complete:(CDUnknownBlockType)arg7;	// IMP=0x0010000000023353
- (void)triggerCKKSSyncForService:(id)arg1 dsid:(id)arg2 publicKeys:(id)arg3 complete:(CDUnknownBlockType)arg4;	// IMP=0x0010000000022dde
- (_Bool)forceSyncNeeded:(id)arg1 dsid:(id)arg2;	// IMP=0x0010000000022b8b
- (void)triggerEscrowSyncWithDSID:(id)arg1 accountIdentifier:(id)arg2 settingsKeyExpirationDate:(id)arg3 settingsKeyIdentifier:(id)arg4 complete:(CDUnknownBlockType)arg5;	// IMP=0x0010000000022101
- (_Bool)ensureMKExists:(struct _PCSIdentitySetData *)arg1 error:(struct __CFError **)arg2;	// IMP=0x0010000000021f49
- (void)triggerKeyRolling;	// IMP=0x0010000000021209
- (void)rollingComplete:(_Bool)arg1;	// IMP=0x0010000000020fe8
- (_Bool)getServicesToRoll:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00100000000208ff
- (void)scheduleRollAttempt;	// IMP=0x0010000000020606
- (_Bool)activityIsScheduled:(id)arg1;	// IMP=0x00100000000205a5
- (long long)attemptTimer;	// IMP=0x0010000000020449
- (_Bool)shouldRollStingray;	// IMP=0x0010000000020107
- (_Bool)shouldRoll;	// IMP=0x0010000000020043
- (void)checkForBackupStateChange;	// IMP=0x001000000001f91d
- (void)recordEpochForKeyroll;	// IMP=0x001000000001f7d6
- (id)getRollEpoch;	// IMP=0x001000000001f5ce
- (void)mobileBackupStatus:(CDUnknownBlockType)arg1;	// IMP=0x001000000001f552
- (void)clearNextSyncNegativeCache;	// IMP=0x001000000001f34e
- (void)wStateChanged;	// IMP=0x001000000001f28e
- (void)notifyInternalEvent:(id)arg1;	// IMP=0x001000000001ed0a
- (void)triggerWatchSyncing:(CDUnknownBlockType)arg1;	// IMP=0x001000000001e808
- (void)notifyKeyRegistry;	// IMP=0x001000000001e650
- (void)triggerWatchSyncing;	// IMP=0x001000000001e613
- (id)healthSummary;	// IMP=0x001000000001e358
- (void)setupMetrics;	// IMP=0x001000000001e2a3
- (MISSING_TYPE *)initWithPCSKeySyncing: /* Error: Ran out of types for this method. */;	// IMP=0x001000000001dcfa
- (id)initForTesting;	// IMP=0x001000000001dbd2

@end

