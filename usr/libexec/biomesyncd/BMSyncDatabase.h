//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class MISSING_TYPE, NSDate, NSString, _bmFMDatabase;
@protocol OS_dispatch_queue;

@interface BMSyncDatabase : NSObject
{
    _bmFMDatabase *_fmdb;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_queue;	// 16 = 0x10
    unsigned long long _flags;	// 24 = 0x18
    NSString *__error_ivar;	// 32 = 0x20
    unsigned long long __internal_state_ivar;	// 40 = 0x28
    CDUnknownBlockType _corruptionHandler;	// 48 = 0x30
}

+ (id)defaultDatabaseWALPath;	// IMP=0x004000000003d255
+ (id)defaultDatabasePath;	// IMP=0x001000000003d1f7
- (void).cxx_destruct;	// IMP=0x001000000003ede1
@property(copy, nonatomic) CDUnknownBlockType corruptionHandler; // @synthesize corruptionHandler=_corruptionHandler;
@property(readonly, nonatomic) unsigned long long internalState; // @synthesize internalState=__internal_state_ivar;
@property(readonly, nonatomic) NSString *error; // @synthesize error=__error_ivar;
- (_Bool)migration_Schema20ToSchema21;	// IMP=0x001000000003ec39
- (_Bool)migration_StarSkySchema11ToSydRoSchema12;	// IMP=0x001000000003e915
@property(readonly, nonatomic) unsigned int version;
- (void)setValue:(id)arg1 forMetadataKey:(id)arg2;	// IMP=0x001000000003e8dd
- (id)valueForMetadataKey:(id)arg1;	// IMP=0x001000000003e85c
- (void)disableStatementCachingForBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000003e7c8
- (void)clearCachedStatements;	// IMP=0x001000000003e7b2
- (_Bool)rollback;	// IMP=0x001000000003e79c
- (_Bool)commit;	// IMP=0x001000000003e786
- (_Bool)isInTransaction;	// IMP=0x001000000003e770
- (_Bool)beginTransaction;	// IMP=0x001000000003e75a
- (void)close;	// IMP=0x001000000003e6ac
@property(readonly, nonatomic) unsigned long long state;
- (_Bool)open;	// IMP=0x001000000003e5d8
- (_Bool)_tryOpen:(unsigned long long)arg1;	// IMP=0x001000000003d758
- (void)setState:(unsigned long long)arg1 errorFormat:(id)arg2;	// IMP=0x001000000003d62e
- (void)setState:(unsigned long long)arg1 error:(id)arg2;	// IMP=0x001000000003d496
- (id)initWithPath:(id)arg1 queue:(id)arg2;	// IMP=0x001000000003d336
- (id)initWithPath:(id)arg1;	// IMP=0x001000000003d322
- (id)initWithQueue:(id)arg1;	// IMP=0x001000000003d2ac
- (int)CRDTLocationCount;	// IMP=0x001000000000496c
- (id)highestDeletedLocationForSiteIdentifier:(id)arg1 inStream:(id)arg2;	// IMP=0x00100000000047ef
- (id)highestDeletedLocationsForStream:(id)arg1;	// IMP=0x001000000000461d
- (id)locationsWithState:(unsigned long long)arg1;	// IMP=0x001000000000444d
- (id)previousLocationRowBeforeLocationRow:(id)arg1;	// IMP=0x00100000000041f3
- (_Bool)removeAllDeletedLocationsBeforeHighestDeletedLocation:(id)arg1;	// IMP=0x0010000000004008
- (_Bool)upsertLocation:(id)arg1;	// IMP=0x0010000000003bc2
- (id)insertLocationIfNotExists:(id)arg1 withState:(unsigned long long)arg2;	// IMP=0x0010000000003933
- (_Bool)updateAllLocationsAtOrBefore:(id)arg1 state:(unsigned long long)arg2;	// IMP=0x001000000000363e
- (_Bool)updateLocationState:(unsigned long long)arg1 forLocation:(id)arg2;	// IMP=0x0010000000003500
- (id)locationRowWithLocationID:(id)arg1;	// IMP=0x00100000000033c7
- (id)locationRowWithLocation:(id)arg1;	// IMP=0x00100000000031c5
- (id)allPeers;	// IMP=0x0010000000006fc4
- (_Bool)setLastSyncDate:(id)arg1 forDeviceWithIdentifier:(id)arg2;	// IMP=0x0010000000006e90
- (id)lastSyncDateOfDeviceWithIdentifier:(id)arg1;	// IMP=0x0010000000006d53
- (id)lastSyncDateFromAnyDevice;	// IMP=0x0010000000006c98
- (id)deviceWithIdentifier:(id)arg1;	// IMP=0x0010000000006b56
- (_Bool)upsertSyncDevicePeer:(id)arg1 isMe:(_Bool)arg2;	// IMP=0x0010000000006597
- (id)localDevice;	// IMP=0x00100000000064d9
- (void)enumerateZonesWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0010000000018ff4
- (_Bool)ckZoneSetAttemptedRecoveryDate:(id)arg1 state:(int)arg2 forZoneName:(id)arg3;	// IMP=0x0010000000018d86
- (_Bool)ckZoneSetZoneVersionUUID:(id)arg1 forZoneName:(id)arg2;	// IMP=0x0010000000018b70
- (_Bool)ckZoneSetAttemptingRecoveryForZoneName:(id)arg1 state:(int)arg2;	// IMP=0x0010000000018917
- (id)ckZoneForZoneName:(id)arg1;	// IMP=0x00100000000187e5
- (_Bool)ckZoneExists:(id)arg1;	// IMP=0x00100000000186db
- (id)SELECT_ATOMS_WHERE:(id)arg1 ORDER_BY:(id)arg2 LIMIT:(id)arg3;	// IMP=0x001000000002430a
- (id)highestLocationWithBufferedAtomsOlderThan:(double)arg1 forSiteIdentifier:(id)arg2 inStream:(id)arg3;	// IMP=0x0010000000024178
- (id)computeHighestLocationToDeleteUpToBookmark:(id)arg1 forSiteIdentifier:(id)arg2 inStream:(id)arg3 offsetsIncrease:(_Bool)arg4;	// IMP=0x0010000000023e68
- (void)atomRowsInTimestampClockVector:(id)arg1 forLocation:(id)arg2 inStream:(id)arg3 enumerateWithBlock:(CDUnknownBlockType)arg4;	// IMP=0x00100000000235e8
- (void)locationsInClockVector:(id)arg1 inStream:(id)arg2 enumerateWithBlock:(CDUnknownBlockType)arg3;	// IMP=0x0010000000022dac
- (_Bool)deleteAllAtomsAtOrBeforeLocation:(id)arg1;	// IMP=0x001000000002291e
- (void)atomsAtOrBeforeLocation:(id)arg1 ofType:(unsigned long long)arg2 enumerateWithBlock:(CDUnknownBlockType)arg3;	// IMP=0x00100000000225bd
- (void)atomRowsNotOnDiskReferencingSiteIdentifier:(id)arg1 inStream:(id)arg2 enumerateWithBlock:(CDUnknownBlockType)arg3;	// IMP=0x0010000000022361
- (id)CKAtomRowSiteIdentifiers;	// IMP=0x0010000000022275
- (_Bool)containsCKAtomRowWithSegment:(id)arg1 inStream:(id)arg2;	// IMP=0x0010000000022144
- (id)latestDistributedTimestampForSiteIdentifier:(id)arg1 inStream:(id)arg2;	// IMP=0x0010000000021f61
- (id)ckAtomRowForAtomWithBookmark:(id)arg1 type:(unsigned long long)arg2 forSiteIdentifier:(id)arg3 inStream:(id)arg4;	// IMP=0x0010000000021d1d
- (_Bool)updateCKAtomRow:(id)arg1 inStream:(id)arg2;	// IMP=0x0010000000021789
- (MISSING_TYPE *)containsCKAtomRowWithTimestamp:inStream:onDisk: /* Error: Ran out of types for this method. */;	// IMP=0x00100000000214f6
- (_Bool)containsCKAtomRowWithTimestamp:(id)arg1 inStream:(id)arg2;	// IMP=0x00100000000212c4
- (int)ckAtomCount;	// IMP=0x0010000000021215
- (id)latestCKAtomRowOfType:(unsigned long long)arg1 forSiteIdentifier:(id)arg2 inStream:(id)arg3;	// IMP=0x0010000000021040
- (id)stateVectorForLocationRow:(id)arg1;	// IMP=0x0010000000020ae4
- (id)timestampClockVectorForStreamName:(id)arg1;	// IMP=0x0010000000020846
- (id)latestCKAtomRowForSiteIdentifier:(id)arg1 inStream:(id)arg2;	// IMP=0x00100000000206d3
- (id)ckAtomRowWithTimestamp:(id)arg1 inStream:(id)arg2;	// IMP=0x00100000000204b4
- (_Bool)addCKAtomRow:(id)arg1 inStream:(id)arg2;	// IMP=0x001000000001faf2
@property(retain, nonatomic) NSString *mergeableRecordValueKey;
- (void)clearCKSyncEngineMetaData;	// IMP=0x0010000000028489
- (void)saveCKSyncEngineMetaData:(id)arg1;	// IMP=0x0010000000028470
- (id)ckSyncEngineMetaData;	// IMP=0x0010000000028457
@property(retain, nonatomic) NSDate *lastCloudKitSyncDate;
@property(retain, nonatomic) NSDate *lastCloudKitSyncAttemptDate;
@property(retain, nonatomic) NSDate *lastRapportSyncDate;
@property(retain, nonatomic) NSDate *lastRapportSyncAttemptDate;
- (void)enumerateMergeableRecordValuesForRecordName:(id)arg1 zoneName:(id)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x0010000000028825
- (_Bool)clearCKMergeableRecordValueServerMergeableValuesForZoneName:(id)arg1;	// IMP=0x0010000000028747
- (_Bool)clearCKMergeableRecordValueServerMergeableValuesForRecordName:(id)arg1 zoneName:(id)arg2;	// IMP=0x0010000000028640
- (_Bool)saveCKMergeableRecordValueRecordName:(id)arg1 zoneName:(id)arg2 mergeableRecordValueData:(id)arg3;	// IMP=0x0010000000028515
- (_Bool)saveLatestTombstoneBookmark:(id)arg1 forSiteIdentifier:(id)arg2 inStream:(id)arg3;	// IMP=0x0010000000028b3a
- (_Bool)getLatestTombstoneBookmarkForSiteIdentifier:(id)arg1 inStream:(id)arg2 segmentName:(id *)arg3 segmentOffset:(unsigned long long *)arg4;	// IMP=0x00100000000289bd
- (_Bool)enableAllCKSyncRecordsPreviouslyDisabledForSite:(id)arg1 stream:(id)arg2;	// IMP=0x001000000003a359
- (_Bool)disableAllCKSyncRecordsForSite:(id)arg1 stream:(id)arg2;	// IMP=0x001000000003a13c
- (_Bool)upsertCKRecordWithLocation:(id)arg1 inStream:(id)arg2;	// IMP=0x0010000000039d09
- (unsigned long long)ckRecordCountForRecordType:(unsigned long long)arg1;	// IMP=0x0010000000039bcb
- (void)deleteAllCKRecordsInZone:(id)arg1;	// IMP=0x0010000000039a7f
- (id)gatherAllCKSyncRecordRecordsToBeDeleted;	// IMP=0x0010000000039915
- (void)enumerateCKSyncRecordRecordsSetForDeletingUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000003974e
- (void)deleteCKRecordAtLocation:(id)arg1;	// IMP=0x00100000000395c7
- (void)deleteCKRecordsForStreamName:(id)arg1;	// IMP=0x00100000000394ac
- (void)deleteCKRecordsAtOrBeforeLocation:(id)arg1;	// IMP=0x00100000000392bc
- (void)enumerateRecordsWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x00100000000391a0
- (void)markCKRecordsAtOrBeforeLocationToBeDeletedOnSync:(id)arg1;	// IMP=0x0010000000038f1a
- (void)updateAllCKRecordsAtOrBeforeLocationToBeDeletedOnSync:(id)arg1;	// IMP=0x0010000000038d23
- (_Bool)ckRecordExists:(id)arg1 zoneName:(id)arg2 recordType:(unsigned long long)arg3;	// IMP=0x0010000000038bb4
- (id)ckRecordForRecordName:(id)arg1 zoneName:(id)arg2 recordType:(unsigned long long)arg3;	// IMP=0x0010000000038a19
- (_Bool)clearCKRecordLocalMergeableValueAndSetToSyncForZone:(id)arg1;	// IMP=0x001000000003882f
- (_Bool)saveCKRecordLocalMergeableValue:(id)arg1 recordName:(id)arg2 zoneName:(id)arg3 locationRow:(id)arg4;	// IMP=0x001000000003847f
- (_Bool)saveCKRecordHighestDeletedLocationRow:(id)arg1 recordName:(id)arg2 zoneName:(id)arg3 recordExists:(_Bool)arg4;	// IMP=0x00100000000381a7
- (_Bool)saveCKRecordServerMergeableValue:(id)arg1 recordName:(id)arg2 zoneName:(id)arg3 locationRow:(id)arg4;	// IMP=0x0010000000037f04
- (void)resetMetadataForRecord:(id)arg1 zoneName:(id)arg2;	// IMP=0x0010000000037d04
- (_Bool)resetCKRecordsMetaDataAndSetToSyncForZone:(id)arg1;	// IMP=0x0010000000037b1e
- (id)getSystemFieldsDataForRecordName:(id)arg1 zoneName:(id)arg2 recordType:(unsigned long long)arg3;	// IMP=0x0010000000037988
- (void)saveSystemFieldsDataForRecord:(id)arg1 syncToCloudKit:(id)arg2 recordType:(unsigned long long)arg3 crdtDeleted:(id)arg4;	// IMP=0x00100000000372ae
- (id)createCKRecordFromRecordID:(id)arg1 newRecord:(_Bool *)arg2 recordType:(unsigned long long)arg3;	// IMP=0x00100000000370c1
- (id)recordFromSystemFieldsData:(id)arg1;	// IMP=0x0010000000036fc9
- (id)ckRecordsToSyncToCloudKitForZone:(id)arg1;	// IMP=0x0010000000036d27
- (void)compactAndDeleteSessionLogs;	// IMP=0x0010000000040171
- (id)computeAggregatedSessionLogs;	// IMP=0x001000000004007f
- (void)recordAtomMergeResult:(unsigned long long)arg1 inStream:(id)arg2 sessionID:(id)arg3 messageID:(unsigned long long)arg4 ownerSite:(id)arg5 originatingSite:(id)arg6 eventCreatedAt:(double)arg7;	// IMP=0x001000000003fd6b
- (void)recordMessageToDeviceIdentifier:(id)arg1 sessionID:(id)arg2 messageID:(unsigned long long)arg3 reachable:(_Bool)arg4 bytes:(unsigned long long)arg5 isReciprocal:(_Bool)arg6;	// IMP=0x001000000003fa86
- (void)recordSessionEnd:(id)arg1 timeSincePreviousSync:(double)arg2;	// IMP=0x001000000003f896
- (void)recordSessionStart:(id)arg1 transport:(unsigned long long)arg2 reason:(unsigned long long)arg3 isReciprocal:(_Bool)arg4;	// IMP=0x001000000003f632
- (unsigned long long)sizeOfTableInKilobytes:(id)arg1;	// IMP=0x0010000000041190
- (unsigned long long)numRowsInTable:(id)arg1;	// IMP=0x0010000000040e2a
- (unsigned long long)_sizeOfFileInKilobytes:(id)arg1;	// IMP=0x0010000000040c90
- (unsigned long long)walSizeInKilobytes;	// IMP=0x0010000000040c35
- (unsigned long long)databaseSizeInKilobytes;	// IMP=0x0010000000040bda
- (_Bool)vacuumWithShouldContinueBlock:(CDUnknownBlockType)arg1;	// IMP=0x0010000000040668
- (unsigned long long)_numPagesToVacuum;	// IMP=0x00100000000402ea
@property(retain, nonatomic) NSDate *dateOfLastVacuum;

@end

