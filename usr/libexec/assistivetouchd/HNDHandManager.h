//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AXDispatchTimer, AXDragManager, AXElement, AXElementFetcher, AXNamedReplayableGesture, AXPIFingerModel, AXPISystemPointerLargeAppearance, AXPISystemPointerPreciseAppearance, AXUISoftwareKeyboardManager, AXUpdateElementVisualsCoalescer, HNDBubblePointerAppearance, HNDContinuousScroller, HNDDeviceManager, HNDDisplayManager, HNDDwellPointerAppearance, HNDEventManager, HNDMousePointerAppearance, HNDRockerButton, HNDSystemPointerController, NSArray, NSDate, NSMutableArray, NSMutableDictionary, NSNumber, NSPointerArray, NSString;
@protocol BSInvalidatable, OS_dispatch_queue;

@interface HNDHandManager : NSObject
{
    int _orientation;	// 8 = 0x8
    _Bool _primaryButtonDown;	// 12 = 0xc
    _Bool _inBrokenHomeButtonMode;	// 13 = 0xd
    _Bool _isRecording;	// 14 = 0xe
    _Bool _finishedRecording;	// 15 = 0xf
    unsigned long long _visualsHiddenForScreenshotCount;	// 16 = 0x10
    _Bool _isFingerDown;	// 24 = 0x18
    double _touchSpeed;	// 32 = 0x20
    _Bool _openMenuWithSwaggle;	// 40 = 0x28
    NSArray *_customGestures;	// 48 = 0x30
    AXNamedReplayableGesture *_currentCustomGesture;	// 56 = 0x38
    struct CGPoint _orbGestureLocation;	// 64 = 0x40
    int _preparedScrollAction;	// 80 = 0x50
    AXUISoftwareKeyboardManager *_softwareKeyboardManager;	// 88 = 0x58
    HNDMousePointerAppearance *_mousePointerAppearance;	// 96 = 0x60
    HNDDwellPointerAppearance *_dwellPointerAppearance;	// 104 = 0x68
    AXPISystemPointerPreciseAppearance *_systemPointerPreciseAppearance;	// 112 = 0x70
    AXPISystemPointerLargeAppearance *_systemPointerLargeAppearance;	// 120 = 0x78
    AXDispatchTimer *_systemPointerSettingsChangedDebouncer;	// 128 = 0x80
    HNDBubblePointerAppearance *_systemBubblePointerAppearance;	// 136 = 0x88
    AXDispatchTimer *_dwellTimer;	// 144 = 0x90
    struct CGPoint _lastDwellStartPoint;	// 152 = 0x98
    unsigned long long _dwellMode;	// 168 = 0xa8
    AXDispatchTimer *_fingerFadeTimer;	// 176 = 0xb0
    _Bool _fingersFaded;	// 184 = 0xb8
    _Bool _inMultiFingerGesture;	// 185 = 0xb9
    _Bool _resettingPinch;	// 186 = 0xba
    unsigned long long _pinchMode;	// 192 = 0xc0
    unsigned long long _pinchState;	// 200 = 0xc8
    struct CGPoint _pinchRotatePreviousPoint;	// 208 = 0xd0
    _Bool _hotCornerLocked;	// 224 = 0xe0
    _Bool _hoverNubbitLocked;	// 225 = 0xe1
    struct CGPoint _dragStartPoint;	// 232 = 0xe8
    _Bool _inDragMode;	// 248 = 0xf8
    _Bool _isDragNubbitMode;	// 249 = 0xf9
    _Bool _isPerformingDragPressEvent;	// 250 = 0xfa
    AXPIFingerModel *_realSelectedPinchFinger;	// 256 = 0x100
    _Bool _areFingersPressedDown;	// 264 = 0x108
    struct CGPoint _pressedPinchFingerStartPoint;	// 272 = 0x110
    struct CGPoint _pressedPinchFingerFulcrum;	// 288 = 0x120
    double _pressedPinchFingerMovementFromStart;	// 304 = 0x130
    NSMutableDictionary *_avPlayers;	// 312 = 0x138
    _Bool _inCustomGestureMovement;	// 320 = 0x140
    AXDispatchTimer *_orientationUpdateTimer;	// 328 = 0x148
    double _lastOrbValue;	// 336 = 0x150
    _Bool _shouldSkipElementFetchForAXScroll;	// 344 = 0x158
    id <BSInvalidatable> _suppressVisualsAssertion;	// 352 = 0x160
    _Bool _alwaysShowMenu;	// 360 = 0x168
    _Bool _voiceControl;	// 361 = 0x169
    _Bool _inBubbleMode;	// 362 = 0x16a
    _Bool _mouseBehavesLikeFinger;	// 363 = 0x16b
    _Bool _assistiveTouchMouseDwellControlEnabled;	// 364 = 0x16c
    _Bool _isPendingFingerLiftForPrimaryButtonPressUp;	// 365 = 0x16d
    _Bool _isActivelyScrollingContinuously;	// 366 = 0x16e
    _Bool _scrollingBlockedOnElementRefresh;	// 367 = 0x16f
    _Bool _isDwellActionPendingButtonUp;	// 368 = 0x170
    _Bool _bubbleModeCurrentlyFocusedOnNubbit;	// 369 = 0x171
    _Bool _lastBubbleModeDwellWasOnNubbit;	// 370 = 0x172
    _Bool _bubbleModeBlockedOnElementRefresh;	// 371 = 0x173
    struct os_unfair_lock_s _continuousScrollLock;	// 372 = 0x174
    NSPointerArray *_eventHandlers;	// 376 = 0x178
    HNDEventManager *_eventManager;	// 384 = 0x180
    HNDDeviceManager *_deviceManager;	// 392 = 0x188
    NSMutableArray *_displayManagers;	// 400 = 0x190
    AXDragManager *_dragManager;	// 408 = 0x198
    HNDSystemPointerController *_systemPointerController;	// 416 = 0x1a0
    NSDate *_previousPrimaryButtonPressDownDate;	// 424 = 0x1a8
    unsigned long long _continuousScrollMode;	// 432 = 0x1b0
    NSNumber *_currentContinuousScrollDirection;	// 440 = 0x1b8
    NSArray *_horizontalContinuousScrollers;	// 448 = 0x1c0
    NSArray *_verticalContinuousScrollers;	// 456 = 0x1c8
    unsigned long long _lastTimeElementFetcherRefreshed;	// 464 = 0x1d0
    NSObject<OS_dispatch_queue> *_continuousScrollerGenerationQueue;	// 472 = 0x1d8
    AXElement *_continuousScrollPickedElement;	// 480 = 0x1e0
    double _continuousScrollCurrentSpeedFactor;	// 488 = 0x1e8
    HNDContinuousScroller *;	// 496 = 0x1f0
    AXElementFetcher *_elementFetcher;	// 504 = 0x1f8
    AXUpdateElementVisualsCoalescer *_updateElementVisualsCoalescer;	// 512 = 0x200
    NSMutableDictionary *_bubbleModeFrameToElementMapping;	// 520 = 0x208
    AXElement *_currentBubbleModeFocusedElement;	// 528 = 0x210
    AXElement *_lastBubbleModeDwellElement;	// 536 = 0x218
    AXElement *_lastBubbleModeFocusedElement;	// 544 = 0x220
    AXDispatchTimer *_dwellBubbleModeTimer;	// 552 = 0x228
    HNDRockerButton *_bubbleModeFocusedRockerItem;	// 560 = 0x230
    HNDRockerButton *_lastBubbleModeDwellRockerItem;	// 568 = 0x238
    unsigned long long _lastTimeHitTestedForBubbleMode;	// 576 = 0x240
}

+ (id)_actionForHotCorner:(unsigned long long)arg1;	// IMP=0x002000000002f062
+ (struct CGPoint)_pointByAvoidingDisplayCornerRadius:(double)arg1 forPoint:(struct CGPoint)arg2;	// IMP=0x001000000002cdd0
+ (double)_displayCornerRadius;	// IMP=0x001000000002ccf1
+ (id)sharedManager;	// IMP=0x001000000001ea6c
- (void).cxx_destruct;	// IMP=0x00100000000360d3
@property(nonatomic) _Bool bubbleModeBlockedOnElementRefresh; // @synthesize bubbleModeBlockedOnElementRefresh=_bubbleModeBlockedOnElementRefresh;
@property(nonatomic) unsigned long long lastTimeHitTestedForBubbleMode; // @synthesize lastTimeHitTestedForBubbleMode=_lastTimeHitTestedForBubbleMode;
@property(nonatomic) _Bool lastBubbleModeDwellWasOnNubbit; // @synthesize lastBubbleModeDwellWasOnNubbit=_lastBubbleModeDwellWasOnNubbit;
@property(retain, nonatomic) HNDRockerButton *lastBubbleModeDwellRockerItem; // @synthesize lastBubbleModeDwellRockerItem=_lastBubbleModeDwellRockerItem;
@property(retain, nonatomic) HNDRockerButton *bubbleModeFocusedRockerItem; // @synthesize bubbleModeFocusedRockerItem=_bubbleModeFocusedRockerItem;
@property(retain, nonatomic) AXDispatchTimer *dwellBubbleModeTimer; // @synthesize dwellBubbleModeTimer=_dwellBubbleModeTimer;
@property(retain, nonatomic) AXElement *lastBubbleModeFocusedElement; // @synthesize lastBubbleModeFocusedElement=_lastBubbleModeFocusedElement;
@property(retain, nonatomic) AXElement *lastBubbleModeDwellElement; // @synthesize lastBubbleModeDwellElement=_lastBubbleModeDwellElement;
@property(nonatomic) _Bool bubbleModeCurrentlyFocusedOnNubbit; // @synthesize bubbleModeCurrentlyFocusedOnNubbit=_bubbleModeCurrentlyFocusedOnNubbit;
@property(retain, nonatomic) AXElement *currentBubbleModeFocusedElement; // @synthesize currentBubbleModeFocusedElement=_currentBubbleModeFocusedElement;
@property(retain, nonatomic) NSMutableDictionary *bubbleModeFrameToElementMapping; // @synthesize bubbleModeFrameToElementMapping=_bubbleModeFrameToElementMapping;
@property(nonatomic) _Bool isDwellActionPendingButtonUp; // @synthesize isDwellActionPendingButtonUp=_isDwellActionPendingButtonUp;
@property(retain, nonatomic) AXUpdateElementVisualsCoalescer *updateElementVisualsCoalescer; // @synthesize updateElementVisualsCoalescer=_updateElementVisualsCoalescer;
@property(retain, nonatomic) AXElementFetcher *elementFetcher; // @synthesize elementFetcher=_elementFetcher;
@property(retain, nonatomic) HNDContinuousScroller *activeContinuousScroller; // @synthesize activeContinuousScroller=_activeContinuousScroller;
@property(nonatomic) double continuousScrollCurrentSpeedFactor; // @synthesize continuousScrollCurrentSpeedFactor=_continuousScrollCurrentSpeedFactor;
@property(retain, nonatomic) AXElement *continuousScrollPickedElement; // @synthesize continuousScrollPickedElement=_continuousScrollPickedElement;
@property(nonatomic) struct os_unfair_lock_s continuousScrollLock; // @synthesize continuousScrollLock=_continuousScrollLock;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *continuousScrollerGenerationQueue; // @synthesize continuousScrollerGenerationQueue=_continuousScrollerGenerationQueue;
@property(nonatomic) _Bool scrollingBlockedOnElementRefresh; // @synthesize scrollingBlockedOnElementRefresh=_scrollingBlockedOnElementRefresh;
@property(nonatomic) _Bool isActivelyScrollingContinuously; // @synthesize isActivelyScrollingContinuously=_isActivelyScrollingContinuously;
@property(nonatomic) unsigned long long lastTimeElementFetcherRefreshed; // @synthesize lastTimeElementFetcherRefreshed=_lastTimeElementFetcherRefreshed;
@property(retain, nonatomic) NSArray *verticalContinuousScrollers; // @synthesize verticalContinuousScrollers=_verticalContinuousScrollers;
@property(retain, nonatomic) NSArray *horizontalContinuousScrollers; // @synthesize horizontalContinuousScrollers=_horizontalContinuousScrollers;
@property(retain, nonatomic) NSNumber *currentContinuousScrollDirection; // @synthesize currentContinuousScrollDirection=_currentContinuousScrollDirection;
@property(nonatomic) unsigned long long continuousScrollMode; // @synthesize continuousScrollMode=_continuousScrollMode;
@property(nonatomic) _Bool isPendingFingerLiftForPrimaryButtonPressUp; // @synthesize isPendingFingerLiftForPrimaryButtonPressUp=_isPendingFingerLiftForPrimaryButtonPressUp;
@property(nonatomic) NSDate *previousPrimaryButtonPressDownDate; // @synthesize previousPrimaryButtonPressDownDate=_previousPrimaryButtonPressDownDate;
@property(nonatomic) _Bool assistiveTouchMouseDwellControlEnabled; // @synthesize assistiveTouchMouseDwellControlEnabled=_assistiveTouchMouseDwellControlEnabled;
@property(nonatomic) _Bool mouseBehavesLikeFinger; // @synthesize mouseBehavesLikeFinger=_mouseBehavesLikeFinger;
@property(readonly, nonatomic) HNDSystemPointerController *systemPointerController; // @synthesize systemPointerController=_systemPointerController;
@property(nonatomic) _Bool inBubbleMode; // @synthesize inBubbleMode=_inBubbleMode;
@property(retain, nonatomic) AXDragManager *dragManager; // @synthesize dragManager=_dragManager;
@property(nonatomic) _Bool voiceControl; // @synthesize voiceControl=_voiceControl;
@property(nonatomic) _Bool alwaysShowMenu; // @synthesize alwaysShowMenu=_alwaysShowMenu;
@property(retain, nonatomic) NSMutableArray *displayManagers; // @synthesize displayManagers=_displayManagers;
@property(readonly, nonatomic) HNDDeviceManager *deviceManager; // @synthesize deviceManager=_deviceManager;
@property(retain, nonatomic) HNDEventManager *eventManager; // @synthesize eventManager=_eventManager;
@property(retain, nonatomic) NSPointerArray *eventHandlers; // @synthesize eventHandlers=_eventHandlers;
@property(retain, nonatomic) NSArray *customGestures; // @synthesize customGestures=_customGestures;
@property(nonatomic) _Bool openMenuWithSwaggle; // @synthesize openMenuWithSwaggle=_openMenuWithSwaggle;
@property(nonatomic) double touchSpeed; // @synthesize touchSpeed=_touchSpeed;
- (id)displayManagerForDisplayId:(unsigned int)arg1;	// IMP=0x0010000000035b22
- (void)enumerateDisplayManagersWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0010000000035a57
- (id)displayManagerForHardwareIdentifier:(id)arg1;	// IMP=0x00100000000358fc
@property(readonly, nonatomic) HNDDisplayManager *currentDisplayManager;
@property(readonly, nonatomic) HNDDisplayManager *mainDisplayManager;
- (double)fingerWidth;	// IMP=0x00100000000357e1
- (_Bool)showInnerCircle;	// IMP=0x001000000003579d
- (double)fingerInnerCircleInnerRadius;	// IMP=0x001000000003574d
- (_Bool)showFingerOutlines;	// IMP=0x0010000000035709
- (double)fingerInnerRadius;	// IMP=0x00100000000356b9
- (double)innerCircleStrokeWidth;	// IMP=0x0010000000035669
- (double)strokeOutlineWidth;	// IMP=0x0010000000035619
- (double)strokeWidth;	// IMP=0x00100000000355c9
- (double)unpressedScale;	// IMP=0x0010000000035579
- (double)pressedScale;	// IMP=0x0010000000035529
- (double)unpressedAlpha;	// IMP=0x00100000000354d9
- (double)pressedAlpha;	// IMP=0x0010000000035489
- (_Bool)useSystemFilters;	// IMP=0x0010000000035445
- (id)pressedCircularProgressFillColor;	// IMP=0x00100000000353f5
- (id)circularProgressFillColor;	// IMP=0x00100000000353a5
- (id)strokeOutlineColor;	// IMP=0x0010000000035355
- (id)deselectedStrokeColor;	// IMP=0x0010000000035305
- (id)selectedStrokeColor;	// IMP=0x00100000000352b5
- (id)deselectedFillColor;	// IMP=0x0010000000035265
- (id)selectedFillColor;	// IMP=0x0010000000035215
- (id)currentFingerAppearance;	// IMP=0x001000000003515f
- (_Bool)_requiresLargeSystemPointer;	// IMP=0x0010000000035083
- (double)_fingerRadiusOnDisplay:(id)arg1;	// IMP=0x0010000000034ee1
- (_Bool)isPerformingDragPress;	// IMP=0x0010000000034ed5
- (struct CGPoint)startPointForDrag;	// IMP=0x0010000000034ebf
- (void)performFingerUpAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000034df4
- (void)performFingerMoveToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000034d29
- (void)performFingerDownAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000034c5e
- (struct CGPoint)_fingerControllerPointForScreenPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000034b55
- (id)fingerController;	// IMP=0x0010000000034ad3
- (void)showMenu:(_Bool)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000034a86
- (struct CGPoint)rotateEventFromOrientation:(struct CGPoint)arg1;	// IMP=0x0010000000034a40
- (struct CGPoint)rotateNormalizedPointToOrientation:(struct CGPoint)arg1;	// IMP=0x00100000000349e6
- (void)didFailToFloatApp;	// IMP=0x00100000000349b8
- (void)didFailToPinApp;	// IMP=0x001000000003498a
- (void)volumeChanged;	// IMP=0x001000000003495c
@property(readonly, nonatomic) _Bool isVoiceControlRunning; // @dynamic isVoiceControlRunning;
@property(readonly, nonatomic) double volumeLevel; // @dynamic volumeLevel;
- (void)rotateEventToOrientation:(id)arg1;	// IMP=0x00100000000347cd
- (void)handleCustomHomeButtonAction:(int)arg1;	// IMP=0x001000000003476d
- (void)performButtonAction:(id)arg1 type:(int)arg2 state:(int)arg3;	// IMP=0x001000000003467a
- (struct CGPoint)preferredMenuDisplayPointOnDisplay:(id)arg1;	// IMP=0x0010000000034448
- (void)reloadFingerAppearance;	// IMP=0x0010000000034286
- (void)removeFingersToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000341f6
- (void)resetFingersToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 active:(_Bool)arg3;	// IMP=0x0010000000033d20
- (void)resetFingersToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000033d09
- (void)resetFingersIfActiveOnDisplay:(id)arg1;	// IMP=0x0010000000033c3a
- (void)resetFingersIfNeededOnDisplay:(id)arg1;	// IMP=0x0010000000033bd1
- (void)resetFingersIfNeeded;	// IMP=0x0010000000033b32
- (_Bool)isFingersPressedDown;	// IMP=0x001000000003390e
- (_Bool)canShowASTMousePointer;	// IMP=0x0010000000033860
- (void)menuExitedOnDisplay:(id)arg1;	// IMP=0x001000000003377d
- (void)notifyUserEventOccurred;	// IMP=0x0010000000033740
- (void)startPinchModeWithPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 mode:(unsigned long long)arg3;	// IMP=0x0010000000033639
- (id)_scrollFallbackGestureAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 vertical:(_Bool)arg3 forward:(_Bool)arg4 max:(_Bool)arg5;	// IMP=0x0010000000033472
- (double)_scrollDeltaForGesture:(_Bool)arg1 screenSize:(struct CGSize)arg2;	// IMP=0x0010000000033458
- (_Bool)_performAXScrollActionAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 action:(int)arg3;	// IMP=0x0010000000032f8f
- (void)prepareScrollAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 vertical:(_Bool)arg3 forward:(_Bool)arg4 max:(_Bool)arg5;	// IMP=0x0010000000032eb8
- (void)handleMultiTouchStandard:(long long)arg1 onDisplay:(id)arg2 withExistingFingerMidPoint:(struct CGPoint)arg3;	// IMP=0x00100000000329d5
- (void)handleSecondaryButtonPress:(int)arg1;	// IMP=0x00100000000329af
- (void)handleLaserPrimaryButtonPress:(int)arg1;	// IMP=0x0010000000032989
- (void)handlePrimaryButtonPress:(int)arg1;	// IMP=0x00100000000321cf
- (void)_liftFingersUpForPotentialTapViaPrimaryButton;	// IMP=0x0010000000031fff
- (void)_reallyLiftFingersUpForPotentialTapViaPrimaryButton;	// IMP=0x0010000000031f76
- (void)_handleAction:(id)arg1 type:(int)arg2 state:(int)arg3;	// IMP=0x0010000000031c14
- (void)handleButtonEvent:(id)arg1;	// IMP=0x0010000000031a25
- (_Bool)softwareKeyboardManagerShouldSetHardwareKeyboardAttached:(id)arg1 hardwareKeyboardIsCurrentlyAttached:(_Bool)arg2 newHardwareKeyboardAttachedValue:(_Bool *)arg3;	// IMP=0x0010000000031a1d
- (void)softwareKeyboardManagerDidChangeHardwareKeyboardAttached:(id)arg1;	// IMP=0x0010000000031a17
- (void)softwareKeyboardManager:(id)arg1 didSetHardwareKeyboardAttached:(_Bool)arg2;	// IMP=0x0010000000031a11
- (void)softwareKeyboardManagerWillUpdateKeyboardState:(id)arg1;	// IMP=0x0010000000031a0b
- (id)currentHardwareIdentifierForPointer;	// IMP=0x00100000000319bb
@property(readonly, nonatomic) struct CGPoint currentPointForPointer;
- (_Bool)_isWaitingForFirstSystemPointerMovement;	// IMP=0x00100000000316b8
@property(nonatomic) _Bool dwellControlPaused;
- (void)setDwellMode:(unsigned long long)arg1;	// IMP=0x0010000000031579
@property(nonatomic) _Bool dwellControlAutorevertEnabled;
@property(readonly, nonatomic) _Bool dwellControlEnabled;
- (void)_setApplicationAccessibilityEnabledIfNeeded;	// IMP=0x0010000000031307
- (void)_presentMigrationPopupIfNeeded;	// IMP=0x0010000000030d2d
- (void)_dwellControlToggled;	// IMP=0x0010000000030c40
- (void)_highlightFingers;	// IMP=0x0010000000030a74
- (void)_fadeFingersAfterDelayIfNeededOnDisplay:(id)arg1;	// IMP=0x0010000000030787
- (void)_fadeFingersAfterDelayIfNeeded;	// IMP=0x00100000000306e8
- (void)_updateFadedFingerOpacity;	// IMP=0x00100000000305fe
- (_Bool)_fadedFingersShouldShowOutlines;	// IMP=0x0010000000030580
- (_Bool)_shouldAutoFadeFingersOnDisplay:(id)arg1;	// IMP=0x0010000000030578
- (void)cancelDwellTimerWithoutStateResetForBubbleMode;	// IMP=0x00100000000304ff
- (void)cancelDwellTimerForBubbleMode;	// IMP=0x00100000000304b1
- (void)cancelDwellTimerForPointer;	// IMP=0x0010000000030427
- (void)cancelDwellTimer;	// IMP=0x0010000000030376
- (_Bool)_startDwellTimerForBubbleMode;	// IMP=0x001000000002fe62
- (_Bool)_startDwellTimerForPointer;	// IMP=0x001000000002f9f6
- (void)_startDwellTimer;	// IMP=0x001000000002f92c
- (_Bool)_isWithinLastDwellBounds:(struct CGPoint)arg1;	// IMP=0x001000000002f8a0
- (_Bool)_isPoint:(struct CGPoint)arg1 withinTolerance:(double)arg2 ofStartPoint:(struct CGPoint)arg3;	// IMP=0x001000000002f872
- (id)_avPlayerForSound:(id)arg1;	// IMP=0x001000000002f6ea
- (_Bool)inCustomGesture;	// IMP=0x001000000002f6dc
- (struct CGPoint)_pointForLockedCorner:(unsigned long long)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002f519
- (_Bool)_shouldLockIntoHotCornerAtNormalizedPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002f463
- (unsigned long long)_roundedCornersForCursorAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002f398
- (unsigned long long)_hotCornerForNormalizedPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002f2ad
- (struct CGSize)_hotCornerActivationSizeOnDisplay:(id)arg1;	// IMP=0x001000000002f1ae
- (unsigned long long)_cornerForNormalizedPoint:(struct CGPoint)arg1 normalizedPadding:(struct CGSize)arg2;	// IMP=0x001000000002f146
- (void)_performActionForHotCorner:(unsigned long long)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002efc4
- (unsigned long long)_defaultDwellMode;	// IMP=0x001000000002eee6
- (void)_resetDwellModeToDefault;	// IMP=0x001000000002ed7c
- (void)_resetDwellDueToFingersReset;	// IMP=0x001000000002ec8f
- (void)_initializeDwell;	// IMP=0x001000000002ec22
- (void)_performDwellActionOnDisplay:(id)arg1;	// IMP=0x001000000002ea10
- (void)_dwellTimerFired;	// IMP=0x001000000002e810
- (void)_showFingersIfNeededForMouseOnDisplay:(id)arg1;	// IMP=0x001000000002e754
- (void)_updateZoomWithDisplayPoint:(struct CGPoint)arg1 onDisplay:(unsigned int)arg2;	// IMP=0x001000000002e635
- (double)_defaultNubbitHitboxActivationFactor;	// IMP=0x001000000002e627
- (_Bool)_isInNubbitHitbox:(struct CGPoint)arg1 onDisplay:(id)arg2 activationFactor:(double)arg3;	// IMP=0x001000000002e5aa
- (_Bool)_isInNubbitHitbox:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002e4f9
- (struct CGRect)_paddedHitboxForNubbitOnDisplay:(id)arg1 activationFactor:(double)arg2;	// IMP=0x001000000002e3d4
- (void)_lockIntoHotCornerForOrientedNormalizedPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 cancelDwell:(_Bool)arg3;	// IMP=0x001000000002e325
- (void)moveFingerToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002daaa
- (void)moveFingerToPoint:(struct CGPoint)arg1;	// IMP=0x001000000002da47
- (void)moveFingerByDelta:(struct CGPoint)arg1;	// IMP=0x001000000002d914
- (void)sceneDidDisconnect:(id)arg1;	// IMP=0x001000000002d573
- (void)sceneDidConnect:(id)arg1;	// IMP=0x001000000002d4ba
- (void)setupWindow:(id)arg1 ignoredWindow:(id)arg2;	// IMP=0x001000000002d13b
- (void)_menuOpenTracker:(struct CGPoint)arg1;	// IMP=0x001000000002ca46
@property(nonatomic) _Bool nubbitMoving;
- (void)setCaptureEvents:(_Bool)arg1;	// IMP=0x001000000002c69a
- (void)_resetMenuOpenTracker;	// IMP=0x001000000002c667
- (void)prepareGesture:(id)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002c316
- (_Bool)isCapturingRealEvents;	// IMP=0x001000000002c239
- (_Bool)_shouldRepeatGesture;	// IMP=0x001000000002c1a7
- (void)_performCustomGestureOnDisplay:(id)arg1;	// IMP=0x001000000002bdb5
- (id)_shiftGestureIfNeeded:(id)arg1 onDisplay:(id)arg2 toMidpoint:(struct CGPoint)arg3;	// IMP=0x001000000002bc97
- (void)performPreparedGestureOnDisplay:(id)arg1;	// IMP=0x001000000002bc7c
- (_Bool)isPerformingGesture;	// IMP=0x001000000002bb66
- (void)cancelCurrentGesture;	// IMP=0x001000000002bb0d
@property(readonly, nonatomic) double touchSpeedMultiplier; // @dynamic touchSpeedMultiplier;
- (void)updatePointerAppearance;	// IMP=0x001000000002b931
@property(readonly, nonatomic) _Bool nubbitVisible;
- (void)updateSoftwareKeyboardState;	// IMP=0x001000000002b6ba
- (void)updateMenuVisibility;	// IMP=0x001000000002b511
- (void)updateAllSettings;	// IMP=0x001000000002b411
- (void)removeEventHandler:(id)arg1;	// IMP=0x001000000002b2e2
- (void)addEventHandler:(id)arg1;	// IMP=0x001000000002af5a
- (void)_modifyPinchToolMoveToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002a70d
- (void)mediaPlaybackChanged;	// IMP=0x001000000002a557
- (void)screenshotDidFire;	// IMP=0x001000000002a497
- (void)screenshotWillFire;	// IMP=0x001000000002a1fa
- (void)_handleScreenshotDidFireCallbackTimeout;	// IMP=0x001000000002a14b
- (void)_attemptToShowVisualsAfterPerformingScreenshot;	// IMP=0x0010000000029f99
- (void)mediaControlsChanged:(_Bool)arg1;	// IMP=0x0010000000029edd
- (void)resetNubbitLocation;	// IMP=0x0010000000029eaf
- (void)_startOrientationUpdateTimer;	// IMP=0x0010000000029d3a
- (void)orientationChanged:(long long)arg1;	// IMP=0x0010000000029c6e
- (void)orientationChanged;	// IMP=0x0010000000029aeb
- (_Bool)inDragMode;	// IMP=0x0010000000029adf
- (_Bool)inPinchMode;	// IMP=0x00100000000299c9
- (_Bool)inRockerMode;	// IMP=0x00100000000298ec
- (void)systemServerDied;	// IMP=0x0010000000029887
- (void)substantialTransitionOccurred;	// IMP=0x00100000000294ed
- (void)rotationLockChanged;	// IMP=0x00100000000294bf
- (void)ringerSwitchChanged;	// IMP=0x0010000000029491
- (void)handleRealEvent:(id)arg1;	// IMP=0x0010000000028fdb
- (_Bool)usingSpecialTool;	// IMP=0x0010000000028f7c
- (void)specialToolUsageEnded:(_Bool)arg1;	// IMP=0x0010000000028cd8
- (void)resumeBubbleModeForSpecialUsageToolIfNecessary;	// IMP=0x0010000000028c80
- (void)pauseBubbleModeForSpecialUsageTool;	// IMP=0x0010000000028c47
- (_Bool)_shouldHandleRealEventWithMultiTouchTool;	// IMP=0x0010000000028b94
- (void)_handleMultiTouchToolEvent:(id)arg1;	// IMP=0x0010000000028689
- (_Bool)_shouldEnableMultiTouchToolBackground;	// IMP=0x0010000000028633
- (void)_handleRealCustomGestureUp:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000285d9
- (void)_handleRealCustomGestureMove:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000028506
- (void)_handleRealCustomGestureDown:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000284e2
- (void)_moveFingersForRealEventToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000028409
- (void)_handleRealMultiFingerUp:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000028393
- (void)_handleRealMultiFingerDown:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000028265
- (void)_handleRealMultiFingerMove:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000281a9
- (void)_handleRealPinchToolMove:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000280b1
- (void)_handleRealPinchToolUp:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000027fb2
- (id)mainWindow;	// IMP=0x0010000000027f62
- (void)resetPinchFingersOnDisplay:(id)arg1;	// IMP=0x0010000000027a87
- (void)_handleRealPinchToolDown:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002794e
- (void)_handlePinchFingerDownWithFinger:(id)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002788c
- (void)endContinuousScrollingOnDisplay:(id)arg1 withCompletion:(_Bool)arg2;	// IMP=0x00100000000276a0
- (_Bool)_isChildElement:(id)arg1 desendantOfElement:(id)arg2;	// IMP=0x00100000000275fa
- (id)_scrollViewForScrollAction:(int)arg1 elementsToScroll:(id *)arg2;	// IMP=0x00100000000270ce
- (_Bool)_iterateRemoteViewsAndPerformContinuousScrollWithSpeed:(double)arg1 direction:(unsigned long long)arg2;	// IMP=0x0010000000026da1
- (void)processOrientedPointForContinuousScrolling:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000026379
- (void)beginContinuousScrollingInDirection:(unsigned long long)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000261d1
- (void)prepareForContinuousScrollOnDisplay:(id)arg1;	// IMP=0x0010000000025fa7
- (void)disableElementFetcherIfNecessary;	// IMP=0x0010000000025fa1
- (void)enableElementFetcherIfNecessary;	// IMP=0x0010000000025f9b
- (void)refreshElementFetcherWithScrollingBlocked:(_Bool)arg1;	// IMP=0x0010000000025ea2
- (_Bool)inContinuousScrollMode;	// IMP=0x0010000000025e65
- (struct CGRect)clipRect:(struct CGRect)arg1 toRotatedScreenBoundsOnDisplay:(id)arg2;	// IMP=0x0010000000025d93
- (_Bool)currentlySnappedInBubbleMode;	// IMP=0x0010000000025cfa
- (_Bool)isSimpleElementForBubbleMode:(id)arg1;	// IMP=0x0010000000025c58
- (_Bool)supportsActivateForBubbleModeElement:(id)arg1;	// IMP=0x0010000000025b52
- (void)activateCurrentBubbleModeFocusedElement;	// IMP=0x001000000002585c
- (double)distanceBetweenRect:(struct CGRect)arg1 andPoint:(struct CGPoint)arg2;	// IMP=0x0010000000025774
- (id)nearestRockerButtonForDisplayManger:(id)arg1 orientedPoint:(struct CGPoint)arg2 distance:(double *)arg3;	// IMP=0x00100000000254a7
- (id)nearestElementFrameForPortraitPoint:(struct CGPoint)arg1 distance:(double *)arg2;	// IMP=0x0010000000025214
- (void)generateMappingForElementFrames;	// IMP=0x0010000000024ee7
- (void)bubbleModeFailedToSnapOnDisplay:(id)arg1;	// IMP=0x0010000000024cf7
- (void)processPortraitUpPointForBubbleMode:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000023ede
- (_Bool)bubbleModeAllowed;	// IMP=0x0010000000023ed6
- (_Bool)shouldUseBubbleMode;	// IMP=0x0010000000023e76
- (void)enableBubbleMode:(_Bool)arg1;	// IMP=0x0010000000023c99
- (_Bool)shouldUseEyeTrackingAutoHide;	// IMP=0x0010000000023c91
- (void)generateContinuousScrollersWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00100000000232c0
- (void)accessibilityManager:(id)arg1 didReceiveEvent:(long long)arg2 data:(id)arg3;	// IMP=0x0010000000023222
- (id)additionalAXNotificationsToObserve;	// IMP=0x00100000000231d2
- (void)fetcher:(id)arg1 didFetchElementsForEvent:(unsigned long long)arg2 foundNewElements:(_Bool)arg3;	// IMP=0x0010000000023175
- (_Bool)isSystemSleeping:(id)arg1;	// IMP=0x001000000002312a
- (struct CGRect)screenFrame:(id)arg1;	// IMP=0x001000000002310c
- (void)_handleRealContinuousScrollToolMove:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x00100000000230fa
- (void)_handleRealContinuousScrollToolUp:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000023076
- (void)_handleRealDragToolMove:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000023010
- (void)_handleRealDragToolUp:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000022f0f
- (void)endDragModeAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2 completed:(_Bool)arg3;	// IMP=0x001000000002271c
- (void)beginDragAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000022385
- (void)beginDragMenuAtPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002236c
- (void)startDragModeOnDisplay:(id)arg1;	// IMP=0x00100000000221a7
- (void)moveFingersToPointInFingerCoordinateSpace:(struct CGPoint)arg1 onDisplay:(id)arg2 allowOutOfBounds:(_Bool)arg3;	// IMP=0x0010000000021b83
- (void)_moveFingersToPointInFingerCoordinateSpace:(struct CGPoint)arg1 onDisplay:(id)arg2 allowOutOfBounds:(_Bool)arg3 animated:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x0010000000021a2b
- (void)_moveFingersToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x001000000002197c
- (void)_moveSystemPointerIfActiveToPoint:(struct CGPoint)arg1 onDisplay:(id)arg2;	// IMP=0x0010000000021863
- (void)_systemPointerSettingsDidChange;	// IMP=0x00100000000216bd
- (id)viewAtSystemPointerPoint;	// IMP=0x0010000000021625
- (_Bool)hitTestsViewAtSystemPointerPoint;	// IMP=0x00100000000215f2
- (_Bool)shouldHandleSystemPointerButtonEvent:(id)arg1;	// IMP=0x0010000000021389
- (_Bool)shouldHideSystemPointerForFingersView;	// IMP=0x00100000000211a7
- (void)cleanupPointerStreamIfNecessary;	// IMP=0x0010000000021171
- (void)pointerController:(id)arg1 didReceivePointerEvent:(id)arg2;	// IMP=0x0010000000020c3b
- (void)keyboardVisible:(_Bool)arg1 withFrame:(struct CGRect)arg2;	// IMP=0x0010000000020bdd
- (void)restartEverything;	// IMP=0x001000000002095b
- (void)systemServerConnected;	// IMP=0x0010000000020942
- (void)setupNonSceneUI:(_Bool)arg1;	// IMP=0x0010000000020725
- (void)refreshOrientation;	// IMP=0x00100000000204dd
- (int);	// IMP=0x0010000000020487
- (void)_registerForSettingsNotifications;	// IMP=0x001000000001fb0b
- (void)_handleUsageConfirmation;	// IMP=0x001000000001f91e
- (void)_handleBrokenHomeButtonMode;	// IMP=0x001000000001f4bb
- (void)_bootstrapRegister;	// IMP=0x001000000001f39d
- (void)dealloc;	// IMP=0x001000000001f24c
- (_Bool)_elementFetchingRequired;	// IMP=0x001000000001f23c
- (id)init;	// IMP=0x001000000001eac1
- (id)testingEventManager;	// IMP=0x00100000000362c8

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

