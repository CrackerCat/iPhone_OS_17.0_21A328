//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CKRecordID, CKServerChangeToken, GKCloudPlayer, NSArray, NSDate, NSDictionary, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface GKSessionCache : NSObject
{
    NSObject<OS_dispatch_queue> *_cacheQueue;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_cacheUserQueue;	// 16 = 0x10
    _Bool _userHasSubscription;	// 24 = 0x18
    _Bool _friendRecordNeedsUpdate;	// 25 = 0x19
    CKRecordID *_userRecordID;	// 32 = 0x20
    double _lastSaveTimeStamp;	// 40 = 0x28
    NSMutableDictionary *_bundleIDsByContainerName;	// 48 = 0x30
    NSMutableDictionary *_bundleIDExpirations;	// 56 = 0x38
    struct sqlite3 *_database;	// 64 = 0x40
    NSString *_databasePath;	// 72 = 0x48
    NSDate *_expiration;	// 80 = 0x50
}

- (void).cxx_destruct;	// IMP=0x00200000000e99d7
@property(retain, nonatomic) NSDate *expiration; // @synthesize expiration=_expiration;
@property(retain, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(nonatomic) struct sqlite3 *database; // @synthesize database=_database;
@property(retain, nonatomic) NSMutableDictionary *bundleIDExpirations; // @synthesize bundleIDExpirations=_bundleIDExpirations;
@property(retain, nonatomic) NSMutableDictionary *bundleIDsByContainerName; // @synthesize bundleIDsByContainerName=_bundleIDsByContainerName;
@property(retain, nonatomic) CKRecordID *userRecordID; // @synthesize userRecordID=_userRecordID;
- (double)doubleFromRowStatement:(struct sqlite3_stmt *)arg1 column:(int)arg2;	// IMP=0x00100000000e9937
- (int)intFromRowStatement:(struct sqlite3_stmt *)arg1 column:(int)arg2;	// IMP=0x00100000000e9928
- (id)stringFromRowStatement:(struct sqlite3_stmt *)arg1 column:(int)arg2;	// IMP=0x00100000000e9902
- (id)dataFromRowStatement:(struct sqlite3_stmt *)arg1 column:(int)arg2;	// IMP=0x00100000000e98b8
- (_Bool)stepStatement:(id)arg1 parameters:(id)arg2 rowHandler:(CDUnknownBlockType)arg3;	// IMP=0x00100000000e9306
- (_Bool)executeStatement:(id)arg1;	// IMP=0x00100000000e9189
- (void)closeDatabase;	// IMP=0x00100000000e9168
- (_Bool)openDatabase;	// IMP=0x00100000000e9133
- (id)sessionWithIdentifier:(id)arg1;	// IMP=0x00100000000e8edf
- (id)sessionsInContainer:(id)arg1 ownerName:(id)arg2;	// IMP=0x00100000000e8bc7
- (id)sessionsInContainer:(id)arg1;	// IMP=0x00100000000e8bb3
- (id)sessionWithRecordID:(id)arg1;	// IMP=0x00100000000e8b4d
- (id)sessionFromData:(id)arg1;	// IMP=0x00100000000e8aaa
- (void)updateWithChangedSessions:(id)arg1 removedSessions:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00100000000e7a65
- (void)setFriendPlayers:(id)arg1 withEmails:(id)arg2;	// IMP=0x00100000000e7522
@property(readonly, nonatomic) NSDictionary *friendEmailsByID; // @dynamic friendEmailsByID;
@property(readonly, nonatomic) NSArray *friendPlayers; // @dynamic friendPlayers;
- (void)_setToken:(id)arg1 forContainerName:(id)arg2 ownerName:(id)arg3;	// IMP=0x00100000000e6d7b
- (void)updateWithChangedTokens:(id)arg1 removedTokenZoneIDs:(id)arg2;	// IMP=0x00100000000e68ed
- (void)setToken:(id)arg1 forContainerName:(id)arg2 ownerName:(id)arg3;	// IMP=0x00100000000e67af
- (id)tokenForContainerName:(id)arg1 ownerName:(id)arg2;	// IMP=0x00100000000e651d
@property(retain, nonatomic) CKServerChangeToken *sharedDBToken; // @dynamic sharedDBToken;
@property(retain, nonatomic) CKServerChangeToken *privateDBToken; // @dynamic privateDBToken;
- (void)setToken:(id)arg1 forZoneID:(id)arg2;	// IMP=0x00100000000e63f1
- (id)tokenForZoneID:(id)arg1;	// IMP=0x00100000000e634e
- (id)tokenFromData:(id)arg1;	// IMP=0x00100000000e62ab
@property(nonatomic) double lastSaveTimeStamp; // @synthesize lastSaveTimeStamp=_lastSaveTimeStamp;
@property(nonatomic) _Bool friendRecordNeedsUpdate; // @synthesize friendRecordNeedsUpdate=_friendRecordNeedsUpdate;
@property(nonatomic) _Bool userHasSubscription; // @synthesize userHasSubscription=_userHasSubscription;
- (_Bool)saveUserInfo;	// IMP=0x00100000000e5d56
- (void)readUserInfoFromDatabase;	// IMP=0x00100000000e5c05
- (void)writeBundleIDsToDisk;	// IMP=0x00100000000e5ac1
- (void)readBundleIDsFromDisk;	// IMP=0x00100000000e592f
- (id)bundleIDCacheURL;	// IMP=0x00100000000e587e
- (void)updateBundleIDs:(id)arg1 forContainerName:(id)arg2;	// IMP=0x00100000000e56de
- (id)bundleIDsForContainerName:(id)arg1;	// IMP=0x00100000000e54f3
- (void)updateUserWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e4f5f
@property(readonly, nonatomic) GKCloudPlayer *userPlayer; // @dynamic userPlayer;
- (void)createDatabaseIfNeeded;	// IMP=0x00100000000e49d3
- (void)updateDatabasePath;	// IMP=0x00100000000e48a4
@property(nonatomic) _Bool isValid; // @dynamic isValid;
- (void)clearWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00100000000e4638
- (id)init;	// IMP=0x00100000000e455c

@end

