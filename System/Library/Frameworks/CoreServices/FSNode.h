//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSString, NSURL;

__attribute__((visibility("hidden")))
@interface FSNode : NSObject
{
    NSURL *_url;	// 8 = 0x8
    unsigned long long _cacheExpiration;	// 16 = 0x10
    unsigned int _isDirectory:2;	// 24 = 0x18
    unsigned int _hasReferringAliasNode:1;	// 24 = 0x18
    unsigned int _canUseFileCache:1;	// 24 = 0x18
    unsigned int _isInitialized:1;	// 24 = 0x18
}

+ (id)userDataVolumeNode;	// IMP=0x00100000000115f3
+ (id)systemDataVolumeNode;	// IMP=0x0010000000011525
+ (id)prebootVolumeNode;	// IMP=0x0010000000011457
+ (id)rootVolumeNode;	// IMP=0x0010000000011389
+ (id)_resolvedNodeFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x001000000001031e
+ (id)_resolvedURLFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x00100000000101bb
+ (_Bool)supportsSecureCoding;	// IMP=0x001000000000e97d
+ (_Bool)canReadMetadataOfURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x00100000000133d9
+ (_Bool)canWriteURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x00100000000133c0
+ (_Bool)canReadURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x00100000000133a7
+ (_Bool)canReadMetadataOfURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x00100000000131ac
+ (_Bool)canWriteURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x0010000000013193
+ (_Bool)canReadURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2;	// IMP=0x001000000001317a
+ (_Bool)canAccessURL:(id)arg1 fromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg2 operation:(const char *)arg3;	// IMP=0x0010000000012f82
+ (_Bool)canAccessURL:(id)arg1 withAuditToken:(const CDStruct_4c969caf *)arg2 operation:(const char *)arg3;	// IMP=0x0010000000012e55
+ (_Bool)getFileSystemRepresentation:(char [1024])arg1 forBookmarkData:(id)arg2;	// IMP=0x00100000000149ec
+ (_Bool)isBookmarkDataFull:(id)arg1;	// IMP=0x0010000000014964
+ (_Bool)getVolumeIdentifier:(unsigned long long *)arg1 forBookmarkData:(id)arg2 error:(id *)arg3;	// IMP=0x00100000000148dc
+ (id)nameForBookmarkData:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000014756
+ (id)pathForBookmarkData:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000014539
+ (unsigned char)compareBookmarkData:(id)arg1 toBookmarkData:(id)arg2;	// IMP=0x00100000000142e9
+ (id)injectSimulatorRootIntoBookmarkData:(id)arg1;	// IMP=0x0010000000013ef6
+ (id)removeSimulatorRootFromBookmarkData:(id)arg1;	// IMP=0x0010000000013d64
+ (id)simulatorRootPath;	// IMP=0x0010000000013c1d
- (void).cxx_destruct;	// IMP=0x0000000000012b5d
- (_Bool)getWriterBundleIdentifier:(id *)arg1 error:(id *)arg2;	// IMP=0x0000000000012b0e
- (_Bool)getHFSType:(unsigned int *)arg1 creator:(unsigned int *)arg2 error:(id *)arg3;	// IMP=0x0000000000012809
- (_Bool)getLength:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x000000000001277e
- (_Bool)getContentModificationDate:(double *)arg1 error:(id *)arg2;	// IMP=0x000000000001276a
- (_Bool)getCreationDate:(double *)arg1 error:(id *)arg2;	// IMP=0x00000000000124fe
- (id)bundleIdentifierWithContext:(struct LSContext *)arg1 error:(id *)arg2;	// IMP=0x0000000000012266
- (id)bundleIdentifierWithError:(id *)arg1;	// IMP=0x000000000001224f
- (id)bundleInfoDictionaryWithError:(id *)arg1;	// IMP=0x00000000000120f4
- (struct __CFBundle *)copyCFBundleWithError:(id *)arg1;	// IMP=0x0000000000011fbe
- (_Bool)getOwnerUID:(unsigned int *)arg1 error:(id *)arg2;	// IMP=0x0000000000011f34
- (_Bool)getFileIdentifier:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x0000000000011ea9
- (_Bool)getInodeNumber:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x0000000000011e1e
- (_Bool)getDeviceNumber:(int *)arg1 error:(id *)arg2;	// IMP=0x0000000000011d94
@property(readonly, getter=isAVCHDCollection) _Bool AVCHDCollection;
@property(readonly, nonatomic, getter=isOnLocalVolume) _Bool onLocalVolume; // @dynamic onLocalVolume;
@property(readonly, nonatomic, getter=isOnDiskImage) _Bool onDiskImage; // @dynamic onDiskImage;
@property(readonly, nonatomic, getter=isSecuredSystemContent) _Bool securedSystemContent; // @dynamic securedSystemContent;
- (_Bool)getVolumeIdentifier:(unsigned long long *)arg1 error:(id *)arg2;	// IMP=0x0000000000011736
@property(readonly, nonatomic, getter=isMountTrigger) _Bool mountTrigger; // @dynamic mountTrigger;
@property(readonly, nonatomic, getter=isVolume) _Bool volume; // @dynamic volume;
- (id)extensionWithError:(id *)arg1;	// IMP=0x0000000000011190
- (id)nameWithError:(id *)arg1;	// IMP=0x0000000000011033
- (id)canonicalPathWithError:(id *)arg1;	// IMP=0x0000000000011019
- (id)pathWithError:(id *)arg1;	// IMP=0x0000000000011002
- (_Bool)getFileSystemRepresentation:(char [1024])arg1 error:(id *)arg2;	// IMP=0x0000000000010f48
- (id)canonical:(_Bool)arg1 pathWithError:(id *)arg2;	// IMP=0x0000000000010d68
@property(readonly, nonatomic) _Bool hasHiddenExtension; // @dynamic hasHiddenExtension;
@property(readonly, nonatomic, getter=isHidden) _Bool hidden; // @dynamic hidden;
@property(readonly, nonatomic, getter=isRegularFile) _Bool regularFile; // @dynamic regularFile;
@property(readonly, nonatomic) _Bool hasPackageBit; // @dynamic hasPackageBit;
@property(readonly, nonatomic, getter=isSideFault) _Bool sideFault; // @dynamic sideFault;
@property(readonly, nonatomic, getter=isAliasFile) _Bool aliasFile; // @dynamic aliasFile;
@property(readonly, nonatomic, getter=isSymbolicLink) _Bool symbolicLink; // @dynamic symbolicLink;
@property(readonly, nonatomic, getter=isResolvable) _Bool resolvable; // @dynamic resolvable;
@property(readonly, nonatomic, getter=isExecutable) _Bool executable; // @dynamic executable;
@property(readonly, nonatomic, getter=isExecutableModeFile) _Bool executableModeFile; // @dynamic executableModeFile;
@property(readonly, nonatomic, getter=isBusyDirectory) _Bool busyDirectory; // @dynamic busyDirectory;
@property(readonly, nonatomic, getter=isDirectory) _Bool directory; // @dynamic directory;
- (_Bool)getIsDirectory_NoIO:(_Bool *)arg1;	// IMP=0x00000000000106f0
- (id)temporaryDirectoryNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x00000000000105f5
- (id)resolvedNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x00000000000104f8
- (void)setReferringAliasNode:(id)arg1;	// IMP=0x000000000001017c
- (id)referringAliasNode;	// IMP=0x0000000000010151
- (id)diskImageURLWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x00000000000100e7
- (id)volumeNodeWithFlags:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x0000000000010047
- (id)childNodeWithRelativePath:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000fd7a
- (_Bool)childNodeWithRelativePathExists:(id)arg1;	// IMP=0x000000000000fd3f
- (_Bool)checkResourceIsReachableAndReturnError:(id *)arg1;	// IMP=0x000000000000fd16
- (id)sideFaultResourceValuesWithError:(id *)arg1;	// IMP=0x000000000000fbe4
- (_Bool)getCachedResourceValueIfPresent:(id *)arg1 forKey:(id)arg2 error:(id *)arg3;	// IMP=0x000000000000fbcc
- (void)setTemporaryResourceValue:(id)arg1 forKey:(id)arg2;	// IMP=0x000000000000fb5f
- (_Bool)getTemporaryResourceValue:(id *)arg1 forKey:(id)arg2;	// IMP=0x000000000000fb47
- (void)removeCachedResourceValueForKey:(id)arg1;	// IMP=0x000000000000faef
- (_Bool)setResourceValue:(id)arg1 forKey:(id)arg2 options:(unsigned char)arg3 error:(id *)arg4;	// IMP=0x000000000000f94e
- (_Bool)getResourceValue:(id *)arg1 forKey:(id)arg2 options:(unsigned char)arg3 error:(id *)arg4;	// IMP=0x000000000000f5e4
- (void)clearURLPropertyCacheIfStale;	// IMP=0x000000000000f545
- (id)initTemporaryNodeOnVolume:(id)arg1 flags:(unsigned int)arg2 fileDescriptor:(int *)arg3 error:(id *)arg4;	// IMP=0x000000000000f0db
- (id)initWithConfigurationString:(int)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000eff9
- (id)initWithDirectory:(unsigned long long)arg1 inDomain:(unsigned long long)arg2 lastPathComponent:(id)arg3 createIntermediateDirectories:(_Bool)arg4 flags:(unsigned int)arg5 error:(id *)arg6;	// IMP=0x000000000000ed22
- (id)initWithFileSystemRepresentation:(const char *)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000eba8
- (id)initWithPath:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000ea31
- (id)URL;	// IMP=0x000000000000e98d
@property(readonly, nonatomic) _Bool canIssueIO;
- (id)initWithCoder:(id)arg1;	// IMP=0x000000000000e767
- (void)encodeWithCoder:(id)arg1;	// IMP=0x000000000000e69f
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x000000000000e48c
- (id)redactedDescription;	// IMP=0x000000000000e437
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;	// IMP=0x000000000000e0fb
- (void)prepareForReuse;	// IMP=0x000000000000e034
- (id)initWithURL:(id)arg1 flags:(unsigned int)arg2 error:(id *)arg3;	// IMP=0x000000000000db08
- (_Bool)setFinderInfo:(const CDUnion_739f5cf2 *)arg1 error:(id *)arg2;	// IMP=0x0000000000012cbd
- (_Bool)getFinderInfo:(CDUnion_739f5cf2 *)arg1 error:(id *)arg2;	// IMP=0x0000000000012b6d
- (_Bool)canReadMetadataFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000013330
- (_Bool)canWriteFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x00000000000132b9
- (_Bool)canReadFromSandboxWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000013242
- (_Bool)canReadMetadataWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000013103
- (_Bool)canWriteWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x000000000001308c
- (_Bool)canReadWithAuditToken:(const CDStruct_4c969caf *)arg1;	// IMP=0x0000000000013015
- (_Bool)setExtendedAttribute:(id)arg1 name:(id)arg2 options:(int)arg3 error:(id *)arg4;	// IMP=0x000000000001393a
- (id)extendedAttributeWithName:(id)arg1 options:(int)arg2 error:(id *)arg3;	// IMP=0x000000000001346f
- (id)initByResolvingBookmarkData:(id)arg1 relativeToNode:(id)arg2 bookmarkDataIsStale:(_Bool *)arg3 error:(id *)arg4;	// IMP=0x000000000001450c
- (id)initByResolvingBookmarkData:(id)arg1 options:(unsigned long long)arg2 relativeToNode:(id)arg3 bookmarkDataIsStale:(_Bool *)arg4 error:(id *)arg5;	// IMP=0x0000000000014307
- (id)bookmarkDataWithOptions:(unsigned long long)arg1 relativeToNode:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000014076
- (id)bookmarkDataRelativeToNode:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000014059

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

