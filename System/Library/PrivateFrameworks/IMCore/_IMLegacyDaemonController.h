//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class IMDaemonListener, IMDaemonQueryController, IMLocalObject, IMRemoteObject, NSArray, NSLock, NSMutableArray, NSMutableDictionary, NSProtocolChecker, NSRecursiveLock, NSString;
@protocol IMDaemonProtocol, OS_dispatch_queue;

@interface _IMLegacyDaemonController : NSObject
{
    _Bool _requestingConnection;	// 8 = 0x8
    _Bool __blocksConnectionAtResume;	// 9 = 0x9
    _Bool _hasCheckedForDaemon;	// 10 = 0xa
    _Bool _preventReconnect;	// 11 = 0xb
    _Bool _inBlockingConnect;	// 12 = 0xc
    _Bool _acquiringDaemonConnection;	// 13 = 0xd
    _Bool _hasBeenSuspended;	// 14 = 0xe
    _Bool __autoReconnect;	// 15 = 0xf
    unsigned int _gMyFZListenerCapabilities;	// 16 = 0x10
    unsigned int _cachedCapabilities;	// 20 = 0x14
    unsigned int _lastUpdatedCapabilities;	// 24 = 0x18
    unsigned int __capabilities;	// 28 = 0x1c
    IMDaemonListener *_daemonListener;	// 32 = 0x20
    NSString *_listenerID;	// 40 = 0x28
    id <IMDaemonProtocol> _replyingRemoteDaemon;	// 48 = 0x30
    id <IMDaemonProtocol> _synchronousReplyingRemoteDaemon;	// 56 = 0x38
    IMDaemonQueryController *_queryController;	// 64 = 0x40
    NSArray *__servicesToAllow;	// 72 = 0x48
    NSArray *__servicesToDeny;	// 80 = 0x50
    id _delegate;	// 88 = 0x58
    IMRemoteObject<IMDaemonProtocol> *_remoteObject;	// 96 = 0x60
    NSMutableDictionary *_listenerMap;	// 104 = 0x68
    IMLocalObject *_localObject;	// 112 = 0x70
    NSMutableArray *_services;	// 120 = 0x78
    NSProtocolChecker *_protocol;	// 128 = 0x80
    NSObject<OS_dispatch_queue> *_listenerLockQueue;	// 136 = 0x88
    struct os_unfair_recursive_lock_s _remoteDaemonLock;	// 144 = 0x90
    NSObject<OS_dispatch_queue> *_localObjectLockQueue;	// 152 = 0x98
    NSObject<OS_dispatch_queue> *_daemonConnectionQueue;	// 160 = 0xa0
    NSRecursiveLock *_connectionLock;	// 168 = 0xa8
    struct __CFRunLoopSource *_runLoopSource;	// 176 = 0xb0
    NSLock *_blockingLock;	// 184 = 0xb8
    NSObject<OS_dispatch_queue> *_remoteMessageQueue;	// 192 = 0xc0
}

+ (void)_setApplicationWillTerminate;	// IMP=0x0010000000050a33
+ (void)_blockUntilSendQueueIsEmpty;	// IMP=0x00100000000508eb
+ (_Bool)_applicationWillTerminate;	// IMP=0x00100000000508df
- (void).cxx_destruct;	// IMP=0x00000000000546f0
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *remoteMessageQueue; // @synthesize remoteMessageQueue=_remoteMessageQueue;
@property(setter=_setAutoReconnect:) _Bool _autoReconnect; // @synthesize _autoReconnect=__autoReconnect;
@property(setter=__setCapabilities:) unsigned int _capabilities; // @synthesize _capabilities=__capabilities;
@property(nonatomic) unsigned int lastUpdatedCapabilities; // @synthesize lastUpdatedCapabilities=_lastUpdatedCapabilities;
@property(nonatomic) unsigned int cachedCapabilities; // @synthesize cachedCapabilities=_cachedCapabilities;
@property(nonatomic) unsigned int gMyFZListenerCapabilities; // @synthesize gMyFZListenerCapabilities=_gMyFZListenerCapabilities;
@property(nonatomic) _Bool hasBeenSuspended; // @synthesize hasBeenSuspended=_hasBeenSuspended;
@property(nonatomic) _Bool acquiringDaemonConnection; // @synthesize acquiringDaemonConnection=_acquiringDaemonConnection;
@property(nonatomic) _Bool inBlockingConnect; // @synthesize inBlockingConnect=_inBlockingConnect;
@property(nonatomic) _Bool preventReconnect; // @synthesize preventReconnect=_preventReconnect;
@property(nonatomic) _Bool hasCheckedForDaemon; // @synthesize hasCheckedForDaemon=_hasCheckedForDaemon;
@property(retain, nonatomic) NSLock *blockingLock; // @synthesize blockingLock=_blockingLock;
@property(nonatomic) struct __CFRunLoopSource *runLoopSource; // @synthesize runLoopSource=_runLoopSource;
@property(retain, nonatomic) NSRecursiveLock *connectionLock; // @synthesize connectionLock=_connectionLock;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *daemonConnectionQueue; // @synthesize daemonConnectionQueue=_daemonConnectionQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *localObjectLockQueue; // @synthesize localObjectLockQueue=_localObjectLockQueue;
@property(nonatomic) struct os_unfair_recursive_lock_s remoteDaemonLock; // @synthesize remoteDaemonLock=_remoteDaemonLock;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *listenerLockQueue; // @synthesize listenerLockQueue=_listenerLockQueue;
@property(retain, nonatomic) NSProtocolChecker *protocol; // @synthesize protocol=_protocol;
@property(retain, nonatomic) NSMutableArray *services; // @synthesize services=_services;
@property(retain, nonatomic) IMLocalObject *localObject; // @synthesize localObject=_localObject;
@property(retain, nonatomic) NSMutableDictionary *listenerMap; // @synthesize listenerMap=_listenerMap;
@property(retain, nonatomic) IMRemoteObject<IMDaemonProtocol> *remoteObject; // @synthesize remoteObject=_remoteObject;
@property(nonatomic) __weak id delegate; // @synthesize delegate=_delegate;
@property(nonatomic, setter=_setBlocksConnectionAtResume:) _Bool _blocksConnectionAtResume; // @synthesize _blocksConnectionAtResume=__blocksConnectionAtResume;
@property(retain, setter=_setServicesToDeny:) NSArray *_servicesToDeny; // @synthesize _servicesToDeny=__servicesToDeny;
@property(retain, setter=_setServicesToAllow:) NSArray *_servicesToAllow; // @synthesize _servicesToAllow=__servicesToAllow;
@property(readonly, nonatomic) IMDaemonQueryController *queryController; // @synthesize queryController=_queryController;
@property(readonly, nonatomic) id <IMDaemonProtocol> synchronousReplyingRemoteDaemon; // @synthesize synchronousReplyingRemoteDaemon=_synchronousReplyingRemoteDaemon;
@property(readonly, nonatomic) id <IMDaemonProtocol> replyingRemoteDaemon; // @synthesize replyingRemoteDaemon=_replyingRemoteDaemon;
@property(readonly, nonatomic, getter=isRequestingConnection) _Bool requestingConnection; // @synthesize requestingConnection=_requestingConnection;
@property(retain, nonatomic, setter=_setListenerID:) NSString *listenerID; // @synthesize listenerID=_listenerID;
@property(retain, nonatomic) IMDaemonListener *listener; // @synthesize listener=_daemonListener;
- (void)systemApplicationDidResume;	// IMP=0x0000000000054364
- (void)systemApplicationWillEnterForeground;	// IMP=0x00000000000542d1
- (void)systemApplicationDidEnterBackground;	// IMP=0x0000000000054296
- (void)systemApplicationDidSuspend;	// IMP=0x000000000005425b
- (void)forwardInvocation:(id)arg1;	// IMP=0x0000000000053e29
- (id)methodSignatureForSelector:(SEL)arg1;	// IMP=0x0000000000053e10
- (_Bool)consumeQueryContext:(id)arg1;	// IMP=0x0000000000053d44
- (void)unsetQueryContext:(id)arg1;	// IMP=0x0000000000053c7a
- (void)setQueryContext:(id)arg1;	// IMP=0x0000000000053ba9
- (void)sendQueryWithReply:(_Bool)arg1 query:(CDUnknownBlockType)arg2;	// IMP=0x0000000000053b2c
- (void)setDaemonLogsOutWithoutStatusListeners:(_Bool)arg1;	// IMP=0x0000000000053b26
- (void)setDaemonTerminatesWithoutListeners:(_Bool)arg1;	// IMP=0x0000000000053b20
- (void)listener:(id)arg1 setValue:(id)arg2 ofPersistentProperty:(id)arg3;	// IMP=0x0000000000053a91
- (void)listener:(id)arg1 setValue:(id)arg2 ofProperty:(id)arg3;	// IMP=0x0000000000053a02
- (void)remoteObjectDiedNotification:(id)arg1;	// IMP=0x00000000000537a8
- (void)localObjectDiedNotification:(id)arg1;	// IMP=0x000000000005365d
- (void)_setCapabilities:(unsigned int)arg1;	// IMP=0x00000000000535a5
@property(readonly, nonatomic) unsigned int capabilities;
- (void)listener:(id)arg1 setListenerCapabilities:(unsigned int)arg2;	// IMP=0x00000000000533c1
- (void)_remoteObjectCleanup;	// IMP=0x000000000005333c
- (void)_localObjectCleanup;	// IMP=0x000000000005329d
- (_Bool)localObjectExists;	// IMP=0x00000000000531e9
- (_Bool)remoteObjectExists;	// IMP=0x000000000005312c
- (_Bool)__isRemoteObjectValid;	// IMP=0x0000000000053033
- (_Bool)__isLocalObjectValidOnQueue:(id)arg1;	// IMP=0x0000000000052f15
- (void)_noteSetupComplete;	// IMP=0x0000000000052ef7
- (void)blockUntilConnected;	// IMP=0x000000000005272d
- (double)_connectionTimeout;	// IMP=0x00000000000526fa
@property(readonly, nonatomic, getter=isConnected) _Bool connected;
@property(readonly, nonatomic) _Bool isConnecting;
- (_Bool)_acquiringDaemonConnection;	// IMP=0x000000000005254a
- (id)_remoteObject;	// IMP=0x0000000000052402
- (unsigned long long)processCapabilities;	// IMP=0x00000000000523ed
- (_Bool)setCapabilities:(unsigned int)arg1 forListenerID:(id)arg2;	// IMP=0x0000000000052236
- (unsigned int)capabilitiesForListenerID:(id)arg1;	// IMP=0x00000000000520d4
- (_Bool)removeListenerID:(id)arg1;	// IMP=0x0000000000051e7d
- (_Bool)hasListenerForID:(id)arg1;	// IMP=0x0000000000051d5c
- (_Bool)addListenerID:(id)arg1 capabilities:(unsigned int)arg2;	// IMP=0x0000000000051b89
- (void)_listenerSetUpdated;	// IMP=0x00000000000518fa
@property(readonly, nonatomic) id <IMDaemonProtocol> synchronousRemoteDaemon;
@property(readonly, nonatomic) id <IMDaemonProtocol> remoteDaemon;
- (_Bool)connectToDaemonWithLaunch:(_Bool)arg1 capabilities:(unsigned int)arg2 blockUntilConnected:(_Bool)arg3;	// IMP=0x00000000000517e5
- (_Bool)connectToDaemon;	// IMP=0x00000000000517ce
- (_Bool)connectToDaemonWithLaunch:(_Bool)arg1;	// IMP=0x00000000000517b7
- (void)_connectToDaemonWithLaunch:(_Bool)arg1 capabilities:(unsigned int)arg2;	// IMP=0x00000000000513e0
- (void)disconnectFromDaemon;	// IMP=0x00000000000513da
- (void)_disconnectFromDaemonWithForce:(_Bool)arg1;	// IMP=0x0000000000050a67
- (void)disconnectFromDaemonWithForce:(_Bool)arg1;	// IMP=0x0000000000050a53
- (void)killDaemon;	// IMP=0x00000000000509cf
- (void)_blockUntilSendQueueIsEmpty;	// IMP=0x00000000000508f1
- (_Bool)_makeConnectionWithLaunch:(_Bool)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000000004f7f2
- (void)_handleDaemonException:(id)arg1;	// IMP=0x000000000004f285
- (void)_agentDidLaunchNotification:(id)arg1;	// IMP=0x000000000004f241
- (void)dealloc;	// IMP=0x000000000004f10d
- (id)init;	// IMP=0x000000000004ed2c

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

