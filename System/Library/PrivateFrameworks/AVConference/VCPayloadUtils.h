//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

__attribute__((visibility("hidden")))
@interface VCPayloadUtils : NSObject
{
}

+ (int)audioCodecBandwidthForVCAudioCodecBandwidth:(int)arg1;	// IMP=0x008000000009bc8f
+ (int)vcAudioCodecBandwidthForAudioCodecBandwidth:(int)arg1;	// IMP=0x008000000009bc7e
+ (unsigned int)bitrateForEVSCodecMode:(int)arg1;	// IMP=0x008000000009bc4f
+ (unsigned int)bitrateForAMRWBCodecMode:(int)arg1;	// IMP=0x008000000009bb57
+ (unsigned int)bitrateForAMRCodecMode:(int)arg1;	// IMP=0x008000000009ba5f
+ (_Bool)supportsCodecBandwidthUpdateForCodecType:(long long)arg1;	// IMP=0x008000000009ba4e
+ (_Bool)supportsCodecRateModesForCodecType:(long long)arg1;	// IMP=0x008000000009ba34
+ (unsigned int)bitrateForCodecType:(long long)arg1 mode:(int)arg2;	// IMP=0x008000000009b95c
+ (int)payloadForCodecType:(long long)arg1;	// IMP=0x008000000009b6c8
+ (long long)codecTypeForPayload:(int)arg1;	// IMP=0x008000000009b448
+ (float)qualityForPayload:(int)arg1 forBitrate:(unsigned int)arg2;	// IMP=0x008000000009b24f
+ (_Bool)shouldEnablePacketSizeLimitForAudioFormat:(struct AudioStreamBasicDescription *)arg1;	// IMP=0x008000000009b1d1
+ (unsigned int)internalBundleFactorForPayload:(int)arg1;	// IMP=0x008000000009b1bc
+ (_Bool)canBundleExternallyForPayload:(int)arg1 forBundlingScheme:(int)arg2 operatingMode:(int)arg3;	// IMP=0x008000000009b174
+ (_Bool)shouldUseCookieForPayload:(int)arg1;	// IMP=0x008000000009b158
+ (_Bool)skipBandWidthCheckForCodecRateModes:(int)arg1 supportedBitrates:(id)arg2;	// IMP=0x008000000009af9c
+ (_Bool)isFormatAACELDNonSBR48KHzStereo:(const struct AudioStreamBasicDescription *)arg1;	// IMP=0x008000000009af26
+ (_Bool)isOpus4Channel48KhzPayload:(int)arg1 outFormat:(const struct AudioStreamBasicDescription *)arg2;	// IMP=0x008000000009af00
+ (_Bool)isEVSPayload:(int)arg1;	// IMP=0x008000000009aee4
+ (_Bool)isCodecModeSupported:(int)arg1 forBandwidth:(int)arg2 withPayload:(int)arg3;	// IMP=0x008000000009aea2
+ (_Bool)isAMRCodecModeSupported:(int)arg1 forBandwidth:(int)arg2;	// IMP=0x008000000009ae84
+ (_Bool)isEVSCodecModeSupported:(int)arg1 forBandwidth:(int)arg2;	// IMP=0x008000000009ae2f
+ (int)codecRateModeForDesiredANBR:(unsigned int)arg1 payload:(int)arg2 supportedBitrates:(id)arg3 supportedBandwidths:(id)arg4;	// IMP=0x008000000009a8da
+ (id)allowedBitratesForPayload:(int)arg1 supportedBitrates:(id)arg2 supportedBandwidths:(id)arg3;	// IMP=0x008000000009a60d
+ (id)supportedCodecModesForBandwidth:(int)arg1 payload:(int)arg2;	// IMP=0x008000000009a5ba
+ (id)codecModesForEVS32kHz;	// IMP=0x008000000009a5ad
+ (id)codecModesForEVS16kHz;	// IMP=0x008000000009a5a0
+ (id)codecModesForEVS8kHz;	// IMP=0x008000000009a593
+ (id)codecModesForAMR16kHz;	// IMP=0x008000000009a586
+ (id)codecModesForAMR8kHz;	// IMP=0x008000000009a579
+ (int)codecBandwidthForPayload:(int)arg1;	// IMP=0x008000000009a54c
+ (_Bool)canSetBitrateForPayload:(int)arg1;	// IMP=0x008000000009a530
+ (unsigned int)codecSamplesPerFrameForPayload:(int)arg1 blockSize:(double)arg2 sampleRate:(unsigned int)arg3;	// IMP=0x008000000009a3ce
+ (double)blockSizeForPayload:(int)arg1 sampleRate:(unsigned int)arg2;	// IMP=0x008000000009a3ac
+ (double)opusSamplesPerFrameForSampleRate:(unsigned int)arg1 blockSize:(double)arg2;	// IMP=0x008000000009a38f
+ (unsigned int)codecSamplesPerFrameForPayload:(int)arg1 blockSize:(double)arg2;	// IMP=0x008000000009a374
+ (unsigned int)audioCodecTypeForPayload:(int)arg1;	// IMP=0x008000000009a24c
+ (unsigned int)sampleRateForCodecBandwidth:(int)arg1;	// IMP=0x008000000009a22c
+ (unsigned int)sampleRateForPayload:(int)arg1;	// IMP=0x008000000009a167
+ (_Bool)isPayloadSupportedInFaceTime:(int)arg1;	// IMP=0x008000000009a134
+ (_Bool)isUseCaseWatchContinuity:(int)arg1 primaryPayload:(int)arg2;	// IMP=0x008000000009a118

@end

