//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import "UIKeyboardLayout.h"

@class CADisplayLink, NSArray, NSDate, NSLayoutConstraint, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSString, NSTimer, TUIKeyplaneView, UIButton, UIDelayedAction, UIGestureKeyboardIntroduction, UIImageView, UIKBBackgroundView, UIKBKeyViewAnimator, UIKBKeyplaneView, UIKBRenderConfig, UIKBResizingKeyplaneCoordinator, UIKBTree, UIKeyboardEmojiKeyDisplayController, UIKeyboardPathEffectView, UIKeyboardPinchGestureRecognizer, UIKeyboardSplitTransitionView, UISelectionFeedbackGenerator, UISwipeGestureRecognizer, UIView, _UIKeyboardTypingSpeedLogger;
@protocol UIKeyboardKeyplaneTransitionDelegate, UIKeyboardLayoutStarDelegate, UITextCursorAssertion;

__attribute__((visibility("hidden")))
@interface UIKeyboardLayoutStar : UIKeyboardLayout
{
    UIKBTree *_keyboard;	// 192 = 0xc0
    UIKBTree *_keyplane;	// 200 = 0xc8
    NSString *_keyboardName;	// 208 = 0xd0
    NSString *_keyplaneName;	// 216 = 0xd8
    long long _appearance;	// 224 = 0xe0
    UIKBTree *_activeKey;	// 232 = 0xe8
    UIKBTree *_inactiveLanguageIndicator;	// 240 = 0xf0
    UIKBKeyplaneView *_keyplaneView;	// 248 = 0xf8
    UIKBBackgroundView *_backgroundView;	// 256 = 0x100
    UIKBKeyViewAnimator *_keyViewAnimator;	// 264 = 0x108
    UIKeyboardEmojiKeyDisplayController *_emojiKeyManager;	// 272 = 0x110
    double _prevTouchUpTime;	// 280 = 0x118
    double _prevTouchUpFinishedTime;	// 288 = 0x120
    double _prevTouchDownTime;	// 296 = 0x128
    unsigned long long _prevUpActions;	// 304 = 0x130
    NSMutableDictionary *_keyboards;	// 312 = 0x138
    NSMutableDictionary *_allKeyplaneViews;	// 320 = 0x140
    NSMutableSet *_allKeyplaneKeycaps;	// 328 = 0x148
    NSMutableSet *_validInputStrings;	// 336 = 0x150
    NSString *_localizedInputKey;	// 344 = 0x158
    int _preferredTrackingChangeCount;	// 352 = 0x160
    int _shiftTrackingChangeCount;	// 356 = 0x164
    NSMutableSet *_accentInfo;	// 360 = 0x168
    NSMutableSet *_hasAccents;	// 368 = 0x170
    id _spaceTarget;	// 376 = 0x178
    SEL _spaceAction;	// 384 = 0x180
    SEL _spaceLongAction;	// 392 = 0x188
    id _returnTarget;	// 400 = 0x190
    SEL _returnAction;	// 408 = 0x198
    SEL _returnLongAction;	// 416 = 0x1a0
    id _deleteTarget;	// 424 = 0x1a8
    SEL _deleteAction;	// 432 = 0x1b0
    SEL _deleteLongAction;	// 440 = 0x1b8
    _Bool _shift;	// 448 = 0x1c0
    _Bool _autoshift;	// 449 = 0x1c1
    _Bool _settingShift;	// 450 = 0x1c2
    _Bool _holdingShift;	// 451 = 0x1c3
    _Bool _didLongPress;	// 452 = 0x1c4
    NSString *_preTouchKeyplaneName;	// 456 = 0x1c8
    _Bool _revertKeyplaneAfterTouch;	// 464 = 0x1d0
    _Bool _wasShifted;	// 465 = 0x1d1
    _Bool _swipeDetected;	// 466 = 0x1d2
    _Bool _showIntlKey;	// 467 = 0x1d3
    _Bool _showDictationKey;	// 468 = 0x1d4
    _Bool _suppressDeactivateKeys;	// 469 = 0x1d5
    _Bool _suppressShiftKeyplaneAnimation;	// 470 = 0x1d6
    _Bool _isTrackpadMode;	// 471 = 0x1d7
    _Bool _shiftLockReady;	// 472 = 0x1d8
    double _shiftLockFirstTapTime;	// 480 = 0x1e0
    UISwipeGestureRecognizer *_rightSwipeRecognizer;	// 488 = 0x1e8
    UISwipeGestureRecognizer *_leftSwipeRecognizer;	// 496 = 0x1f0
    UISwipeGestureRecognizer *_upSwipeRecognizer;	// 504 = 0x1f8
    UIKeyboardPinchGestureRecognizer *_pinchGestureRecognizer;	// 512 = 0x200
    UIKeyboardSplitTransitionView *_transitionView;	// 520 = 0x208
    double _initialSplitProgress;	// 528 = 0x210
    double _finalSplitProgress;	// 536 = 0x218
    double _autoSplitLastUpdate;	// 544 = 0x220
    double _autoSplitElapsedTime;	// 552 = 0x228
    CADisplayLink *_displayLink;	// 560 = 0x230
    _Bool _ghostKeysEnabled;	// 568 = 0x238
    UIDelayedAction *_delayedCentroidUpdate;	// 576 = 0x240
    _Bool _isRebuilding;	// 584 = 0x248
    long long _currentHandBias;	// 592 = 0x250
    NSString *_layoutTag;	// 600 = 0x258
    _Bool _preRotateShift;	// 608 = 0x260
    NSString *_preRotateKeyplaneName;	// 616 = 0x268
    _Bool _preRotateTrackpadMode;	// 624 = 0x270
    UIDelayedAction *_multitapAction;	// 632 = 0x278
    _Bool _unshiftAfterMultitap;	// 640 = 0x280
    int _multitapCount;	// 644 = 0x284
    UIKBTree *_multitapKey;	// 648 = 0x288
    UIView *_flickPopupView;	// 656 = 0x290
    NSMutableDictionary *_compositeImages;	// 664 = 0x298
    NSTimer *_flickPopuptimer;	// 672 = 0x2a0
    id _touchInfo;	// 680 = 0x2a8
    UIView *_dimKeyboardImageView;	// 688 = 0x2b0
    _Bool _keyboardImageViewIsDim;	// 696 = 0x2b8
    _Bool _isOutOfBounds;	// 697 = 0x2b9
    UIDelayedAction *_dismissModalDoubleConsonantKeys;	// 704 = 0x2c0
    _Bool _inDealloc;	// 712 = 0x2c8
    NSMutableSet *_keysUnderIndicator;	// 720 = 0x2d0
    _UIKeyboardTypingSpeedLogger *_typingSpeedLogger;	// 728 = 0x2d8
    UIKBRenderConfig *_passcodeRenderConfig;	// 736 = 0x2e0
    long long _setKeyplaneViewCount;	// 744 = 0x2e8
    _Bool _inputTraitsPreventInitialReuse;	// 752 = 0x2f0
    _Bool _settingFloat;	// 753 = 0x2f1
    NSMutableSet *_leftKeySet;	// 760 = 0x2f8
    NSMutableSet *_rightKeySet;	// 768 = 0x300
    struct CGPoint _leftDriftOffset;	// 776 = 0x308
    struct CGPoint _rightDriftOffset;	// 792 = 0x318
    NSMutableArray *_leftSideReachability;	// 808 = 0x328
    NSMutableArray *_rightSideReachability;	// 816 = 0x330
    NSNumber *_homeRowHint;	// 824 = 0x338
    double _touchDownTimeSpan;	// 832 = 0x340
    NSDate *_prevTouchMoreKeyTime;	// 840 = 0x348
    NSDate *_prevProgressiveCandidateRequestTime;	// 848 = 0x350
    NSTimer *_progressiveCandidateUpdateTimer;	// 856 = 0x358
    NSString *_lastInputMode;	// 864 = 0x360
    _Bool _pendingDictationReload;	// 872 = 0x368
    _Bool _hasPeekedGestureKey;	// 873 = 0x369
    _Bool _lastInputIsGestureKey;	// 874 = 0x36a
    UIGestureKeyboardIntroduction *_gestureKeyboardIntroduction;	// 880 = 0x370
    _Bool _dictationUsingServerManualEndpointing;	// 888 = 0x378
    _Bool _splitTransitionNeedsRebuild;	// 889 = 0x379
    _Bool _selectedVariantIndexChanged;	// 890 = 0x37a
    NSMutableDictionary *_extendedTouchInfoMap;	// 896 = 0x380
    UIKBResizingKeyplaneCoordinator *_resizingKeyplaneCoordinator;	// 904 = 0x388
    UIButton *_biasEscapeButton;	// 912 = 0x390
    NSLayoutConstraint *_biasEscapeButtonLeftConstraint;	// 920 = 0x398
    NSLayoutConstraint *_biasEscapeButtonRightConstraint;	// 928 = 0x3a0
    NSMutableSet *_keyplaneTransformations;	// 936 = 0x3a8
    UIImageView *_pathEffectGlowView;	// 944 = 0x3b0
    UIKeyboardPathEffectView *_pathEffectView;	// 952 = 0x3b8
    NSArray *_pathEffectViewConstraints;	// 960 = 0x3c0
    _Bool _isContinuousPathUnderway;	// 968 = 0x3c8
    UIView *_keyplaneTransformationAreaView;	// 976 = 0x3d0
    _Bool _externalDictationAndInternationalKeys;	// 984 = 0x3d8
    _Bool _showsPunctuationKeysOnPrimaryKeyplane;	// 985 = 0x3d9
    TUIKeyplaneView *_liveKeyplaneView;	// 992 = 0x3e0
    _Bool _layoutSupportsCrescendo;	// 1000 = 0x3e8
    NSArray *_liveKeyplaneConstraints;	// 1008 = 0x3f0
    _Bool _preventPaddlesForPointerTouches;	// 1016 = 0x3f8
    _Bool _muteNextKeyClickSound;	// 1017 = 0x3f9
    int playKeyClickSoundOn;	// 1020 = 0x3fc
    UIKBRenderConfig *_renderConfig;	// 1024 = 0x400
    UIView *_modalDisplayView;	// 1032 = 0x408
    UISelectionFeedbackGenerator *_slideBehaviour;	// 1040 = 0x410
    id <UIKeyboardLayoutStarDelegate> _delegate;	// 1048 = 0x418
    double _lastTwoFingerTapTimestamp;	// 1056 = 0x420
    id <UITextCursorAssertion> _blinkAssertion;	// 1064 = 0x428
    id <UIKeyboardKeyplaneTransitionDelegate> _splitKeyplaneTransitionDelegate;	// 1072 = 0x430
}

+ (id)sharedPunctuationCharacterSet;	// IMP=0x0010000000bff730
+ (id)sharedRivenKeyplaneGenerator;	// IMP=0x0010000000bdd05a
+ (struct CGSize)keyboardSizeForInputMode:(id)arg1 screenTraits:(id)arg2 keyboardType:(long long)arg3;	// IMP=0x0010000000bd7739
+ (id)keyboardWithName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x0010000000bd74f2
+ (id)keyboardFromFactoryWithName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x0010000000bd7225
+ (void)accessibilitySensitivityChanged;	// IMP=0x0010000000bd690d
+ (Class)_subclassForScreenTraits:(id)arg1;	// IMP=0x0010000000bd624c
- (void).cxx_destruct;	// IMP=0x0000000000c12a86
@property(nonatomic) __weak id <UIKeyboardKeyplaneTransitionDelegate> splitKeyplaneTransitionDelegate; // @synthesize splitKeyplaneTransitionDelegate=_splitKeyplaneTransitionDelegate;
@property(retain, nonatomic) id <UITextCursorAssertion> blinkAssertion; // @synthesize blinkAssertion=_blinkAssertion;
@property(nonatomic) _Bool muteNextKeyClickSound; // @synthesize muteNextKeyClickSound=_muteNextKeyClickSound;
@property(nonatomic) _Bool preventPaddlesForPointerTouches; // @synthesize preventPaddlesForPointerTouches=_preventPaddlesForPointerTouches;
@property(nonatomic) double lastTwoFingerTapTimestamp; // @synthesize lastTwoFingerTapTimestamp=_lastTwoFingerTapTimestamp;
@property(nonatomic) id <UIKeyboardLayoutStarDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) UISelectionFeedbackGenerator *slideBehaviour; // @synthesize slideBehaviour=_slideBehaviour;
@property(retain, nonatomic) UIView *modalDisplayView; // @synthesize modalDisplayView=_modalDisplayView;
@property(retain, nonatomic) UIKBRenderConfig *renderConfig; // @synthesize renderConfig=_renderConfig;
@property(copy, nonatomic) NSString *preTouchKeyplaneName; // @synthesize preTouchKeyplaneName=_preTouchKeyplaneName;
@property(nonatomic) int playKeyClickSoundOn; // @synthesize playKeyClickSoundOn;
@property(copy, nonatomic) NSString *localizedInputKey; // @synthesize localizedInputKey=_localizedInputKey;
@property(readonly, nonatomic) _Bool showsDictationKey; // @synthesize showsDictationKey=_showDictationKey;
@property(readonly, nonatomic) _Bool showsInternationalKey; // @synthesize showsInternationalKey=_showIntlKey;
@property(nonatomic) _Bool didLongPress; // @synthesize didLongPress=_didLongPress;
@property(nonatomic) _Bool autoShift; // @synthesize autoShift=_autoshift;
@property(nonatomic) _Bool shift; // @synthesize shift=_shift;
@property(retain, nonatomic) UIKBTree *activeKey; // @synthesize activeKey=_activeKey;
@property(copy, nonatomic) NSString *keyplaneName; // @synthesize keyplaneName=_keyplaneName;
@property(copy, nonatomic) NSString *keyboardName; // @synthesize keyboardName=_keyboardName;
@property(readonly, nonatomic) UIKBTree *keyplane; // @synthesize keyplane=_keyplane;
@property(readonly, nonatomic) UIKBTree *keyboard; // @synthesize keyboard=_keyboard;
- (void)typingStyleEstimator:(id)arg1 didChangeTypingStyleEstimate:(unsigned long long)arg2;	// IMP=0x0000000000c126e1
- (void)triggerSpaceKeyplaneSwitchIfNecessary;	// IMP=0x0000000000c125a1
- (_Bool)is10KeyRendering;	// IMP=0x0000000000c12529
- (_Bool)isEmojiKeyplane;	// IMP=0x0000000000c124e4
- (_Bool)keyplaneContainsEmojiKey;	// IMP=0x0000000000c1245e
- (_Bool)keyplaneContainsDismissKey;	// IMP=0x0000000000c12419
- (void)updateGlobeKeyAndLayoutOriginBeforeSnapshotForInputView:(id)arg1;	// IMP=0x0000000000c1229b
- (id)currentKeyplaneView;	// IMP=0x0000000000c12286
- (id)currentKeyplane;	// IMP=0x0000000000c12271
- (void)fadeWithInvocation:(id)arg1;	// IMP=0x0000000000c12141
- (id)simulateTouchForCharacter:(id)arg1 errorVector:(struct CGPoint)arg2 shouldTypeVariants:(_Bool)arg3 baseKeyForVariants:(_Bool)arg4;	// IMP=0x0000000000c11de7
- (id)simulateTouch:(struct CGPoint)arg1;	// IMP=0x0000000000c11c59
- (struct CGPoint)applyError:(struct CGPoint)arg1 toKey:(id)arg2;	// IMP=0x0000000000c119ef
- (void)switchKeyplane:(id)arg1;	// IMP=0x0000000000c11924
- (void)changeToKeyplane:(id)arg1;	// IMP=0x0000000000c11856
- (id)keyplaneNamed:(id)arg1;	// IMP=0x0000000000c117dc
- (id)keyplaneForKey:(id)arg1;	// IMP=0x0000000000c11762
- (id)baseKeyForString:(id)arg1;	// IMP=0x0000000000c10e98
- (_Bool)shouldRetestKey:(id)arg1 slidOffKey:(id)arg2 withKeyplane:(id)arg3;	// IMP=0x0000000000c10dbc
- (_Bool)shouldRetestTouchDraggedFromKey:(id)arg1;	// IMP=0x0000000000c10da7
- (void)didRotate;	// IMP=0x0000000000c10bae
- (void)willRotate;	// IMP=0x0000000000c10aa5
- (void)updateKeyCentroids;	// IMP=0x0000000000c10137
- (void)divideKeysIntoLeft:(id)arg1 right:(id)arg2;	// IMP=0x0000000000c0fa69
- (_Bool)isShiftKeyBeingHeld;	// IMP=0x0000000000c0fa40
- (void)setAutoshift:(_Bool)arg1;	// IMP=0x0000000000c0fa02
- (void)updateUndoKeyState;	// IMP=0x0000000000c0f926
- (void)setMultitapReverseKeyState;	// IMP=0x0000000000c0f781
- (void)updateShiftKeyState;	// IMP=0x0000000000c0ef07
- (int)stateForShiftKey:(id)arg1;	// IMP=0x0000000000c0ec5b
- (_Bool)diacriticForwardCompose;	// IMP=0x0000000000c0ec34
- (_Bool)supportsContinuousPath;	// IMP=0x0000000000c0ec0d
- (_Bool)isKanaPlane;	// IMP=0x0000000000c0ebf0
- (_Bool)isAlphabeticPlane;	// IMP=0x0000000000c0ebc9
- (_Bool)ignoresShiftState;	// IMP=0x0000000000c0eba2
- (_Bool)usesAutoShift;	// IMP=0x0000000000c0eb7b
- (void)upActionShift;	// IMP=0x0000000000c0ea68
- (void)downActionShiftWithKey:(id)arg1;	// IMP=0x0000000000c0e75b
- (void)refreshDualStringKeys;	// IMP=0x0000000000c0e5c4
- (unsigned long long)upActionFlagsForKey:(id)arg1;	// IMP=0x0000000000c0e1c0
- (unsigned long long)downActionFlagsForKey:(id)arg1;	// IMP=0x0000000000c0dc20
- (_Bool)keyHasAccentedVariants:(id)arg1;	// IMP=0x0000000000c0d840
- (_Bool)hasActiveContinuousPathInput;	// IMP=0x0000000000c0d691
- (id)activeTouchInfoForShift;	// IMP=0x0000000000c0d469
- (id)touchInfoForKey:(id)arg1;	// IMP=0x0000000000c0d274
- (void)clearAllTouchInfo;	// IMP=0x0000000000c0d118
- (void)clearInfoForTouch:(id)arg1 forResting:(_Bool)arg2;	// IMP=0x0000000000c0d030
- (void)clearInfoForTouch:(id)arg1;	// IMP=0x0000000000c0d01c
- (void)cancelTouchIfNecessaryForInfo:(id)arg1 forResting:(_Bool)arg2;	// IMP=0x0000000000c0cd2c
- (id)generateInfoForTouch:(id)arg1;	// IMP=0x0000000000c0cc4d
- (id)infoForTouch:(id)arg1;	// IMP=0x0000000000c0cbeb
- (id)infoForTouchUUID:(id)arg1;	// IMP=0x0000000000c0cbb2
- (void)swipeDetected:(id)arg1;	// IMP=0x0000000000c0cb02
- (void)uninstallGestureRecognizers;	// IMP=0x0000000000c0c963
- (void)installGestureRecognizers;	// IMP=0x0000000000c0c7bc
- (void)_gestureRecognizerFailed:(id)arg1;	// IMP=0x0000000000c0c79b
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;	// IMP=0x0000000000c0c6ca
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;	// IMP=0x0000000000c0c596
- (void)touchChanged:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000c0c439
- (void)touchCancelled:(id)arg1 forResting:(_Bool)arg2 executionContext:(id)arg3;	// IMP=0x0000000000c0bed9
- (void)touchCancelled:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000c0bec2
- (void)continueFromInternationalActionForTouchUp:(id)arg1 withActions:(unsigned long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(_Bool)arg5 prevActions:(unsigned long long)arg6 executionContext:(id)arg7;	// IMP=0x0000000000c0ae80
- (void)completeSendStringActionForTouchUp:(id)arg1 withActions:(unsigned long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(_Bool)arg5 prevActions:(unsigned long long)arg6 executionContext:(id)arg7;	// IMP=0x0000000000c09d3b
- (_Bool)shouldSendStringForFlick:(id)arg1;	// IMP=0x0000000000c09b7e
- (_Bool)shouldYieldToControlCenterForFlickWithInitialPoint:(struct CGPoint)arg1 finalPoint:(struct CGPoint)arg2;	// IMP=0x0000000000c09a6e
- (void)presentModalDisplayForKey:(id)arg1;	// IMP=0x0000000000c097a2
- (void)completeRetestForTouchUp:(id)arg1 timestamp:(double)arg2 interval:(double)arg3 executionContext:(id)arg4;	// IMP=0x0000000000c06b45
- (void)_recordKeystrokeStatisticForKeyPress;	// IMP=0x0000000000c06ae8
- (_Bool)shouldSendTouchUpToInputManager:(id)arg1;	// IMP=0x0000000000c069c2
- (void)handleKeyboardMenusForTouch:(id)arg1;	// IMP=0x0000000000c065e3
- (void)touchUp:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000c05854
- (_Bool)shouldRetestTouchUp:(id)arg1;	// IMP=0x0000000000c052af
- (void)handleDelayedCentroidUpdate;	// IMP=0x0000000000c05132
- (void)cancelDelayedCentroidUpdate;	// IMP=0x0000000000c050fa
- (void)refreshGhostKeyState;	// IMP=0x0000000000c05034
- (_Bool)performSpaceAction;	// IMP=0x0000000000c04fd3
- (_Bool)performReturnAction;	// IMP=0x0000000000c04f72
- (void)resetPanAlternativesForEndedTouch:(id)arg1;	// IMP=0x0000000000c04edf
- (void)updatePanAlternativesForTouchInfo:(id)arg1;	// IMP=0x0000000000c04b22
- (void)updateSelectedVariantIndexForKey:(id)arg1 withActions:(unsigned long long)arg2 withPoint:(struct CGPoint)arg3;	// IMP=0x0000000000c046b6
- (long long)defaultSelectedVariantIndexForKey:(id)arg1 withActions:(unsigned long long)arg2;	// IMP=0x0000000000c04578
- (void)completeHitTestForTouchDragged:(id)arg1 hitKey:(id)arg2;	// IMP=0x0000000000c02fff
- (void)touchDragged:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000c01609
- (void)touchDragged:(id)arg1;	// IMP=0x0000000000c014f7
- (_Bool)touchPassesDragThreshold:(id)arg1;	// IMP=0x0000000000c01188
- (_Bool)canForceTouchUUIDCommit:(id)arg1 inWindow:(id)arg2;	// IMP=0x0000000000c0107e
- (void)completeDeleteActionForTouchDownWithActions:(unsigned long long)arg1 executionContext:(id)arg2;	// IMP=0x0000000000c00f5f
- (void)completeSendStringActionForTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3;	// IMP=0x0000000000c00051
- (_Bool)showGestureKeyboardIntroductionIfNeeded;	// IMP=0x0000000000bffd92
- (_Bool)shouldShowGestureKeyboardIntroduction;	// IMP=0x0000000000bffc9f
- (id)synthesizeTouchUpEventForKey:(id)arg1;	// IMP=0x0000000000bffb74
- (id)keyplaneNameForRevertAfterTouch;	// IMP=0x0000000000bffb01
- (void)completeCommitTouchesPrecedingTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3;	// IMP=0x0000000000bff8d5
- (void)incrementPunctuationIfNeeded:(id)arg1;	// IMP=0x0000000000bff795
- (_Bool)shouldCommitPrecedingTouchesForTouchDownWithActions:(unsigned long long)arg1;	// IMP=0x0000000000bff6e3
- (void)touchDownWithKey:(id)arg1 withTouchInfo:(id)arg2 atPoint:(struct CGPoint)arg3 executionContext:(id)arg4;	// IMP=0x0000000000bfe18b
- (void)_cleanUpBlinkAssertionIfNecessary;	// IMP=0x0000000000bfe131
- (_Bool)isKeyScriptSwitchKey:(id)arg1;	// IMP=0x0000000000bfe0ab
- (_Bool)shouldSkipResponseToGlobeKey:(id)arg1 atPoint:(struct CGPoint)arg2;	// IMP=0x0000000000bfdfe6
- (void)playKeyClickSoundOnUpForKey:(id)arg1;	// IMP=0x0000000000bfdfd4
- (void)playKeyClickSoundOnDownForKey:(id)arg1;	// IMP=0x0000000000bfdf89
- (void)playKeyClickSoundForKey:(id)arg1;	// IMP=0x0000000000bfdd32
- (void)playKeyReleaseSoundForKey:(id)arg1;	// IMP=0x0000000000bfdbe5
- (void)completeHitTestForTouchDown:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000bfd4fc
- (void)touchDown:(id)arg1 executionContext:(id)arg2;	// IMP=0x0000000000bfcc9d
- (_Bool)pointInside:(struct CGPoint)arg1 forEvent:(struct __GSEvent *)arg2;	// IMP=0x0000000000bfc6d8
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;	// IMP=0x0000000000bfc688
- (_Bool)_pointAllowedInStaticHitBuffer:(struct CGPoint)arg1;	// IMP=0x0000000000bfc3ce
- (double)hitBuffer;	// IMP=0x0000000000bfc33d
- (struct CGRect)_paddedKeyUnionFrame;	// IMP=0x0000000000bfc065
- (_Bool)_handleTouchForEmojiInputView;	// IMP=0x0000000000bfbf4d
- (void)prepareForFloatingTransition:(_Bool)arg1;	// IMP=0x0000000000bfbe64
- (void)setSplit:(_Bool)arg1 animated:(_Bool)arg2;	// IMP=0x0000000000bfbcb4
- (void)_autoSplit:(id)arg1;	// IMP=0x0000000000bfbb72
- (void)setSplitProgress:(double)arg1;	// IMP=0x0000000000bfba05
- (void)pinchHandler:(id)arg1;	// IMP=0x0000000000bfb96f
- (void)pinchDidConsumeTouch:(id)arg1;	// IMP=0x0000000000bfb8cc
- (void)didDetectPinchWithSeparation:(double)arg1;	// IMP=0x0000000000bfb827
- (_Bool)pinchCanBeginWithTouches:(id)arg1 andScale:(double)arg2;	// IMP=0x0000000000bfb53f
- (_Bool)pinchSplitGestureEnabled;	// IMP=0x0000000000bfb4fc
- (_Bool)pinchDetected;	// IMP=0x0000000000bfb4df
- (void)finishSplitTransitionWithProgress:(double)arg1;	// IMP=0x0000000000bfb4c1
- (void)finishSplitTransitionWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000bfb1e9
- (void)finishSplitTransition;	// IMP=0x0000000000bfb1d5
- (void)finishSplitWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000bfad8f
- (void)showSplitTransitionView:(_Bool)arg1;	// IMP=0x0000000000bfabe1
- (void)prepareForSplitTransition;	// IMP=0x0000000000bfaa98
- (id)splitTransitionDelegate;	// IMP=0x0000000000bfa992
- (id)hostViewForResizingKeyplane:(id)arg1;	// IMP=0x0000000000bfa989
- (void)resizeKeyplaneAndRedraw:(_Bool)arg1;	// IMP=0x0000000000bfa32d
- (_Bool)keyplaneSupportsResizingGesture;	// IMP=0x0000000000bfa2f4
- (_Bool)keyplaneUsesResizingOffset;	// IMP=0x0000000000bfa1be
- (void)_didTapBiasEscapeButton:(id)arg1;	// IMP=0x0000000000bfa111
- (void)_setBiasEscapeButtonVisible:(_Bool)arg1;	// IMP=0x0000000000bf9a28
- (void)setKeyboardBias:(long long)arg1;	// IMP=0x0000000000bf9910
- (long long)currentHandBias;	// IMP=0x0000000000bf9850
- (double)biasedKeyboardWidthRatio;	// IMP=0x0000000000bf97d1
- (void)calculateReachabilityScoreWithKey:(id)arg1 keyError:(struct CGPoint)arg2;	// IMP=0x0000000000bf9213
- (void)resetHRRLayoutState;	// IMP=0x0000000000bf91d2
- (void)setNeedsVirtualDriftUpdate;	// IMP=0x0000000000bf917d
- (_Bool)_handRestRecognizerCancelShouldBeEnd;	// IMP=0x0000000000bf9160
- (id)getHorizontalOffsetFromHomeRowForRowRelativeToHomeRow:(long long)arg1;	// IMP=0x0000000000bf8d5a
- (struct CGPoint)getCenterForKeyUnderRightIndexFinger;	// IMP=0x0000000000bf8bfa
- (struct CGPoint)getCenterForKeyUnderLeftIndexFinger;	// IMP=0x0000000000bf8a9a
- (void)handRestRecognizerNotifyRestForBegin:(_Bool)arg1 location:(struct CGPoint)arg2 timestamp:(double)arg3 pathIndex:(int)arg4 touchUUID:(id)arg5 context:(id)arg6;	// IMP=0x0000000000bf895c
- (CDUnknownBlockType)handRestRecognizerSilenceNextTouchDown;	// IMP=0x0000000000bf8942
- (struct CGSize)handRestRecognizerStandardKeyPixelSize;	// IMP=0x0000000000bf86cc
- (id)handRestRecognizerGetHomeRowHint;	// IMP=0x0000000000bf850a
- (id)getSortedKeysForDisplayRowHint:(int)arg1;	// IMP=0x0000000000bf8217
- (_Bool)handRestRecognizerShouldNeverIgnoreTouchState:(id)arg1 fromPoint:(struct CGPoint)arg2 toPoint:(struct CGPoint)arg3 forRestingState:(unsigned long long)arg4 otherRestedTouchLocations:(id)arg5;	// IMP=0x0000000000bf7d56
- (unsigned char)getHandRestRecognizerState;	// IMP=0x0000000000bf7afb
- (void)layoutSubviews;	// IMP=0x0000000000bf79f2
- (unsigned long long)targetEdgesForScreenGestureRecognition;	// IMP=0x0000000000bf79c1
- (_Bool)shouldDeactivateWithoutWindow;	// IMP=0x0000000000bf79b9
- (void)fadeActivationIndicatorWithDuration:(double)arg1 withDelay:(double)arg2;	// IMP=0x0000000000bf79b3
- (id)activationIndicatorView;	// IMP=0x0000000000bf5bde
- (void)setHideKeysUnderIndicator:(_Bool)arg1;	// IMP=0x0000000000bf5b2c
- (_Bool)shouldShowIndicator;	// IMP=0x0000000000bf5aba
- (void)showPopupVariantsForKey:(id)arg1;	// IMP=0x0000000000bf41a5
- (void)preparePopupVariantsForKey:(id)arg1 onKeyplane:(id)arg2;	// IMP=0x0000000000bf40b6
- (id)_variantsOfCurrencyKey:(id)arg1 language:(id)arg2;	// IMP=0x0000000000bf3e25
- (id)_variantsByAppendingDualStringKey:(id)arg1 toVariants:(id)arg2;	// IMP=0x0000000000bf3a83
- (id)_appendingSecondaryStringToVariantsTop:(id)arg1 secondaryString:(id)arg2 withDirection:(id)arg3;	// IMP=0x0000000000bf39a5
- (id)_keyplaneVariantsKeyForString:(id)arg1;	// IMP=0x0000000000bf391a
- (id)_keyboardLongPressInteractionRegions;	// IMP=0x0000000000bf3650
- (void)longPressAction;	// IMP=0x0000000000bf27d9
- (void)showMenu:(id)arg1 forKey:(id)arg2;	// IMP=0x0000000000bf2707
- (_Bool)shouldShowInternationalMenuForKey:(id)arg1;	// IMP=0x0000000000bf269a
- (_Bool)isLongPressedKey:(id)arg1;	// IMP=0x0000000000bf25e7
- (_Bool)isShiftKeyPlaneChooser;	// IMP=0x0000000000bf2414
- (void)restoreDefaultsForAllKeys;	// IMP=0x0000000000bf23ca
- (void)restoreDefaultsForKey:(id)arg1;	// IMP=0x0000000000bf2302
- (void)setLongPressAction:(SEL)arg1 forKey:(id)arg2;	// IMP=0x0000000000bf22cd
- (void)setAction:(SEL)arg1 forKey:(id)arg2;	// IMP=0x0000000000bf2298
- (void)setTarget:(id)arg1 forKey:(id)arg2;	// IMP=0x0000000000bf220f
- (void)setLabel:(id)arg1 forKey:(id)arg2;	// IMP=0x0000000000bf1b2f
- (void)updateLayoutTags;	// IMP=0x0000000000bf1401
@property(retain, nonatomic) NSString *layoutTag; // @synthesize layoutTag=_layoutTag;
- (void)didClearInput;	// IMP=0x0000000000bf134a
- (void)touchMultitapTimer;	// IMP=0x0000000000bf126c
- (void)cancelMultitapTimer;	// IMP=0x0000000000bf1234
- (_Bool)isMultitapKey:(id)arg1;	// IMP=0x0000000000bf114d
- (void)handleMultitapTimerFired;	// IMP=0x0000000000bf0fd0
- (void)multitapExpired;	// IMP=0x0000000000bf0f7e
- (void)endMultitapForKey:(id)arg1;	// IMP=0x0000000000bf0f5d
- (void)multitapInterrupted;	// IMP=0x0000000000bf0d6a
- (_Bool)canMultitap;	// IMP=0x0000000000bf0cbb
- (id)multitapForwardKeys;	// IMP=0x0000000000bf0c97
- (id)multitapCompleteKeys;	// IMP=0x0000000000bf0c73
- (id)activeMultitapCompleteKey;	// IMP=0x0000000000bf0934
- (_Bool)hasAccentKey;	// IMP=0x0000000000bf08ef
- (_Bool)hasCandidateKeys;	// IMP=0x0000000000bf08aa
- (id)candidateList;	// IMP=0x0000000000bf07f0
- (void)logHandwritingData;	// IMP=0x0000000000bf0722
- (void)deleteHandwritingStrokesAtIndexes:(id)arg1;	// IMP=0x0000000000bf063d
- (void)clearHandwritingStrokesIfNeededAndNotify:(_Bool)arg1;	// IMP=0x0000000000bf055a
- (id)createKeyEventForStringAction:(id)arg1 forKey:(id)arg2 inputFlags:(int)arg3;	// IMP=0x0000000000befed8
- (id)createKeyEventForStringAction:(id)arg1 forKey:(id)arg2 touchInfo:(id)arg3 inputFlags:(int)arg4;	// IMP=0x0000000000befe03
- (id)currentRepresentedStringForDualDisplayKey:(id)arg1;	// IMP=0x0000000000befc6a
- (void)updatePhysicalKeyboardEvent:(id)arg1 withMarkedInput:(id)arg2;	// IMP=0x0000000000bef983
- (_Bool)isDeadkeyInput:(id)arg1;	// IMP=0x0000000000bef913
- (void)performHitTestForTouchInfo:(id)arg1 touchStage:(int)arg2 executionContextPassingUIKBTree:(id)arg3;	// IMP=0x0000000000beedb7
- (void)playKeyFeedbackIfNecessaryForTouchDownOnKey:(id)arg1 touchInfo:(id)arg2;	// IMP=0x0000000000beec9e
- (id)unprocessedTouchEventsForTouchInfo:(id)arg1 touchStage:(int)arg2 forcedKeyCode:(int)arg3;	// IMP=0x0000000000bee935
- (int)keycodeForKey:(id)arg1;	// IMP=0x0000000000bee8bf
- (_Bool)shouldIgnoreDistantKey;	// IMP=0x0000000000bee82c
- (_Bool)shouldPreventInputManagerHitTestingForKey:(id)arg1;	// IMP=0x0000000000bee817
- (_Bool)isGeometricShiftOrMoreKeyForTouch:(id)arg1;	// IMP=0x0000000000bee70b
- (id)keyHitTest:(struct CGPoint)arg1;	// IMP=0x0000000000bee684
- (id)keyHitTestWithoutCharging:(struct CGPoint)arg1;	// IMP=0x0000000000bee563
- (id)keyHitTestClosestToPoint:(struct CGPoint)arg1 inKeys:(id)arg2;	// IMP=0x0000000000bee25c
- (id)keyHitTestClosestToPoint:(struct CGPoint)arg1;	// IMP=0x0000000000bee1db
- (id)keyHitTestContainingPoint:(struct CGPoint)arg1;	// IMP=0x0000000000bedfec
- (id)keyViewHitTestForPoint:(struct CGPoint)arg1;	// IMP=0x0000000000bedd85
- (_Bool)shouldHitTestKey:(id)arg1;	// IMP=0x0000000000bedd0c
- (void)finishSliderBehaviorFeedback;	// IMP=0x0000000000bedcb2
- (void)provideSliderBehaviorFeedback;	// IMP=0x0000000000bedc75
- (void)prepareSliderBehaviorFeedback;	// IMP=0x0000000000bedbc2
- (_Bool)isTrackpadMode;	// IMP=0x0000000000bedbb2
- (void)deactivateActiveKey;	// IMP=0x0000000000bedb1d
- (void)deactivateActiveKeys;	// IMP=0x0000000000beda46
- (void)deactivateActiveKeysClearingTouchInfo:(_Bool)arg1 clearingDimming:(_Bool)arg2;	// IMP=0x0000000000bed862
- (void)cleanupPreviousKeyboardWithNewInputTraits:(id)arg1;	// IMP=0x0000000000bed7c4
- (id)initialKeyplaneNameWithKBStarName:(id)arg1;	// IMP=0x0000000000bed2ce
- (_Bool)shouldUseDefaultShiftStateFromLayout;	// IMP=0x0000000000bed2c6
- (void)setToInitialKeyplane;	// IMP=0x0000000000bed24a
- (void)showKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;	// IMP=0x0000000000bed223
- (void)reloadKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;	// IMP=0x0000000000bed1fc
- (void)showKeyboardWithInputMode:(id)arg1 renderConfig:(id)arg2 inputTraits:(id)arg3 screenTraits:(id)arg4 splitTraits:(id)arg5 reload:(_Bool)arg6;	// IMP=0x0000000000becda4
- (void)showKeyboardWithInputMode:(id)arg1 renderConfig:(id)arg2 inputTraits:(id)arg3 screenTraits:(id)arg4 splitTraits:(id)arg5;	// IMP=0x0000000000becd88
- (_Bool)_shouldInheritScreenScaleAsContentScaleFactor;	// IMP=0x0000000000becd80
- (void)updateCachedKeyplaneKeycaps;	// IMP=0x0000000000becac8
- (id)cacheTokenForKeyplane:(id)arg1 caseAlternates:(_Bool)arg2;	// IMP=0x0000000000bec836
- (id)cacheIdentifierForKeyplaneNamed:(id)arg1;	// IMP=0x0000000000bec75e
@property(readonly, nonatomic) UIKeyboardEmojiKeyDisplayController *emojiKeyManager; // @synthesize emojiKeyManager=_emojiKeyManager;
- (id)keyViewAnimator;	// IMP=0x0000000000bec6bc
- (void)updateState:(int)arg1 forKey:(id)arg2;	// IMP=0x0000000000bec65a
- (void)setState:(int)arg1 forKey:(id)arg2;	// IMP=0x0000000000bec540
- (int)stateForKey:(id)arg1;	// IMP=0x0000000000bec4d1
- (id)viewForKey:(id)arg1;	// IMP=0x0000000000bec454
- (id)keyplaneFactory;	// IMP=0x0000000000bec400
- (void)refreshForDictationAvailablityDidChange;	// IMP=0x0000000000bec2ac
- (_Bool)shouldMergeKey:(id)arg1;	// IMP=0x0000000000bebe4d
- (id)inputModeToMergeCapsLockKey;	// IMP=0x0000000000bebddc
- (_Bool)canAddRomanSwitchKey;	// IMP=0x0000000000bebcc3
- (void)relayoutForWriteboardKey;	// IMP=0x0000000000bebaf2
- (void)transitionToModalContinuousPathKeyplane;	// IMP=0x0000000000beb9c2
- (void)updateReturnKeysIfNeeded;	// IMP=0x0000000000beb8f9
- (void)updateMoreAndInternationalKeys;	// IMP=0x0000000000beb152
- (void)recenterMonolithKeyplaneSwitchKeys;	// IMP=0x0000000000beaf2f
- (void)_transformCarPlayIfNecessary;	// IMP=0x0000000000beae32
- (void)_transformFloatingKeyboardIfNecessary;	// IMP=0x0000000000bead45
- (void)_addResizeTransformationsIfNecessary;	// IMP=0x0000000000beabb9
- (void)_addExtraControlKeysIfNecessary;	// IMP=0x0000000000beaacc
- (id)_currentKeyplaneTransformationContext;	// IMP=0x0000000000bea8e6
- (_Bool)_shouldAttemptToAddSupplementaryControlKeys;	// IMP=0x0000000000bea710
- (void)_updateSupplementaryKeys;	// IMP=0x0000000000bea2fc
- (void)_swapGlobeAndMoreKeysIfNecessary;	// IMP=0x0000000000be9e8c
- (_Bool)_shouldSwapGlobeAndMore;	// IMP=0x0000000000be9b8d
- (void)mergeKeysIfNeeded;	// IMP=0x0000000000be9ab7
- (id)keylistContainingKey:(id)arg1;	// IMP=0x0000000000be9783
- (int)stateForKeyplaneSwitchKey:(id)arg1;	// IMP=0x0000000000be9543
- (void)setTextEditingTraits:(id)arg1;	// IMP=0x0000000000be8fa1
- (unsigned long long)textEditingKeyMask;	// IMP=0x0000000000be8d8e
- (int)stateForManipulationKey:(id)arg1;	// IMP=0x0000000000be8b1b
- (id)highlightedVariantListForStylingKey:(id)arg1;	// IMP=0x0000000000be8a2d
- (int)stateForStylingKey:(id)arg1;	// IMP=0x0000000000be8913
- (_Bool)supportStylingWithKey:(id)arg1;	// IMP=0x0000000000be87e9
- (int)stateForDictationKey:(id)arg1;	// IMP=0x0000000000be862e
- (int)stateForCandidateListKey:(id)arg1;	// IMP=0x0000000000be8623
- (int)stateForMultitapForwardKey:(id)arg1;	// IMP=0x0000000000be8611
- (int)stateForMultitapReverseKey:(id)arg1;	// IMP=0x0000000000be8518
- (int)displayTypeHintForShiftKey;	// IMP=0x0000000000be8488
- (int)displayTypeHintForMoreKey;	// IMP=0x0000000000be83d7
- (void)setPercentSignKeysForCurrentLocaleOnKeyplane:(id)arg1;	// IMP=0x0000000000be7c0b
- (void)setCurrencyKeysForCurrentLocaleOnKeyplane:(id)arg1;	// IMP=0x0000000000be7590
- (void)updateCurrencySymbolForKey:(id)arg1 withCurrencyString:(id)arg2;	// IMP=0x0000000000be72f5
- (_Bool)_stringContainsCurrencyCharacters:(id)arg1;	// IMP=0x0000000000be711d
- (void)_setReturnKeyEnabled:(_Bool)arg1 withDisplayName:(id)arg2 withType:(int)arg3;	// IMP=0x0000000000be6d68
- (void)setReturnKeyEnabled:(_Bool)arg1 withDisplayName:(id)arg2 withType:(int)arg3;	// IMP=0x0000000000be6c93
- (void)updateTransitionWithFlags:(unsigned long long)arg1;	// IMP=0x0000000000be6c0b
- (void)clearKeyAnnotationsIfNecessary;	// IMP=0x0000000000be6814
- (void)annotateWriteboardDisplayTypeHintForKeyIfNeeded;	// IMP=0x0000000000be64cf
- (_Bool)useUndoForMessagesWriteboard;	// IMP=0x0000000000be6445
- (_Bool)useDismissForMessagesWriteboard;	// IMP=0x0000000000be5fea
- (_Bool)ignoreWriteboard;	// IMP=0x0000000000be5f28
- (void)annotateKeysWithDeveloperPunctuation;	// IMP=0x0000000000be5962
- (void)updateStateForKey:(id)arg1;	// IMP=0x0000000000be54c5
- (void)updateAllKeyStates;	// IMP=0x0000000000be4fef
- (void)createLayoutFromName:(id)arg1;	// IMP=0x0000000000be00d6
- (_Bool)useCrescendoLayout;	// IMP=0x0000000000be00c6
- (void)reloadCurrentKeyplane;	// IMP=0x0000000000be0052
- (_Bool)_allowPaddle;	// IMP=0x0000000000bdffae
- (_Bool)_allowContinuousPathUI;	// IMP=0x0000000000bdfe18
- (_Bool)shouldIgnoreContinuousPathRequirements;	// IMP=0x0000000000bdfd36
- (_Bool)_allowStartingContinuousPathForTouchInfo:(id)arg1 alreadyActiveKeyExisting:(_Bool)arg2;	// IMP=0x0000000000bdfa85
- (unsigned long long)keyplaneShiftState;	// IMP=0x0000000000bdf988
- (_Bool)shouldAllowCurrentKeyplaneReload;	// IMP=0x0000000000bdf92d
- (_Bool)shouldMergeAssistantBarWithKeyboardLayout;	// IMP=0x0000000000bdf88b
- (struct CGSize)stretchFactor;	// IMP=0x0000000000bdf65f
- (double)stretchFactorHeight;	// IMP=0x0000000000bdf4c9
- (_Bool)stretchKeyboardToFitKeyplane:(id)arg1;	// IMP=0x0000000000bdf396
- (_Bool)stretchKeyboardToFit;	// IMP=0x0000000000bdf379
- (_Bool)showsDedicatedEmojiKeyAlongsideGlobeButton;	// IMP=0x0000000000bdf22c
- (_Bool)globeKeyDisplaysAsEmojiKey;	// IMP=0x0000000000bded0c
- (void)updateGlobeKeyDisplayString;	// IMP=0x0000000000bdec58
- (void)setTwoFingerTapTimestamp:(double)arg1;	// IMP=0x0000000000bdec46
- (_Bool)shouldAllowSelectionGestures:(_Bool)arg1 atPoint:(struct CGPoint)arg2 toBegin:(_Bool)arg3;	// IMP=0x0000000000bde78f
- (_Bool)isResized;	// IMP=0x0000000000bde743
- (_Bool)isResizing;	// IMP=0x0000000000bde726
- (_Bool)supportsEmoji;	// IMP=0x0000000000bde71e
- (_Bool)canReuseKeyplaneView;	// IMP=0x0000000000bde515
- (_Bool)shouldShowDictationKey;	// IMP=0x0000000000bde1c7
- (void)updateBackgroundIfNeeded;	// IMP=0x0000000000bddf9c
- (void)updateBackgroundCorners;	// IMP=0x0000000000bddefa
- (_Bool)isHandwritingPlane;	// IMP=0x0000000000bdde4c
- (void)setTrackpadMode:(_Bool)arg1 animated:(_Bool)arg2;	// IMP=0x0000000000bdd899
- (void)didEndTrackpadModeForServerSideDictation;	// IMP=0x0000000000bdd883
- (void)willBeginTrackpadModeForServerSideDictation;	// IMP=0x0000000000bdd86a
- (void)didEndIndirectSelectionGesture:(_Bool)arg1;	// IMP=0x0000000000bdd81f
- (_Bool)isDeveloperGestureKeybaord;	// IMP=0x0000000000bdd7c9
- (void)didEndIndirectSelectionGesture;	// IMP=0x0000000000bdd7b2
- (void)cancelTouchesForTwoFingerTapGesture:(id)arg1;	// IMP=0x0000000000bdd767
- (void)willBeginIndirectSelectionGesture:(_Bool)arg1;	// IMP=0x0000000000bdd719
- (void)willBeginIndirectSelectionGesture;	// IMP=0x0000000000bdd702
- (void)setPasscodeOutlineAlpha:(double)arg1;	// IMP=0x0000000000bdd5cc
- (void)didTriggerDestructiveRenderConfigChange;	// IMP=0x0000000000bdd55b
- (void)setRenderConfig:(id)arg1 updateKeyplane:(_Bool)arg2;	// IMP=0x0000000000bdd2af
- (void)traitCollectionDidChange;	// IMP=0x0000000000bdd0af
- (struct CGImage *)renderedKeyplaneWithToken:(id)arg1 split:(_Bool)arg2;	// IMP=0x0000000000bdcfcd
- (struct CGImage *)renderedImageWithToken:(id)arg1;	// IMP=0x0000000000bdcc4f
- (struct CGImage *)renderedImageWithStateFallbacksForToken:(id)arg1;	// IMP=0x0000000000bdcb60
- (struct CGImage *)cachedCompositeImageWithCacheKey:(id)arg1;	// IMP=0x0000000000bdc817
- (void)rebuildSplitTransitionView;	// IMP=0x0000000000bdc4de
- (_Bool)shouldMatchCaseForDomainKeys;	// IMP=0x0000000000bdc4d6
- (void)updateLocalizedKeysForKeyplane:(id)arg1 updateAllKeyplanes:(_Bool)arg2;	// IMP=0x0000000000bdc1c6
- (void)updateLocalizedKeys:(_Bool)arg1;	// IMP=0x0000000000bdc18e
- (void)updateInputModeLocalizedKeysForKeyplane:(id)arg1;	// IMP=0x0000000000bdb5e1
- (void)updateLocalizedDisplayStringsForKeys:(id)arg1;	// IMP=0x0000000000bdaa11
- (void)updateAutolocalizedKeysForKeyplane:(id)arg1;	// IMP=0x0000000000bda8cc
- (void)updateLocalizedKeysOnKeyplane:(id)arg1;	// IMP=0x0000000000bda077
- (void)nextToUseInputModeDidChange:(id)arg1;	// IMP=0x0000000000bd9f9a
- (id)internationalKeyDisplayStringOnEmojiKeyboard;	// IMP=0x0000000000bd9f22
- (void)updateLocalizedDisplayStringOnEmojiInternationalWithKeyplane:(id)arg1 withInputMode:(id)arg2;	// IMP=0x0000000000bd9a91
- (_Bool)canProduceString:(id)arg1;	// IMP=0x0000000000bd9385
@property(readonly, nonatomic) _Bool hasActiveKeys;
- (double)lastTouchDownTimestamp;	// IMP=0x0000000000bd9301
- (double)lastTouchUpTimestamp;	// IMP=0x0000000000bd92ef
- (void)setKeyboardName:(id)arg1 appearance:(long long)arg2;	// IMP=0x0000000000bd8eb1
- (id)keyForKeyboardName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x0000000000bd8e30
- (void)updateKeyboardForKeyplane:(id)arg1;	// IMP=0x0000000000bd8cc4
- (struct UIEdgeInsets)keyplanePadding;	// IMP=0x0000000000bd8c51
- (struct CGSize)sizeForKeyplane:(id)arg1;	// IMP=0x0000000000bd8910
- (_Bool)allKeyplanesHaveSameHeight;	// IMP=0x0000000000bd870c
- (void)setKeyboardAppearance:(long long)arg1;	// IMP=0x0000000000bd8422
- (int)visualStyleForKeyboardIfSplit:(_Bool)arg1;	// IMP=0x0000000000bd835f
- (void)refreshForRivenPreferences;	// IMP=0x0000000000bd81c3
- (void)tearDownSplitTransitionView;	// IMP=0x0000000000bd8122
- (struct CGRect)frameForKeylayoutName:(id)arg1;	// IMP=0x0000000000bd7f72
- (struct CGRect)frameForKeylayoutName:(id)arg1 onKeyplaneName:(id)arg2;	// IMP=0x0000000000bd7ee7
- (struct CGRect)dragGestureRectInView:(id)arg1;	// IMP=0x0000000000bd7cb6
- (id)defaultKeyplaneForKeyplane:(id)arg1;	// IMP=0x0000000000bd7c25
- (id)splitNameForKeyplane:(id)arg1;	// IMP=0x0000000000bd7b64
- (id)splitNameForKeyplaneName:(id)arg1;	// IMP=0x0000000000bd7b0d
- (id)defaultNameForKeyplaneName:(id)arg1;	// IMP=0x0000000000bd7aea
@property(readonly, nonatomic) NSString *localizedInputMode;
- (SEL)handlerForNotification:(id)arg1;	// IMP=0x0000000000bd71b2
- (void)flushKeyCache:(id)arg1;	// IMP=0x0000000000bd6f20
- (void)removeFromSuperview;	// IMP=0x0000000000bd6e82
- (void)clearTransientState;	// IMP=0x0000000000bd6daa
- (void)clearUnusedObjects:(_Bool)arg1;	// IMP=0x0000000000bd6a04
- (void)willMoveToWindow:(id)arg1;	// IMP=0x0000000000bd6976
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;	// IMP=0x0000000000bd6926
- (void)accessibilitySensitivityChanged;	// IMP=0x0000000000bd68f0
- (void)removePathEffectViewConstraintsIfNeeded;	// IMP=0x0000000000bd68a7
- (void)dealloc;	// IMP=0x0000000000bd65f4
- (id)initWithFrame:(struct CGRect)arg1;	// IMP=0x0000000000bd62d7
@property(readonly, nonatomic, getter=isRotating) _Bool rotating;
- (void)setKeyForTouchInfo:(id)arg1 key:(id)arg2;	// IMP=0x0000000000c13ab3
- (id)popupKeyViews;	// IMP=0x0000000000c13854
- (struct CGRect)frameForLastKeyWithRepresentedString:(id)arg1;	// IMP=0x0000000000c13608
- (struct CGRect)frameForKeyWithRepresentedString:(id)arg1;	// IMP=0x0000000000c13176
- (id)keyWithRepresentedString:(id)arg1;	// IMP=0x0000000000c12f17
- (id)keyplaneView:(id)arg1 containingViewForActiveKey:(id)arg2;	// IMP=0x0000000000c15706
- (void)_didChangeKeyplaneWithContext:(id)arg1;	// IMP=0x0000000000c15680
- (void)showPopupView:(long long)arg1 withKey:(id)arg2 popupInfo:(id)arg3 force:(_Bool)arg4;	// IMP=0x0000000000c154da
- (void)setKeyboardDim:(_Bool)arg1;	// IMP=0x0000000000c152b4
- (void)setPreferredHeight:(double)arg1;	// IMP=0x0000000000c15134
- (void)setDisableInteraction:(_Bool)arg1;	// IMP=0x0000000000c150eb
- (void)setKeyboardDim:(_Bool)arg1 amount:(double)arg2 withDuration:(double)arg3;	// IMP=0x0000000000c14d38
- (void)dismissGestureKeyboardIntroduction;	// IMP=0x0000000000c14cf6
- (void)handleDismissFlickView;	// IMP=0x0000000000c14c84
- (void)handleDismissFlickView:(id)arg1;	// IMP=0x0000000000c14a7a
- (void)handlePopupView;	// IMP=0x0000000000c1495d
- (void)handlePopupView:(id)arg1;	// IMP=0x0000000000c147e8
- (void)showFlickView:(long long)arg1 withKey:(id)arg2 flickString:(id)arg3;	// IMP=0x0000000000c14769
- (_Bool)handleFlick:(id)arg1;	// IMP=0x0000000000c1425f
- (void)populateFlickPopupsForKey:(id)arg1;	// IMP=0x0000000000c13d10
- (id)flickStringForInputKey:(id)arg1 direction:(long long)arg2;	// IMP=0x0000000000c13b49
- (id)flickPopupStringForKey:(id)arg1 withString:(id)arg2;	// IMP=0x0000000000c13acb
- (void)cancelModalDoubleConsonantKeysTimer;	// IMP=0x0000000000c1702c
- (void)handleDoubleConsonantKeysTimerFired;	// IMP=0x0000000000c16e93
- (void)touchModalDoubleConsonantKeysTimer;	// IMP=0x0000000000c16d80
- (void)finishContinuousPathView:(_Bool)arg1;	// IMP=0x0000000000c16b50
- (void)clearContinuousPathView;	// IMP=0x0000000000c16a5b
- (void)addContinuousPathPoint:(struct CGPoint)arg1 withTimestamp:(double)arg2;	// IMP=0x0000000000c168f7
- (void)didBeginContinuousPath;	// IMP=0x0000000000c1652f
- (void)transitionToPunctuationKeysVisible:(_Bool)arg1;	// IMP=0x0000000000c160b2
- (void)_transitionToContinuousPathState:(long long)arg1 forTouchInfo:(id)arg2;	// IMP=0x0000000000c16015
@property(retain, nonatomic) UIKeyboardPathEffectView *pathEffectView;
- (void)didMoveToWindow;	// IMP=0x0000000000c15938
- (_Bool)_continuousPathModalPunctuationPlaneEnabled;	// IMP=0x0000000000c15887
- (_Bool)_continuousPathSpotlightEffectEnabled;	// IMP=0x0000000000c15832

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

