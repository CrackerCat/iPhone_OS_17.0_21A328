//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class UIColor;

__attribute__((visibility("hidden")))
@interface OITSUColor : NSObject
{
    struct CGColor *mCGColor;	// 8 = 0x8
    unsigned long long mColorRGBSpace;	// 16 = 0x10
}

+ (id)brownColor;	// IMP=0x00100000002c9d7f
+ (id)purpleColor;	// IMP=0x00100000002c9d47
+ (id)orangeColor;	// IMP=0x00100000002c9d0f
+ (id)magentaColor;	// IMP=0x00100000002c9cdc
+ (id)yellowColor;	// IMP=0x00100000002c9ca9
+ (id)cyanColor;	// IMP=0x00100000002c9c76
+ (id)blueColor;	// IMP=0x00100000002c9c43
+ (id)greenColor;	// IMP=0x00100000002c9c10
+ (id)redColor;	// IMP=0x00100000002c9bdd
+ (id)lightGrayColor;	// IMP=0x00100000002c9bab
+ (id)grayColor;	// IMP=0x00100000002c9b79
+ (id)whiteColor;	// IMP=0x00100000002c9b4c
+ (id)blackColor;	// IMP=0x00100000002c9b1f
+ (id)clearColor;	// IMP=0x00100000002c9af7
+ (id)randomColor;	// IMP=0x00100000002c9ab2
+ (id)colorWithUIColor:(id)arg1;	// IMP=0x00100000002c9a69
+ (id)colorWithHexString:(id)arg1;	// IMP=0x00100000002c9a20
+ (id)colorWithPatternImage:(id)arg1;	// IMP=0x00100000002c99d7
+ (id)colorWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 targetRGBSpace:(unsigned long long)arg5;	// IMP=0x00100000002c997d
+ (id)colorWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002c992b
+ (id)colorWithWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00100000002c98ed
+ (id)colorWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002c989b
+ (id)colorWithCGColor:(struct CGColor *)arg1;	// IMP=0x00100000002c986c
+ (id)stringForColor:(id)arg1;	// IMP=0x00100000002d36b4
+ (id)stringForSystemColorID:(int)arg1;	// IMP=0x00100000002d3693
+ (id)colorWithSystemColorID:(int)arg1;	// IMP=0x00100000002d3630
+ (id)colorWithBGR:(unsigned int)arg1;	// IMP=0x00100000002d35bc
+ (id)colorWithCatalogName:(id)arg1 colorName:(id)arg2;	// IMP=0x00100000002d3256
+ (id)colorWithDeviceCyan:(double)arg1 magenta:(double)arg2 yellow:(double)arg3 black:(double)arg4 alpha:(double)arg5;	// IMP=0x00100000002d31cb
+ (id)colorWithDeviceRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002d31b2
+ (id)colorWithDeviceHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002d3179
+ (id)colorWithDeviceWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00100000002d3160
+ (id)colorWithCalibratedRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002d3147
+ (id)colorWithCalibratedHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00100000002d310e
+ (id)colorWithCalibratedWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00100000002d30f5
+ (id)colorWithBinaryRed:(int)arg1 green:(int)arg2 blue:(int)arg3 alpha:(int)arg4;	// IMP=0x00100000002d30b2
+ (id)colorWithBinaryRed:(int)arg1 green:(int)arg2 blue:(int)arg3;	// IMP=0x00100000002d309a
+ (id)colorWithEshColor:(const struct EshColor *)arg1;	// IMP=0x001000000034660f
+ (id)colorWithCsColour:(const struct CsColour *)arg1;	// IMP=0x0010000000346561
+ (id)colorWithRGBBytes:(unsigned char)arg1 green:(unsigned char)arg2 blue:(unsigned char)arg3;	// IMP=0x001000000035d6b7
+ (id)colorWithRGBValue:(long long)arg1;	// IMP=0x00100000003a0145
+ (id)colorWithBGRValue:(long long)arg1;	// IMP=0x00100000003a00ce
@property(readonly, nonatomic) unsigned long long colorRGBSpace; // @synthesize colorRGBSpace=mColorRGBSpace;
- (id)hexString;	// IMP=0x00000000002cbe65
- (void)paintPath:(struct CGPath *)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00000000002cbe19
- (void)paintRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;	// IMP=0x00000000002cbdcb
- (id)newBlendedColorWithFraction:(double)arg1 ofColor:(id)arg2;	// IMP=0x00000000002cbc7f
- (id)blendedColorWithFraction:(double)arg1 ofColor:(id)arg2;	// IMP=0x00000000002cbc65
- (_Bool)wantsHighContrastBackgroundForDarkMode:(id)arg1;	// IMP=0x00000000002cbbda
- (_Bool)isNearlyWhite;	// IMP=0x00000000002cbb23
- (_Bool)isOpaque;	// IMP=0x00000000002cbaf7
- (double)luminance;	// IMP=0x00000000002cb998
- (id)colorWithAlphaComponent:(double)arg1;	// IMP=0x00000000002cb94f
- (id)invertedColor;	// IMP=0x00000000002cb7fe
- (id)grayscaleColor;	// IMP=0x00000000002cb741
@property(readonly, nonatomic) UIColor *UIColor;
- (double)brightnessComponent;	// IMP=0x00000000002cb67e
- (double)saturationComponent;	// IMP=0x00000000002cb5f0
- (double)hueComponent;	// IMP=0x00000000002cb562
- (void)getRGBAComponents:(double *)arg1;	// IMP=0x00000000002cb444
@property(readonly, nonatomic) double alphaComponent;
@property(readonly, nonatomic) double blueComponent;
@property(readonly, nonatomic) double greenComponent;
@property(readonly, nonatomic) double redComponent;
- (double)p_rgbComponentWithIndex:(unsigned char)arg1;	// IMP=0x00000000002cb33f
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000002cb334
- (_Bool)isEqualWithTolerance:(id)arg1;	// IMP=0x00000000002cb2ba
- (_Bool)isAlmostEqualToColor:(id)arg1;	// IMP=0x00000000002cb17d
- (_Bool)p_isEqualToColor:(id)arg1 withTolerance:(double)arg2;	// IMP=0x00000000002cadf9
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000000002cade7
- (unsigned long long)hash;	// IMP=0x00000000002caddc
- (void)dealloc;	// IMP=0x00000000002cada2
- (id)initWithUIColor:(id)arg1;	// IMP=0x00000000002cab4f
- (id)initWithHexString:(id)arg1;	// IMP=0x00000000002ca7f7
- (id)initWithPatternImage:(id)arg1;	// IMP=0x00000000002ca651
- (id)initWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 targetRGBSpace:(unsigned long long)arg5;	// IMP=0x00000000002ca5b7
- (id)initWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002ca59d
- (id)initWithWhite:(double)arg1 alpha:(double)arg2;	// IMP=0x00000000002ca582
- (id)initWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4 colorSpace:(unsigned long long)arg5;	// IMP=0x00000000002ca49e
- (id)initWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4;	// IMP=0x00000000002ca484
- (id)initWithCGColor:(struct CGColor *)arg1;	// IMP=0x00000000002ca46d
- (id)initWithCGColor:(struct CGColor *)arg1 colorSpace:(unsigned long long)arg2;	// IMP=0x00000000002c9dc1
@property(readonly) struct CGColor *CGColor;
- (void)set;	// IMP=0x00000000002d3850
- (id)colorWithShadeValue:(double)arg1;	// IMP=0x00000000002d37cd
- (id)colorWithTintValue:(double)arg1;	// IMP=0x00000000002d3749
- (unsigned int)toBGR;	// IMP=0x00000000002d35a4
- (id)copy;	// IMP=0x00000000002d3558
@property(readonly) int CGColorSpaceModel;
@property(readonly) struct CGColorSpace *CGColorSpace;
- (void)getCyan:(double *)arg1 magenta:(double *)arg2 yellow:(double *)arg3 black:(double *)arg4 alpha:(double *)arg5;	// IMP=0x00000000002d3470
@property(readonly) double blackComponent;
@property(readonly) double yellowComponent;
@property(readonly) double magentaComponent;
@property(readonly) double cyanComponent;
- (double)p_cmykComponentWithIndex:(unsigned char)arg1;	// IMP=0x00000000002d33a5
- (void)getWhite:(double *)arg1 alpha:(double *)arg2;	// IMP=0x00000000002d3354
@property(readonly) double whiteComponent;
- (void)getRed:(double *)arg1 green:(double *)arg2 blue:(double *)arg3 alpha:(double *)arg4;	// IMP=0x00000000002d325e
- (id)solidColoredPngImage;	// IMP=0x00000000002d3092
- (id)newSolidColoredBitmap:(struct CGSize)arg1;	// IMP=0x00000000002d308a
- (CDStruct_a06f635e)ttColor;	// IMP=0x00000000002d2fdd
- (struct EshColor)eshColor;	// IMP=0x00000000003466af
- (struct CsColour)csColour;	// IMP=0x00000000003465c4
- (void)getRGBBytes:(char *)arg1 green:(char *)arg2 blue:(char *)arg3;	// IMP=0x000000000035d6f2
- (_Bool)isBlack;	// IMP=0x0000000000474e94

@end

