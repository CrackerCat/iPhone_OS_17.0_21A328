//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class EDFormula, EDName, EDRowBlocks, EDSheet, NSMutableDictionary;

__attribute__((visibility("hidden")))
@interface EPFormulaCleaner
{
    EDSheet *mCurrentSheet;	// 32 = 0x20
    EDFormula *mFormula;	// 40 = 0x28
    EDFormula *mTokensToClean;	// 48 = 0x30
    EDName *mParentName;	// 56 = 0x38
    int mRowOffset;	// 64 = 0x40
    int mColumnOffset;	// 68 = 0x44
    EDRowBlocks *mBaseFormulaRowBlocks;	// 72 = 0x48
    NSMutableDictionary *mNameArrayedTestCache;	// 80 = 0x50
    NSMutableDictionary *mNameCircularReferenceTestCache;	// 88 = 0x58
}

- (void).cxx_destruct;	// IMP=0x00000000003ad3df
- (void)cleanFormula:(id)arg1 name:(id)arg2;	// IMP=0x00000000003ad35d
- (void)cleanFormula:(id)arg1 sheet:(id)arg2;	// IMP=0x000000000014b9e6
- (void)applyProcessorToObject:(id)arg1 sheet:(id)arg2;	// IMP=0x000000000014ff1c
- (_Bool)isObjectSupported:(id)arg1;	// IMP=0x000000000014ef04
- (void)prepareToProcessFormula:(id)arg1 sheet:(id)arg2 name:(id)arg3;	// IMP=0x000000000014bc21
- (void)reset;	// IMP=0x000000000014bdb2
- (void)reportWarning:(int)arg1 parameter:(id)arg2;	// IMP=0x0000000000150608
- (void)reportWarning:(int)arg1;	// IMP=0x00000000001505f4
- (id)newFormulaToCleanFromSharedFormula:(id)arg1;	// IMP=0x000000000014c473
- (_Bool)doesNameIndexContainCircularReferences:(unsigned int)arg1 sheetIndex:(unsigned long long)arg2 previousNameIndexes:(void *)arg3;	// IMP=0x00000000003b09a4
- (_Bool)isArrayedFormulaSupported:(id)arg1 allowSimpleRanges:(_Bool)arg2 formulasBeingEvaluated:(id)arg3;	// IMP=0x00000000003b03cc
- (id)useEvaluationStackToGetParameter:(unsigned int)arg1 tokenIndex:(unsigned int)arg2 allReferencesAllowed:(_Bool)arg3 success:(_Bool *)arg4;	// IMP=0x00000000003afaeb
- (unsigned int)useEvaluationStackToGetParameter:(unsigned int)arg1 tokenIndex:(unsigned int)arg2;	// IMP=0x0000000000239218
- (int)useEvaluationStackToGetParameterTokenType:(unsigned int)arg1 tokenIndex:(unsigned int)arg2 success:(_Bool *)arg3;	// IMP=0x00000000003afa9d
- (_Bool)useEvaluationStackToCheckFunctionId:(int)arg1 functionName:(id)arg2 tokenIndex:(unsigned int)arg3;	// IMP=0x00000000003af2ef
- (void)applyMaxCellsInName:(id)arg1;	// IMP=0x000000000018dfa4
- (void)updateWorksheet:(id)arg1 row:(int)arg2 column:(int)arg3 inDictionary:(id)arg4;	// IMP=0x00000000003af1f6
- (_Bool)checkCustomFunction:(unsigned int)arg1;	// IMP=0x00000000003aeebb
- (_Bool)checkSupportedAddInName:(id)arg1 externalLink:(_Bool)arg2;	// IMP=0x0000000000219bcb
- (_Bool)checkFunctionId:(int)arg1 tokenIndex:(unsigned int)arg2;	// IMP=0x000000000014c3ff
- (_Bool)cleanName:(unsigned int)arg1 nameIndex:(unsigned int)arg2 sheetIndex:(unsigned long long)arg3 tokenOffset:(int *)arg4;	// IMP=0x00000000003ae88d
- (id)worksheetsFromLinkReferenceIndex:(unsigned int)arg1;	// IMP=0x00000000003ae6cf
- (id)worksheetFromLinkReferenceIndex:(unsigned int)arg1;	// IMP=0x00000000003ae596
- (_Bool)isLinkReferenceIndexSupported:(unsigned int)arg1 allowExternal:(_Bool)arg2;	// IMP=0x000000000015022f
- (_Bool)combineCellReferences:(unsigned int)arg1 tokenOffset:(int *)arg2;	// IMP=0x00000000003adeed
- (_Bool)cleanRange:(unsigned int)arg1 tokenOffset:(int *)arg2;	// IMP=0x00000000003add8d
- (_Bool)cleanUnion:(unsigned int)arg1;	// IMP=0x0000000000239005
- (_Bool)cleanFuncVar:(unsigned int)arg1;	// IMP=0x000000000014c3aa
- (_Bool)cleanFunc:(unsigned int)arg1;	// IMP=0x000000000014caac
- (_Bool)cleanNameX:(unsigned int)arg1 tokenOffset:(int *)arg2;	// IMP=0x00000000003adab2
- (_Bool)cleanName:(unsigned int)arg1 tokenOffset:(int *)arg2;	// IMP=0x00000000003ad9f7
- (_Bool)cleanArea3D:(unsigned int)arg1;	// IMP=0x000000000014ff31
- (_Bool)cleanRef3D:(unsigned int)arg1;	// IMP=0x00000000001506b2
- (_Bool)cleanArea:(unsigned int)arg1 updateSheet:(_Bool)arg2;	// IMP=0x000000000014c89b
- (_Bool)cleanRef:(unsigned int)arg1 updateSheet:(_Bool)arg2;	// IMP=0x000000000014bea1
- (_Bool)cleanArray:(unsigned int)arg1;	// IMP=0x0000000000242531
- (void)updateSheet:(id)arg1 rowMin:(int)arg2 rowMinRelative:(_Bool)arg3 rowMax:(int)arg4 rowMaxRelative:(_Bool)arg5 columnMin:(int)arg6 columnMinRelative:(_Bool)arg7 columnMax:(int)arg8 columnMaxRelative:(_Bool)arg9;	// IMP=0x00000000003ad917
- (void)updateSheet:(id)arg1 row:(int)arg2 rowRelative:(_Bool)arg3 column:(int)arg4 columnRelative:(_Bool)arg5;	// IMP=0x000000000014c0e9
- (_Bool)isThereContentOutsideOfLassoBoundsForSheet:(id)arg1 rowMin:(int)arg2 rowMax:(int)arg3 columnMin:(int)arg4 columnMax:(int)arg5;	// IMP=0x000000000014caa1
- (_Bool)isReferenceValidInLassoForSheet:(id)arg1 rowMin:(int)arg2 rowMinRelative:(_Bool)arg3 rowMax:(int)arg4 rowMaxRelative:(_Bool)arg5 columnMin:(int)arg6 columnMinRelative:(_Bool)arg7 columnMax:(int)arg8 columnMaxRelative:(_Bool)arg9;	// IMP=0x00000000003ad7c8
- (_Bool)isReferenceValidInLassoForRow:(int)arg1 rowRelative:(_Bool)arg2 column:(int)arg3 columnRelative:(_Bool)arg4;	// IMP=0x000000000014c058
- (void)addOffsetsToRow:(int *)arg1 rowRelative:(_Bool)arg2 column:(int *)arg3 columnRelative:(_Bool)arg4;	// IMP=0x000000000014c0c0
- (_Bool)cleanTokenAtIndex:(unsigned int)arg1 tokenOffset:(int *)arg2;	// IMP=0x00000000003ad467
- (void)cleanFormula:(id)arg1 sheet:(id)arg2 name:(id)arg3;	// IMP=0x000000000014ba6b

@end

