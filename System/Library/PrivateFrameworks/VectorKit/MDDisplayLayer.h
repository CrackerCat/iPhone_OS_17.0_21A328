//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CALayer, NSHashTable, NSString, VKSharedResources;
@protocol GGLRenderQueueSource;

__attribute__((visibility("hidden")))
@interface MDDisplayLayer : NSObject
{
    struct shared_ptr<ggl::Surface> _surface;	// 8 = 0x8
    struct shared_ptr<ggl::Swapchain> _swapchain;	// 24 = 0x18
    shared_ptr_479d1306 _texture;	// 40 = 0x28
    id <GGLRenderQueueSource> _renderSource;	// 56 = 0x38
    shared_ptr_e963992e _taskContext;	// 64 = 0x40
    void *_activeRenderQueue;	// 80 = 0x50
    struct _retain_ptr<VKSharedResources *, geo::_retain_objc_arc, geo::_release_objc_arc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_vptr$_retain_ptr;
        VKSharedResources *_obj;
        struct _retain_objc_arc _retain;
        struct _release_objc_arc _release;
    } _sharedResources;	// 88 = 0x58
    struct RenderTargetFormat _sRGBFormat;	// 112 = 0x70
    void *_device;	// 144 = 0x90
    void *_renderer;	// 152 = 0x98
    struct mutex _debugConsoleManagerCreationLock;	// 160 = 0xa0
    struct unique_ptr<md::DebugConsoleManager, std::default_delete<md::DebugConsoleManager>> _debugConsoleManager;	// 224 = 0xe0
    struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> _sRGBRenderTarget;	// 232 = 0xe8
    struct unique_ptr<ggl::RenderBuffer, std::default_delete<ggl::RenderBuffer>> _depthStencil;	// 240 = 0xf0
    struct shared_ptr<ggl::RenderBuffer> _sRGBMsaaTexture;	// 248 = 0xf8
    struct shared_ptr<ggl::Texture2DAbstract> _sRGBTexture;	// 264 = 0x108
    struct shared_ptr<ggl::RenderBuffer> _sRGBColorTextures[3];	// 280 = 0x118
    struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> _blitRenderTarget;	// 328 = 0x148
    struct RenderTargetFormat _blitFormat;	// 336 = 0x150
    struct RenderTargetFormat _linearFormat;	// 368 = 0x170
    struct unique_ptr<ggl::RenderTarget, std::default_delete<ggl::RenderTarget>> _linearRenderTarget;	// 400 = 0x190
    struct shared_ptr<ggl::RenderBuffer> _linearTexture;	// 408 = 0x198
    struct shared_ptr<ggl::RenderBuffer> _linearColorTextures[3];	// 424 = 0x1a8
    struct unique_ptr<BlitPass, std::default_delete<BlitPass>> _blitPass;	// 472 = 0x1d8
    void *_services;	// 480 = 0x1e0
    _Bool _useMultisampling;	// 488 = 0x1e8
    _Bool _supportsFramebufferFetch;	// 489 = 0x1e9
    _Bool _requiresMultisampling;	// 490 = 0x1ea
    struct CGContext *_snapshotContext;	// 496 = 0x1f0
    _Bool _readPixels;	// 504 = 0x1f8
    _Bool _shouldRasterize;	// 505 = 0x1f9
    _Bool _allowBlitToDrawable;	// 506 = 0x1fa
    struct CGRect _bounds;	// 512 = 0x200
    double _contentsScale;	// 544 = 0x220
    unsigned long long _signpostId;	// 552 = 0x228
    id _enableEnhancedCommandBufferErrorsConfigListener;	// 560 = 0x230
    id _enableCommandQueueResetOnErrorConfigListener;	// 568 = 0x238
    id _commandQueueResetMaxAttemptsCountConfigListener;	// 576 = 0x240
    NSHashTable *_observers;	// 584 = 0x248
}

- (id).cxx_construct;	// IMP=0x0000000000775e81
- (void).cxx_destruct;	// IMP=0x0000000000775cba
@property(readonly, nonatomic) _Bool shouldRasterize; // @synthesize shouldRasterize=_shouldRasterize;
@property(readonly, nonatomic) _Bool supportsFramebufferFetch; // @synthesize supportsFramebufferFetch=_supportsFramebufferFetch;
@property(readonly, nonatomic) _Bool multiSample; // @synthesize multiSample=_useMultisampling;
@property(nonatomic) __weak id <GGLRenderQueueSource> renderSource; // @synthesize renderSource=_renderSource;
- (struct __IOSurface *)flipImage;	// IMP=0x0000000000775c78
- (void *)debugConsoleForId:(int)arg1;	// IMP=0x0000000000775bb3
- (struct CGPoint)convertPoint:(struct CGPoint)arg1 toLayer:(id)arg2;	// IMP=0x0000000000775b01
@property(readonly, nonatomic) float averageFPS;
-     // Error parsing type: {function<void (std::function<std::future<void> (std::function<void ()>)>, std::function<std::future<void> (std::function<void ()>)>)>={__value_func<void (std::function<std::future<void> (std::function<void ()>)>, std::function<std::future<void> (std::function<void ()>)>)>={type=[32C]}^v}}224@0:8d16d24{function<void ()>={__value_func<void ()>={type=[32C]}^v}}32{LayoutSceneTaskModule={function<ggl::RenderQueue *()>={__value_func<ggl::RenderQueue *()>={type=[32C]}^v}}{function<void ()>={__value_func<void ()>={type=[32C]}^v}}{function<void ()>={__value_func<void ()>={type=[32C]}^v}}}80, name: prepareRenderTask:presentAtTime:didPresentDelegate:taskModule:
- (_Bool)hasRenderTarget;	// IMP=0x000000000077500b
- (void)destroyRenderTarget;	// IMP=0x0000000000774ec9
- (void)createRenderTarget;	// IMP=0x0000000000774d1f
- (_Bool)insertDisplayLayer:(id)arg1;	// IMP=0x0000000000774bd0
@property(readonly, nonatomic) void *linearRenderTarget;
@property(readonly, nonatomic) const struct RenderTargetFormat *linearFormat;
@property(readonly, nonatomic) void *finalRenderTarget;
@property(readonly, nonatomic) struct CGSize sizeInPixels;
@property(readonly, nonatomic) const struct RenderTargetFormat *format;
@property(nonatomic) struct CGRect bounds;
@property(nonatomic) double contentScale;
@property(nonatomic) struct CGSize size;
- (void)didEnterBackground;	// IMP=0x000000000077490c
- (void)didReceiveMemoryWarning;	// IMP=0x0000000000774906
- (shared_ptr_fa6aa836)bitmapData;	// IMP=0x000000000077488d
- (void)_didReadPixels:(void *)arg1;	// IMP=0x0000000000774762
- (void)drawInContext:(struct CGContext *)arg1 taskModule:(struct LayoutSceneTaskModule)arg2;	// IMP=0x0000000000773efc
-     // Error parsing type: {function<void (std::function<std::future<void> (std::function<void ()>)>, std::function<std::future<void> (std::function<void ()>)>)>={__value_func<void (std::function<std::future<void> (std::function<void ()>)>, std::function<std::future<void> (std::function<void ()>)>)>={type=[32C]}^v}}192@0:8{shared_ptr<ggl::Texture2D>=^{Texture2D}^{__shared_weak_count}}16d32{LayoutSceneTaskModule={function<ggl::RenderQueue *()>={__value_func<ggl::RenderQueue *()>={type=[32C]}^v}}{function<void ()>={__value_func<void ()>={type=[32C]}^v}}{function<void ()>={__value_func<void ()>={type=[32C]}^v}}}40@184, name: snapshotTask:timestamp:taskModule:semaphore:
- (void)setBackgroundColor:(struct CGColor *)arg1;	// IMP=0x0000000000773587
- (void)setContentsGravity:(id)arg1;	// IMP=0x00000000007734ff
- (void)setOpaque:(_Bool)arg1;	// IMP=0x000000000077349f
- (void)setNeedsDisplayOnBoundsChange:(_Bool)arg1;	// IMP=0x000000000077343f
- (void)expandedPerformanceHUD:(id)arg1;	// IMP=0x00000000007733d9
- (void)disablePerformanceHUD:(id)arg1;	// IMP=0x00000000007733c2
- (void)enablePerformanceHUD:(id)arg1;	// IMP=0x00000000007733a8
@property(readonly, nonatomic) void *renderer;
- (void)willPresent;	// IMP=0x00000000007732e6
- (void)didUpdateFrameTexture;	// IMP=0x0000000000773242
- (void)willUpdateFrameTexture;	// IMP=0x000000000077319e
- (_Bool)isDelayedRenderQueueConsumptionSupported;	// IMP=0x0000000000773153
- (void)prepareTargetsForPlatormsWithoutFramebufferFetch:(const void *)arg1 isDrawable:(_Bool)arg2;	// IMP=0x0000000000772543
- (void)prepareTargetsForPlatormsWithFramebufferFetch:(const void *)arg1;	// IMP=0x0000000000772101
- (void)_prepareTexture:(const void *)arg1 isDrawable:(_Bool)arg2;	// IMP=0x0000000000772017
- (void)prepareTexture:(const void *)arg1;	// IMP=0x0000000000772000
@property(readonly, nonatomic) CALayer *layer;
- (void)dealloc;	// IMP=0x0000000000771d5b
- (void)removeSizeObserver:(id)arg1;	// IMP=0x0000000000771d42
- (void)addSizeObserver:(id)arg1;	// IMP=0x0000000000771d29
- (void)_notifyObserversSizeChanged:(struct CGSize)arg1;	// IMP=0x0000000000771bcd
- (id)initWithContentScale:(double)arg1 useMultisampling:(_Bool)arg2 extraColorFormats:(const void *)arg3 shouldRasterize:(_Bool)arg4 allowBlitToDrawable:(_Bool)arg5 taskContext:(const void *)arg6 device:(void *)arg7 sharedResources:(id)arg8 services:(void *)arg9 signpostId:(unsigned long long)arg10;	// IMP=0x0000000000771245

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

